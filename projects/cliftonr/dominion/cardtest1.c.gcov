        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Robert Clifton on 4/18/17.
        -:    3://cardtest1  unit test for the smity card function.
        -:    4://
        -:    5://to make and test: make unittestresults.out
        -:    6://
        -:    7://gcc dominion.c rngs.c cardtest1.c -o cardtest1
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:int main() {
        -:   18:
        1:   19:    int pass = 1;
        1:   20:    char testCard[] = "smithy";
        -:   21:    struct gameState G, copyG;
        1:   22:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   23:                 sea_hag, tribute, smithy};
        1:   24:    int x = 1000;
        -:   25:    int i, retVal;
        1:   26:    int numbPlayers = 2;
        1:   27:    int randSeed = 2;
        1:   28:    int handPos = 0;
        1:   29:    int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   30:    int bonus = 0;
        -:   31:
        -:   32:
        -:   33:    //initialize game state
        1:   34:    initializeGame(numbPlayers, k, randSeed, &G);
        -:   35:
        -:   36:
        1:   37:    printf("\n->->->    - TESTING CARD: %s -    <-<-<-\n\n", testCard);
        -:   38:
        -:   39:    //basic test of return value
        1:   40:    printf("\n----  - TEST 1: Function Return  -  ----\n\n");
        -:   41:
     2002:   42:    for (i = 0; i < x; i++) {
     1000:   43:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   44:        retVal = cardEffect(smithy, choice1, choice2, choice3, &copyG, handPos, &bonus);
     1000:   45:        if (retVal != 0) {
    #####:   46:            pass = 0;
    #####:   47:            break;
        -:   48:        };
     1000:   49:    };
        1:   50:    printf("Return Value: %d, Expected: %d \n\n", retVal, 0);
        -:   51:
        -:   52:    //test and compare hand count on copied struct
        1:   53:    printf("\n----  - TEST 2: Hand Count  -  ----\n\n");
        -:   54:
        1:   55:    int addedCards = 3;
        1:   56:    int discard = 1;
        1:   57:    int currentPlayer = whoseTurn(&G);
        -:   58:
        2:   59:    for (i = 0; i < x; i++) {
        1:   60:        memcpy(&copyG, &G, sizeof(struct gameState));
        1:   61:        cardEffect(smithy, choice1, choice2, choice3, &copyG, handPos, &bonus);
        1:   62:        if (copyG.handCount[currentPlayer] != G.handCount[currentPlayer]+addedCards-discard){
        1:   63:            pass = 0;
        1:   64:            break;
        -:   65:        }
    #####:   66:    }
        -:   67:
        1:   68:    printf("Hand Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer], G.handCount[currentPlayer]+addedCards-discard);
        -:   69:
        -:   70:    //Final bool check to see if testing passed or failed,  prints result to standard out
        1:   71:    if (pass) {
    #####:   72:        printf("->->  - TEST SUCCESSFULLY COMPLETED -  <-<-\n");
    #####:   73:    } else{
        1:   74:        printf("->->  - TEST FAILED -  <-<-\n");
        -:   75:    }
        -:   76:
        1:   77:    return 0;
        -:   78:};
