        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Robert Clifton
        -:    3://randomtestcard1 - random test for smithy card function
        -:    4://
        -:    5://to make and test: make randomtestcard1.out
        -:    6://
        -:    7://gcc dominion.c rngs.c randomtestcard1.c -o randomtestcard1
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:#include <math.h>
        -:   17:#include <time.h>
        -:   18:
function main called 1 returned 100% blocks executed 78%
        -:   19:int main() {
        -:   20:
        1:   21:    int pass = 1;
        1:   22:    char testCard[] = "smithy";
        -:   23:    struct gameState G, copyG;
        -:   24:    //int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   25:
        1:   26:	int x = 1000;
        -:   27:    int i, n, retVal;
        1:   28:    int handPos = 0;
        1:   29:    int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   30:    int bonus = 0;
        -:   31:	int currentPlayer;
        1:   32:	int addedCards = 3;
        1:   33:	int discard = 1;
        -:   34:	int totalCards, copytotalCards;
        -:   35:
        -:   36:
        -:   37:	//initialize random
        1:   38:	srand(time(NULL));
        -:   39:
        -:   40:
        1:   41:    printf("\n->->->    - TESTING CARD: %s -    <-<-<-\n", testCard);
        -:   42:
        1:   43:	printf ("----  -RANDOM TESTS- ----\n");
        -:   44:
        -:   45:	//fill game struct with random numbers
     2002:   46:	for (i = 0; i < x; i++){
branch  0 taken 1000
branch  1 taken 1
 13152000:   47:		for (n = 0; n < sizeof(struct gameState)/ sizeof(int); n++) {
branch  0 taken 6575000
branch  1 taken 1000
  6575000:   48:			((int*)&G)[n] = rand() % 128;
  6575000:   49:		}
        -:   50:
        -:   51:		//set important struct vars to valid random input
     1000:   52:		G.numPlayers = (rand() % 3)+2;
     1000:   53:		G.whoseTurn = rand() % G.numPlayers;
     1000:   54:		currentPlayer = whoseTurn(&G);
     1000:   55:		G.handCount[currentPlayer] = (rand() % (MAX_HAND/2))+1;
     1000:   56:		G.deckCount[currentPlayer] = (rand() % (MAX_DECK/2))+1;
     1000:   57:		G.discardCount[currentPlayer] = (rand() % (MAX_DECK/2))+1;
     1000:   58:		handPos = (rand() % G.handCount[currentPlayer]);
        -:   59:
        -:   60:		//copy struct for testing and compare
     1000:   61:		memcpy(&copyG, &G, sizeof(struct gameState));
        -:   62:
        -:   63:		//test return value
     1000:   64:		retVal = cardEffect(smithy, choice1, choice2, choice3, &copyG, handPos, &bonus);
     1000:   65:		if (retVal != 0) {
branch  0 taken 0
branch  1 taken 1000
    #####:   66:			printf("Return Fail");
    #####:   67:			pass = 0;
    #####:   68:		};
        -:   69:
        -:   70:		//test hand count
     1000:   71:		if (copyG.handCount[currentPlayer] != G.handCount[currentPlayer]+addedCards-discard){
branch  0 taken 0
branch  1 taken 1000
    #####:   72:			pass = 0;
    #####:   73:			printf("Hand Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer], G.handCount[currentPlayer]+addedCards-discard);
    #####:   74:		}
        -:   75:
        -:   76:		//test deck and discard count
     1000:   77:		totalCards = G.deckCount[currentPlayer] + G.discardCount[currentPlayer];
     1000:   78:		copytotalCards = copyG.deckCount[currentPlayer] + copyG.discardCount[currentPlayer];
     1000:   79:		if (copytotalCards != totalCards - addedCards) {
branch  0 taken 0
branch  1 taken 1000
    #####:   80:			pass = 0;
    #####:   81:			printf("Total Cards: %d, Expected: %d \n\n", copytotalCards, totalCards-addedCards);
    #####:   82:		};
        -:   83:
     1000:   84:    }
        -:   85:
        -:   86:
        -:   87:    //Final bool check to see if testing passed or failed,  prints result to standard out
        1:   88:    if (pass) {
branch  0 taken 1
branch  1 taken 0
        1:   89:        printf("->->  - TEST SUCCESSFULLY COMPLETED -  <-<-\n");
        1:   90:    } else{
    #####:   91:        printf("->->  - TEST FAILED -  <-<-\n");
        -:   92:    }
        -:   93:
        1:   94:    return 0;
        -:   95:};
