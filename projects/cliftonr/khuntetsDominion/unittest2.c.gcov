        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Robert Clifton on 4/18/17.
        -:    3://unittest2  unit test for the fullDeckCount function.
        -:    4://
        -:    5://to make and test: make unittestresults.out
        -:    6://
        -:    7://gcc dominion.c rngs.c unittest2.c -o unittest2
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:int main() {
        -:   18:
        1:   19:    int pass = 1;
        -:   20:    int i;
        1:   21:    int x = 1000;
        -:   22:    int retVal;
        -:   23:
        -:   24:
        1:   25:    char testFunction[] = "fullDeckCount()";
        -:   26:    struct gameState G, copyG;
        1:   27:    int randSeed = 2;
        1:   28:    int numbPlayers = 2;
        1:   29:    int player = 0;
        1:   30:    int card = 0;
        -:   31:
        1:   32:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   33:                 sea_hag, tribute, smithy};
        -:   34:
        1:   35:    initializeGame(numbPlayers, k, randSeed, &G);
        -:   36:
        -:   37:
        1:   38:    printf("\n->->->    - TESTING FUNCTION: %s -    <-<-<-\n\n", testFunction);
        -:   39:
        -:   40:    //basic test of return value
        1:   41:    printf("\n----  - TEST 1:  Return Value -  ----\n\n");
        -:   42:
        1:   43:    memcpy(&copyG, &G, sizeof(struct gameState));
        -:   44:
        -:   45:
     2002:   46:    for (i = 0; i < x; i++) {
     1000:   47:        retVal = fullDeckCount(player, card, &copyG);
     1000:   48:        if (retVal != 0) {
    #####:   49:            printf("Test 1 Fail\n");
    #####:   50:            pass = 0;
    #####:   51:        }
     1000:   52:    }
        1:   53:    printf("Return Value: %d, Expected: %d \n\n", retVal, 0);
        -:   54:
        -:   55:    //test and compare hand count in copied struct
        1:   56:    printf("\n----  - TEST 2: Hand Count  -  ----\n\n");
        1:   57:    memcpy(&copyG, &G, sizeof(struct gameState));
        1:   58:    card = 4;
        -:   59:
     2002:   60:    for (i = 0; i < x; i++) {
     1000:   61:        fullDeckCount(player, card, &copyG);
     1000:   62:        if (copyG.handCount[player] != G.handCount[player]) {
    #####:   63:            printf("test 2 hand count fail, Got: %d, Expected: %d\n", copyG.handCount[player], G.handCount[player]);
    #####:   64:            pass = 0;
    #####:   65:        };
     1000:   66:    }
        -:   67:
        1:   68:    printf("Hand Count: %d, Expected: %d \n\n", copyG.handCount[player], G.handCount[player]);
        -:   69:
        -:   70:    //test and compare deck count in copied struct
        1:   71:    printf("\n----  - TEST 3: Deck Count  -  ----\n\n");
        1:   72:    memcpy(&copyG, &G, sizeof(struct gameState));
        1:   73:    card = 3;
        -:   74:
     2002:   75:    for (i = 0; i < x; i++) {
     1000:   76:        fullDeckCount(player, card, &copyG);
     1000:   77:        if (copyG.deckCount[player] != G.deckCount[player]) {
    #####:   78:            printf("test 2 hand count fail, Got: %d, Expected: %d\n", copyG.deckCount[player], G.deckCount[player]);
    #####:   79:            pass = 0;
    #####:   80:        };
     1000:   81:    }
        -:   82:
        1:   83:    printf("Deck Count: %d, Expected: %d \n\n", copyG.deckCount[player], G.deckCount[player]);
        -:   84:
        -:   85:    //test and compare deck count in copied struct
        1:   86:    printf("\n----  - TEST 4: Discard Count  -  ----\n\n");
        1:   87:    memcpy(&copyG, &G, sizeof(struct gameState));
        1:   88:    card = 5;
        -:   89:
     2002:   90:    for (i = 0; i < x; i++) {
     1000:   91:        fullDeckCount(player, card, &copyG);
     1000:   92:        if (copyG.discardCount[player] != G.discardCount[player]) {
    #####:   93:            printf("test 2 hand count fail, Got: %d, Expected: %d\n", copyG.discardCount[player], G.discardCount[player]);
    #####:   94:            pass = 0;
    #####:   95:        };
     1000:   96:    }
        -:   97:
        1:   98:    printf("Deck Count: %d, Expected: %d \n\n", copyG.discardCount[player], G.discardCount[player]);
        -:   99:
        -:  100:    //Final bool check to see if testing passed or failed,  prints result to standard out
        1:  101:    if (pass) {
        1:  102:        printf("->->  - TEST SUCCESSFULLY COMPLETED -  <-<-\n");
        1:  103:    } else{
    #####:  104:        printf("->->  - TEST FAILED -  <-<-\n");
        -:  105:    }
        -:  106:
        1:  107:    return 0;
        -:  108:};
