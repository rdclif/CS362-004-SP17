        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Robert Clifton on 4/18/17.
        -:    3://cardtest4  unit test for the feast card function.
        -:    4://
        -:    5://to make and test: make unittestresults.out
        -:    6://
        -:    7://gcc dominion.c rngs.c cardtest4.c -o cardtest4
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:
        -:   18:int main() {
        -:   19:
        1:   20:    int pass = 1;
        1:   21:    char testCard[] = "feast";
        -:   22:    struct gameState G, copyG;
        1:   23:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   24:                 sea_hag, tribute, smithy};
        1:   25:    int x = 1000;
        -:   26:    int i, retVal;
        1:   27:    int numbPlayers = 2;
        1:   28:    int randSeed = 2;
        1:   29:    int handPos = 0;
        1:   30:    int choice1 = 5, choice2 = 0, choice3 = 0;
        1:   31:    int bonus = 0;
        -:   32:
        -:   33:
        -:   34:    //initialize game state
        1:   35:    initializeGame(numbPlayers, k, randSeed, &G);
        -:   36:
        -:   37:
        1:   38:    printf("\n->->->    - TESTING CARD: %s -    <-<-<-\n\n", testCard);
        -:   39:
        -:   40:    //basic test of return value
        1:   41:    printf("\n----  - TEST 1: Function Return  -  ----\n\n");
        -:   42:
     2002:   43:    for (i = 0; i < x; i++) {
     1000:   44:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   45:        retVal = cardEffect(feast, choice1, choice2, choice3, &copyG, handPos, &bonus);
     1000:   46:        if (retVal != 0) {
    #####:   47:            pass = 0;
    #####:   48:            break;
        -:   49:        };
     1000:   50:    };
        1:   51:    printf("Return Value: %d, Expected: %d \n\n", retVal, 0);
        -:   52:
        -:   53:    //test and compare hand count in copied struct
        1:   54:    printf("\n----  - TEST 2: Hand Count  -  ----\n\n");
        -:   55:
        1:   56:    int currentPlayer = whoseTurn(&G);
        -:   57:
     2002:   58:    for (i = 0; i < x; i++) {
     1000:   59:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   60:        cardEffect(feast, choice1, choice2, choice3, &copyG, handPos, &bonus);
     1000:   61:        if (copyG.handCount[currentPlayer] != G.handCount[currentPlayer]) {
    #####:   62:            pass = 0;
    #####:   63:            break;
        -:   64:        };
     1000:   65:    };
        -:   66:
        1:   67:    printf("Hand Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer], G.handCount[currentPlayer]);
        -:   68:
        -:   69:    //test result when player choie <= 0
        1:   70:    printf("\n----  - TEST 3: Choice1 <= 0 -  ----\n\n");
        1:   71:    memcpy(&copyG, &G, sizeof(struct gameState));
        -:   72:
        1:   73:    int addedCard = 1;
        1:   74:    choice1 = 0;
        1:   75:    currentPlayer = whoseTurn(&G);
        -:   76:
     2002:   77:    for (i = 0; i < x; i++) {
     1000:   78:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   79:        cardEffect(feast, choice1, choice2, choice3, &copyG, handPos, &bonus);
     1000:   80:        if (copyG.handCount[currentPlayer] != G.handCount[currentPlayer]) {
    #####:   81:            pass = 0;
    #####:   82:            break;
        -:   83:        };
     1000:   84:    };
        -:   85:
        1:   86:    printf("Deck Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer]+copyG.deckCount[currentPlayer]+ copyG.discardCount[currentPlayer], G.handCount[currentPlayer]+ G.deckCount[currentPlayer]+ G.discardCount[currentPlayer]+addedCard);
        -:   87:
        -:   88:    //test result when player choie <= 5
        1:   89:    printf("\n----  - TEST 4: Choice1 <= 5 -  ----\n\n");
        -:   90:
        1:   91:    choice1 = 5;
        1:   92:    currentPlayer = whoseTurn(&G);
        -:   93:
     2002:   94:    for (i = 0; i < x; i++) {
     1000:   95:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   96:        cardEffect(feast, choice1, choice2, choice3, &copyG, handPos, &bonus);
        -:   97:
     1000:   98:        if (copyG.handCount[currentPlayer] != G.handCount[currentPlayer]) {
    #####:   99:            pass = 0;
    #####:  100:            break;
        -:  101:        };
     1000:  102:    };
        1:  103:    printf("Deck Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer]+copyG.deckCount[currentPlayer]+ copyG.discardCount[currentPlayer], G.handCount[currentPlayer]+ G.deckCount[currentPlayer]+ G.discardCount[currentPlayer]+addedCard);
        -:  104:
        -:  105:    //test result when player choie > 5
        1:  106:    printf("\n----  - TEST 5: Choice1 > 5 -  ----\n\n");
        -:  107:
        1:  108:    choice1 = 6;
        1:  109:    currentPlayer = whoseTurn(&G);
        -:  110:
     2002:  111:    for (i = 0; i < x; i++) {
     1000:  112:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:  113:        cardEffect(feast, choice1, choice2, choice3, &copyG, handPos, &bonus);
        -:  114:
     1000:  115:        if (copyG.handCount[currentPlayer] != G.handCount[currentPlayer]) {
    #####:  116:            pass = 0;
    #####:  117:            break;
        -:  118:        };
     1000:  119:    };
        1:  120:    printf("Deck Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer]+copyG.deckCount[currentPlayer]+ copyG.discardCount[currentPlayer], G.handCount[currentPlayer]+ G.deckCount[currentPlayer]+ G.discardCount[currentPlayer]+addedCard);
        -:  121:
        -:  122:    //test result when player card supply <= 0
        1:  123:    printf("\n----  - TEST 6: Supply <= 0 -  ----\n\n");
        -:  124:
        1:  125:    choice1 = 0;
        1:  126:    currentPlayer = whoseTurn(&G);
        -:  127:
        2:  128:    for (i = 0; i < x; i++) {
        1:  129:        memcpy(&copyG, &G, sizeof(struct gameState));
        1:  130:        copyG.supplyCount[0] = 0;
        1:  131:        cardEffect(feast, choice1, choice2, choice3, &copyG, handPos, &bonus);
        -:  132:
        1:  133:        if (copyG.handCount[currentPlayer] == G.handCount[currentPlayer]) {
        1:  134:            pass = 0;
        1:  135:            break;
        -:  136:        };
    #####:  137:    };
        -:  138:
        -:  139:    //Final bool check to see if testing passed or failed,  prints result to standard out
        1:  140:    printf("Deck Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer]+copyG.deckCount[currentPlayer]+ copyG.discardCount[currentPlayer], G.handCount[currentPlayer]+ G.deckCount[currentPlayer]+ G.discardCount[currentPlayer]+addedCard);
        1:  141:    if (pass) {
    #####:  142:        printf("->->  - TEST SUCCESSFULLY COMPLETED -  <-<-\n");
    #####:  143:    } else{
        1:  144:        printf("->->  - TEST FAILED -  <-<-\n");
        -:  145:    }
        -:  146:
        1:  147:    return 0;
        -:  148:};
