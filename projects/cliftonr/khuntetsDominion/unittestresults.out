
->->->    - TESTING CARD: smithy -    <-<-<-


----  - TEST 1: Function Return  -  ----

Return Value: 0, Expected: 0 


----  - TEST 2: Hand Count  -  ----

Hand Count: 5, Expected: 7 

->->  - TEST FAILED -  <-<-
File 'cardtest1.c'
Lines executed:86.49% of 37
cardtest1.c:creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:20.80% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Robert Clifton on 4/18/17.
        -:    3://cardtest1  unit test for the smity card function.
        -:    4://
        -:    5://to make and test: make unittestresults.out
        -:    6://
        -:    7://gcc dominion.c rngs.c cardtest1.c -o cardtest1
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:int main() {
        -:   18:
        1:   19:    int pass = 1;
        1:   20:    char testCard[] = "smithy";
        -:   21:    struct gameState G, copyG;
        1:   22:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   23:                 sea_hag, tribute, smithy};
        1:   24:    int x = 1000;
        -:   25:    int i, retVal;
        1:   26:    int numbPlayers = 2;
        1:   27:    int randSeed = 2;
        1:   28:    int handPos = 0;
        1:   29:    int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   30:    int bonus = 0;
        -:   31:
        -:   32:
        -:   33:    //initialize game state
        1:   34:    initializeGame(numbPlayers, k, randSeed, &G);
        -:   35:
        -:   36:
        1:   37:    printf("\n->->->    - TESTING CARD: %s -    <-<-<-\n\n", testCard);
        -:   38:
        -:   39:    //basic test of return value
        1:   40:    printf("\n----  - TEST 1: Function Return  -  ----\n\n");
        -:   41:
     2002:   42:    for (i = 0; i < x; i++) {
     1000:   43:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   44:        retVal = cardEffect(smithy, choice1, choice2, choice3, &copyG, handPos, &bonus);
     1000:   45:        if (retVal != 0) {
    #####:   46:            pass = 0;
    #####:   47:            break;
        -:   48:        };
     1000:   49:    };
        1:   50:    printf("Return Value: %d, Expected: %d \n\n", retVal, 0);
        -:   51:
        -:   52:    //test and compare hand count on copied struct
        1:   53:    printf("\n----  - TEST 2: Hand Count  -  ----\n\n");
        -:   54:
        1:   55:    int addedCards = 3;
        1:   56:    int discard = 1;
        1:   57:    int currentPlayer = whoseTurn(&G);
        -:   58:
        2:   59:    for (i = 0; i < x; i++) {
        1:   60:        memcpy(&copyG, &G, sizeof(struct gameState));
        1:   61:        cardEffect(smithy, choice1, choice2, choice3, &copyG, handPos, &bonus);
        1:   62:        if (copyG.handCount[currentPlayer] != G.handCount[currentPlayer]+addedCards-discard){
        1:   63:            pass = 0;
        1:   64:            break;
        -:   65:        }
    #####:   66:    }
        -:   67:
        1:   68:    printf("Hand Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer], G.handCount[currentPlayer]+addedCards-discard);
        -:   69:
        -:   70:    //Final bool check to see if testing passed or failed,  prints result to standard out
        1:   71:    if (pass) {
    #####:   72:        printf("->->  - TEST SUCCESSFULLY COMPLETED -  <-<-\n");
    #####:   73:    } else{
        1:   74:        printf("->->  - TEST FAILED -  <-<-\n");
        -:   75:    }
        -:   76:
        1:   77:    return 0;
        -:   78:};
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://test message
        -:    9:
        -:   10:int smithyEffect(struct gameState *state, int currentPlayer, int handPos);
        -:   11:
        -:   12:int council_room_effect(struct gameState *state, int currentPlayer, int handPos);
        -:   13:
        -:   14:int adventurerEffect(struct gameState *state, int currentPlayer);
        -:   15:
        -:   16:int feastEffect(struct gameState *state, int currentPlayer, int choice1);
        -:   17:
        -:   18:int gardenEffect();
        -:   19:
        -:   20:
        -:   21:int compare(const void* a, const void* b) {
       28:   22:  if (*(int*)a > *(int*)b)
    #####:   23:    return 1;
       28:   24:  if (*(int*)a < *(int*)b)
       10:   25:    return -1;
       18:   26:  return 0;
       28:   27:}
        -:   28:
        -:   29:struct gameState* newGame() {
    #####:   30:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   31:  return g;
        -:   32:}
        -:   33:
        -:   34:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   35:		  int k8, int k9, int k10) {
    #####:   36:  int* k = malloc(10 * sizeof(int));
    #####:   37:  k[0] = k1;
    #####:   38:  k[1] = k2;
    #####:   39:  k[2] = k3;
    #####:   40:  k[3] = k4;
    #####:   41:  k[4] = k5;
    #####:   42:  k[5] = k6;
    #####:   43:  k[6] = k7;
    #####:   44:  k[7] = k8;
    #####:   45:  k[8] = k9;
    #####:   46:  k[9] = k10;
    #####:   47:  return k;
        -:   48:}
        -:   49:
        -:   50:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   51:		   struct gameState *state) {
        -:   52:
        -:   53:  int i;
        -:   54:  int j;
        -:   55:  int it;			
        -:   56:  //set up random number generator
        1:   57:  SelectStream(1);
        1:   58:  PutSeed((long)randomSeed);
        -:   59:  
        -:   60:  //check number of players
        2:   61:  if (numPlayers > MAX_PLAYERS || numPlayers < 0)
        -:   62:    {
    #####:   63:      return -1;
        -:   64:    }
        -:   65:
        -:   66:  //set number of players
        1:   67:  state->numPlayers = numPlayers;
        -:   68:
        -:   69:  //check selected kingdom cards are different
       22:   70:  for (i = 0; i < 10; i++)
        -:   71:    {
      220:   72:      for (j = 0; j < 10; j++)
        -:   73:        {
      190:   74:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   75:	    {
    #####:   76:	      return -1;
        -:   77:	    }
      100:   78:        }
       10:   79:    }
        -:   80:
        -:   81:
        -:   82:  //initialize supply
        -:   83:  ///////////////////////////////
        -:   84:
        -:   85:  //set number of Curse cards
        1:   86:  if (numPlayers == 2)
        -:   87:    {
        1:   88:      state->supplyCount[curse] = 10;
        1:   89:    }
    #####:   90:  else if (numPlayers == 3)
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 20;
    #####:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[curse] = 30;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Victory cards
        1:  100:  if (numPlayers == 2)
        -:  101:    {
        1:  102:      state->supplyCount[estate] = 8;
        1:  103:      state->supplyCount[duchy] = 8;
        1:  104:      state->supplyCount[province] = 8;
        1:  105:    }
        -:  106:  else
        -:  107:    {
    #####:  108:      state->supplyCount[estate] = 12;
    #####:  109:      state->supplyCount[duchy] = 12;
    #####:  110:      state->supplyCount[province] = 12;
        -:  111:    }
        -:  112:
        -:  113:  //set number of Treasure cards
        1:  114:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  115:  state->supplyCount[silver] = 40;
        1:  116:  state->supplyCount[gold] = 30;
        -:  117:
        -:  118:  //set number of Kingdom cards
       42:  119:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  120:    {
      330:  121:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  122:	{
      155:  123:	  if (kingdomCards[j] == i)
        -:  124:	    {
        -:  125:	      //check if card is a 'Victory' Kingdom card
       20:  126:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  127:		{
        1:  128:		  if (numPlayers == 2){ 
        1:  129:		    state->supplyCount[i] = 8; 
        1:  130:		  }
    #####:  131:		  else{ state->supplyCount[i] = 12; }
        1:  132:		}
        -:  133:	      else
        -:  134:		{
        9:  135:		  state->supplyCount[i] = 10;
        -:  136:		}
       10:  137:	      break;
        -:  138:	    }
        -:  139:	  else    //card is not in the set choosen for the game
        -:  140:	    {
      145:  141:	      state->supplyCount[i] = -1;
        -:  142:	    }
      145:  143:	}
        -:  144:
       20:  145:    }
        -:  146:
        -:  147:  ////////////////////////
        -:  148:  //supply intilization complete
        -:  149:
        -:  150:  //set player decks
        6:  151:  for (i = 0; i < numPlayers; i++)
        -:  152:    {
        2:  153:      state->deckCount[i] = 0;
       16:  154:      for (j = 0; j < 3; j++)
        -:  155:	{
        6:  156:	  state->deck[i][j] = estate;
        6:  157:	  state->deckCount[i]++;
        6:  158:	}
       32:  159:      for (j = 3; j < 10; j++)
        -:  160:	{
       14:  161:	  state->deck[i][j] = copper;
       14:  162:	  state->deckCount[i]++;		
       14:  163:	}
        2:  164:    }
        -:  165:
        -:  166:  //shuffle player decks
        6:  167:  for (i = 0; i < numPlayers; i++)
        -:  168:    {
        2:  169:      if ( shuffle(i, state) < 0 )
        -:  170:	{
    #####:  171:	  return -1;
        -:  172:	}
        2:  173:    }
        -:  174:
        -:  175:  //draw player hands
        6:  176:  for (i = 0; i < numPlayers; i++)
        -:  177:    {  
        -:  178:      //initialize hand size to zero
        2:  179:      state->handCount[i] = 0;
        2:  180:      state->discardCount[i] = 0;
        -:  181:      //draw 5 cards
        -:  182:      // for (j = 0; j < 5; j++)
        -:  183:      //	{
        -:  184:      //	  drawCard(i, state);
        -:  185:      //	}
        2:  186:    }
        -:  187:  
        -:  188:  //set embargo tokens to 0 for all supply piles
       56:  189:  for (i = 0; i <= treasure_map; i++)
        -:  190:    {
       27:  191:      state->embargoTokens[i] = 0;
       27:  192:    }
        -:  193:
        -:  194:  //initialize first player's turn
        1:  195:  state->outpostPlayed = 0;
        1:  196:  state->phase = 0;
        1:  197:  state->numActions = 1;
        1:  198:  state->numBuys = 1;
        1:  199:  state->playedCardCount = 0;
        1:  200:  state->whoseTurn = 0;
        1:  201:  state->handCount[state->whoseTurn] = 0;
        -:  202:  //int it; move to top
        -:  203:
        -:  204:  //Moved draw cards to here, only drawing at the start of a turn
       12:  205:  for (it = 0; it < 5; it++){
        5:  206:    drawCard(state->whoseTurn, state);
        5:  207:  }
        -:  208:
        1:  209:  updateCoins(state->whoseTurn, state, 0);
        -:  210:
        1:  211:  return 0;
        1:  212:}
        -:  213:
        -:  214:int shuffle(int player, struct gameState *state) {
        -:  215: 
        -:  216:
        -:  217:  int newDeck[MAX_DECK];
        2:  218:  int newDeckPos = 0;
        -:  219:  int card;
        -:  220:  int i;
        -:  221:
        2:  222:  if (state->deckCount[player] < 1)
    #####:  223:    return -1;
        2:  224:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  225:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  226:
       44:  227:  while (state->deckCount[player] > 0) {
       20:  228:    card = floor(Random() * state->deckCount[player]);
       20:  229:    newDeck[newDeckPos] = state->deck[player][card];
       20:  230:    newDeckPos++;
      162:  231:    for (i = card; i < state->deckCount[player]-1; i++) {
       61:  232:      state->deck[player][i] = state->deck[player][i+1];
       61:  233:    }
       20:  234:    state->deckCount[player]--;
        -:  235:  }
       44:  236:  for (i = 0; i < newDeckPos; i++) {
       20:  237:    state->deck[player][i] = newDeck[i];
       20:  238:    state->deckCount[player]++;
       20:  239:  }
        -:  240:
        2:  241:  return 0;
        2:  242:}
        -:  243:
        -:  244:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  245:{	
        -:  246:  int card;
    #####:  247:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  248:
        -:  249:  //check if it is the right phase
    #####:  250:  if (state->phase != 0)
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //check if player has enough actions
    #####:  256:  if ( state->numActions < 1 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //get card played
    #####:  262:  card = handCard(handPos, state);
        -:  263:	
        -:  264:  //check if selected card is an action
    #####:  265:  if ( card < adventurer || card > treasure_map )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //play card
    #####:  271:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  272:    {
    #####:  273:      return -1;
        -:  274:    }
        -:  275:	
        -:  276:  //reduce number of actions
    #####:  277:  state->numActions--;
        -:  278:
        -:  279:  //update coins (Treasure cards may be added with card draws)
    #####:  280:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  281:	
    #####:  282:  return 0;
    #####:  283:}
        -:  284:
        -:  285:int buyCard(int supplyPos, struct gameState *state) {
        -:  286:  int who;
        -:  287:  if (DEBUG){
        -:  288:    printf("Entering buyCard...\n");
        -:  289:  }
        -:  290:
        -:  291:  // I don't know what to do about the phase thing.
        -:  292:
    #####:  293:  who = state->whoseTurn;
        -:  294:
    #####:  295:  if (state->numBuys < 1){
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (supplyCount(supplyPos, state) <1){
        -:  300:    if (DEBUG)
        -:  301:      printf("There are not any of that type of card left\n");
    #####:  302:    return -1;
    #####:  303:  } else if (state->coins < getCost(supplyPos)){
        -:  304:    if (DEBUG)
        -:  305:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  306:    return -1;
        -:  307:  } else {
    #####:  308:    state->phase=1;
        -:  309:    //state->supplyCount[supplyPos]--;
    #####:  310:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  311:
    #####:  312:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  313:    state->numBuys--;
        -:  314:    if (DEBUG)
        -:  315:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  316:  }
        -:  317:
        -:  318:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  319:  //state->discardCount[who]++;
        -:  320:
    #####:  321:  return 0;
    #####:  322:}
        -:  323:
        -:  324:int numHandCards(struct gameState *state) {
    #####:  325:  return state->handCount[ whoseTurn(state) ];
        -:  326:}
        -:  327:
        -:  328:int handCard(int handPos, struct gameState *state) {
    #####:  329:  int currentPlayer = whoseTurn(state);
    #####:  330:  return state->hand[currentPlayer][handPos];
        -:  331:}
        -:  332:
        -:  333:int supplyCount(int card, struct gameState *state) {
    #####:  334:  return state->supplyCount[card];
        -:  335:}
        -:  336:
        -:  337:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  338:  int i;
    #####:  339:  int count = 0;
        -:  340:
    #####:  341:  for (i = 0; i < state->deckCount[player]; i++)
        -:  342:    {
    #####:  343:      if (state->deck[player][i] == card) count++;
    #####:  344:    }
        -:  345:
    #####:  346:  for (i = 0; i < state->handCount[player]; i++)
        -:  347:    {
    #####:  348:      if (state->hand[player][i] == card) count++;
    #####:  349:    }
        -:  350:
    #####:  351:  for (i = 0; i < state->discardCount[player]; i++)
        -:  352:    {
    #####:  353:      if (state->discard[player][i] == card) count++;
    #####:  354:    }
        -:  355:
    #####:  356:  return count;
        -:  357:}
        -:  358:
        -:  359:int whoseTurn(struct gameState *state) {
     1002:  360:  return state->whoseTurn;
        -:  361:}
        -:  362:
        -:  363:int endTurn(struct gameState *state) {
        -:  364:  int k;
        -:  365:  int i;
    #####:  366:  int currentPlayer = whoseTurn(state);
        -:  367:  
        -:  368:  //Discard hand
    #####:  369:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  370:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  371:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  372:  }
    #####:  373:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  374:    
        -:  375:  //Code for determining the player
    #####:  376:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  377:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  378:  }
        -:  379:  else{
    #####:  380:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  381:  }
        -:  382:
    #####:  383:  state->outpostPlayed = 0;
    #####:  384:  state->phase = 0;
    #####:  385:  state->numActions = 1;
    #####:  386:  state->coins = 0;
    #####:  387:  state->numBuys = 1;
    #####:  388:  state->playedCardCount = 0;
    #####:  389:  state->handCount[state->whoseTurn] = 0;
        -:  390:
        -:  391:  //int k; move to top
        -:  392:  //Next player draws hand
    #####:  393:  for (k = 0; k < 5; k++){
    #####:  394:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  395:  }
        -:  396:
        -:  397:  //Update money
    #####:  398:  updateCoins(state->whoseTurn, state , 0);
        -:  399:
    #####:  400:  return 0;
        -:  401:}
        -:  402:
        -:  403:int isGameOver(struct gameState *state) {
        -:  404:  int i;
        -:  405:  int j;
        -:  406:	
        -:  407:  //if stack of Province cards is empty, the game ends
    #####:  408:  if (state->supplyCount[province] == 0)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
        -:  413:  //if three supply pile are at 0, the game ends
    #####:  414:  j = 0;
    #####:  415:  for (i = 0; i < 25; i++)
        -:  416:    {
    #####:  417:      if (state->supplyCount[i] == 0)
        -:  418:	{
    #####:  419:	  j++;
    #####:  420:	}
    #####:  421:    }
    #####:  422:  if ( j >= 3)
        -:  423:    {
    #####:  424:      return 1;
        -:  425:    }
        -:  426:
    #####:  427:  return 0;
    #####:  428:}
        -:  429:
        -:  430:int scoreFor (int player, struct gameState *state) {
        -:  431:
        -:  432:  int i;
    #####:  433:  int score = 0;
        -:  434:  //score from hand
    #####:  435:  for (i = 0; i < state->handCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  443:    }
        -:  444:
        -:  445:  //score from discard
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  454:    }
        -:  455:
        -:  456:  //score from deck
    #####:  457:  for (i = 0; i < state->discardCount[player]; i++)
        -:  458:    {
    #####:  459:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  460:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  461:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  462:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  463:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  465:    }
        -:  466:
    #####:  467:  return score;
        -:  468:}
        -:  469:
        -:  470:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  471:  int i;	
        -:  472:  int j;
        -:  473:  int highScore;
        -:  474:  int currentPlayer;
        -:  475:
        -:  476:  //get score for each player
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:    {
        -:  479:      //set unused player scores to -9999
    #####:  480:      if (i >= state->numPlayers)
        -:  481:	{
    #####:  482:	  players[i] = -9999;
    #####:  483:	}
        -:  484:      else
        -:  485:	{
    #####:  486:	  players[i] = scoreFor (i, state);
        -:  487:	}
    #####:  488:    }
        -:  489:
        -:  490:  //find highest score
    #####:  491:  j = 0;
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if (players[i] > players[j])
        -:  495:	{
    #####:  496:	  j = i;
    #####:  497:	}
    #####:  498:    }
    #####:  499:  highScore = players[j];
        -:  500:
        -:  501:  //add 1 to players who had less turns
    #####:  502:  currentPlayer = whoseTurn(state);
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if ( players[i] == highScore && i > currentPlayer )
        -:  506:	{
    #####:  507:	  players[i]++;
    #####:  508:	}
    #####:  509:    }
        -:  510:
        -:  511:  //find new highest score
    #####:  512:  j = 0;
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:      if ( players[i] > players[j] )
        -:  516:	{
    #####:  517:	  j = i;
    #####:  518:	}
    #####:  519:    }
    #####:  520:  highScore = players[j];
        -:  521:
        -:  522:  //set winners in array to 1 and rest to 0
    #####:  523:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  524:    {
    #####:  525:      if ( players[i] == highScore )
        -:  526:	{
    #####:  527:	  players[i] = 1;
    #####:  528:	}
        -:  529:      else
        -:  530:	{
    #####:  531:	  players[i] = 0;
        -:  532:	}
    #####:  533:    }
        -:  534:
    #####:  535:  return 0;
        -:  536:}
        -:  537:
        -:  538:int drawCard(int player, struct gameState *state)
        -:  539:{	int count;
        -:  540:  int deckCounter;
     1006:  541:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  542:    
        -:  543:    //Step 1 Shuffle the discard pile back into a deck
        -:  544:    int i;
        -:  545:    //Move discard to deck
    #####:  546:    for (i = 0; i < state->discardCount[player];i++){
    #####:  547:      state->deck[player][i] = state->discard[player][i];
    #####:  548:      state->discard[player][i] = -1;
    #####:  549:    }
        -:  550:
    #####:  551:    state->deckCount[player] = state->discardCount[player];
    #####:  552:    state->discardCount[player] = 0;//Reset discard
        -:  553:
        -:  554:    //Shufffle the deck
    #####:  555:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  556:   
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  559:    }
        -:  560:    
    #####:  561:    state->discardCount[player] = 0;
        -:  562:
        -:  563:    //Step 2 Draw Card
    #####:  564:    count = state->handCount[player];//Get current player's hand count
        -:  565:    
        -:  566:    if (DEBUG){//Debug statements
        -:  567:      printf("Current hand count: %d\n", count);
        -:  568:    }
        -:  569:    
    #####:  570:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  571:
    #####:  572:    if (deckCounter == 0)
    #####:  573:      return -1;
        -:  574:
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
    #####:  578:  }
        -:  579:
        -:  580:  else{
     1006:  581:    int count = state->handCount[player];//Get current hand count for player
        -:  582:    int deckCounter;
        -:  583:    if (DEBUG){//Debug statements
        -:  584:      printf("Current hand count: %d\n", count);
        -:  585:    }
        -:  586:
     1006:  587:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1006:  588:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1006:  589:    state->deckCount[player]--;
     1006:  590:    state->handCount[player]++;//Increment hand count
        -:  591:  }
        -:  592:
     1006:  593:  return 0;
     1006:  594:}
        -:  595:
        -:  596:int getCost(int cardNumber)
        -:  597:{
    #####:  598:  switch( cardNumber ) 
        -:  599:    {
        -:  600:    case curse:
    #####:  601:      return 0;
        -:  602:    case estate:
    #####:  603:      return 2;
        -:  604:    case duchy:
    #####:  605:      return 5;
        -:  606:    case province:
    #####:  607:      return 8;
        -:  608:    case copper:
    #####:  609:      return 0;
        -:  610:    case silver:
    #####:  611:      return 3;
        -:  612:    case gold:
    #####:  613:      return 6;
        -:  614:    case adventurer:
    #####:  615:      return 6;
        -:  616:    case council_room:
    #####:  617:      return 5;
        -:  618:    case feast:
    #####:  619:      return 4;
        -:  620:    case gardens:
    #####:  621:      return 4;
        -:  622:    case mine:
    #####:  623:      return 5;
        -:  624:    case remodel:
    #####:  625:      return 4;
        -:  626:    case smithy:
    #####:  627:      return 4;
        -:  628:    case village:
    #####:  629:      return 3;
        -:  630:    case baron:
    #####:  631:      return 4;
        -:  632:    case great_hall:
    #####:  633:      return 3;
        -:  634:    case minion:
    #####:  635:      return 5;
        -:  636:    case steward:
    #####:  637:      return 3;
        -:  638:    case tribute:
    #####:  639:      return 5;
        -:  640:    case ambassador:
    #####:  641:      return 3;
        -:  642:    case cutpurse:
    #####:  643:      return 4;
        -:  644:    case embargo: 
    #####:  645:      return 2;
        -:  646:    case outpost:
    #####:  647:      return 5;
        -:  648:    case salvager:
    #####:  649:      return 4;
        -:  650:    case sea_hag:
    #####:  651:      return 4;
        -:  652:    case treasure_map:
    #####:  653:      return 4;
        -:  654:    }
        -:  655:	
    #####:  656:  return -1;
    #####:  657:}
        -:  658:
        -:  659:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  660:{
        -:  661:  int i;
        -:  662:  int j;
        -:  663:  int k;
        -:  664:  int x;
        -:  665:  int index;
     1001:  666:  int currentPlayer = whoseTurn(state);
     1001:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
     1001:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
     1001:  671:  int drawntreasure=0;
        -:  672:  int cardDrawn;
     1001:  673:  int z = 0;// this is the counter for the temp hand
     1001:  674:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  675:    nextPlayer = 0;
    #####:  676:  }
        -:  677:  //uses switch to select card and perform actions
     1001:  678:  switch( card ) 
        -:  679:    {
        -:  680:		  
        -:  681:   case adventurer:
    #####:  682:	return adventurerEffect(state, currentPlayer);
        -:  683:			
        -:  684:    case council_room:
    #####:  685:		return council_room_effect(state, currentPlayer, handPos);
        -:  686:			
        -:  687:    case feast:
    #####:  688:		return feastEffect(state, currentPlayer, choice1);
        -:  689:			
        -:  690:    case gardens:
    #####:  691:      return gardenEffect();
        -:  692:			
        -:  693:    case mine:
    #####:  694:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  695:
    #####:  696:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  697:	{
    #####:  698:	  return -1;
        -:  699:	}
        -:  700:		
    #####:  701:      if (choice2 > treasure_map || choice2 < curse)
        -:  702:	{
    #####:  703:	  return -1;
        -:  704:	}
        -:  705:
    #####:  706:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  707:	{
    #####:  708:	  return -1;
        -:  709:	}
        -:  710:
    #####:  711:      gainCard(choice2, state, 2, currentPlayer);
        -:  712:
        -:  713:      //discard card from hand
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:
        -:  716:      //discard trashed card
    #####:  717:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  718:	{
    #####:  719:	  if (state->hand[currentPlayer][i] == j)
        -:  720:	    {
    #####:  721:	      discardCard(i, currentPlayer, state, 0);			
    #####:  722:	      break;
        -:  723:	    }
    #####:  724:	}
        -:  725:			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case remodel:
    #####:  729:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  730:
    #####:  731:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  732:	{
    #####:  733:	  return -1;
        -:  734:	}
        -:  735:
    #####:  736:      gainCard(choice2, state, 0, currentPlayer);
        -:  737:
        -:  738:      //discard card from hand
    #####:  739:      discardCard(handPos, currentPlayer, state, 0);
        -:  740:
        -:  741:      //discard trashed card
    #####:  742:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  743:	{
    #####:  744:	  if (state->hand[currentPlayer][i] == j)
        -:  745:	    {
    #####:  746:	      discardCard(i, currentPlayer, state, 0);			
    #####:  747:	      break;
        -:  748:	    }
    #####:  749:	}
        -:  750:
        -:  751:
    #####:  752:      return 0;
        -:  753:		
        -:  754:    case smithy:
        -:  755:      //+3 Cards
     1001:  756:      return smithyEffect(state, currentPlayer, handPos);
        -:  757:      
        -:  758:		
        -:  759:    case village:
        -:  760:      //+1 Card
    #####:  761:      drawCard(currentPlayer, state);
        -:  762:			
        -:  763:      //+2 Actions
    #####:  764:      state->numActions = state->numActions + 2;
        -:  765:			
        -:  766:      //discard played card from hand
    #####:  767:      discardCard(handPos, currentPlayer, state, 0);
    #####:  768:      return 0;
        -:  769:		
        -:  770:    case baron:
    #####:  771:      state->numBuys++;//Increase buys by 1!
    #####:  772:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  773:	int p = 0;//Iterator for hand!
    #####:  774:	int card_not_discarded = 1;//Flag for discard set!
    #####:  775:	while(card_not_discarded){
    #####:  776:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  777:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  778:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  779:	    state->discardCount[currentPlayer]++;
    #####:  780:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  781:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  782:	    }
    #####:  783:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  784:	    state->handCount[currentPlayer]--;
    #####:  785:	    card_not_discarded = 0;//Exit the loop
    #####:  786:	  }
    #####:  787:	  else if (p > state->handCount[currentPlayer]){
        -:  788:	    if(DEBUG) {
        -:  789:	      printf("No estate cards in your hand, invalid choice\n");
        -:  790:	      printf("Must gain an estate if there are any\n");
        -:  791:	    }
    #####:  792:	    if (supplyCount(estate, state) > 0){
    #####:  793:	      gainCard(estate, state, 0, currentPlayer);
    #####:  794:	      state->supplyCount[estate]--;//Decrement estates
    #####:  795:	      if (supplyCount(estate, state) == 0){
    #####:  796:		isGameOver(state);
    #####:  797:	      }
    #####:  798:	    }
    #####:  799:	    card_not_discarded = 0;//Exit the loop
    #####:  800:	  }
        -:  801:			    
        -:  802:	  else{
    #####:  803:	    p++;//Next card
        -:  804:	  }
        -:  805:	}
    #####:  806:      }
        -:  807:			    
        -:  808:      else{
    #####:  809:	if (supplyCount(estate, state) > 0){
    #####:  810:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  811:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  812:	  if (supplyCount(estate, state) == 0){
    #####:  813:	    isGameOver(state);
    #####:  814:	  }
    #####:  815:	}
        -:  816:      }
        -:  817:	    
        -:  818:      
    #####:  819:      return 0;
        -:  820:		
        -:  821:    case great_hall:
        -:  822:      //+1 Card
    #####:  823:      drawCard(currentPlayer, state);
        -:  824:			
        -:  825:      //+1 Actions
    #####:  826:      state->numActions++;
        -:  827:			
        -:  828:      //discard card from hand
    #####:  829:      discardCard(handPos, currentPlayer, state, 0);
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case minion:
        -:  833:      //+1 action
    #####:  834:      state->numActions++;
        -:  835:			
        -:  836:      //discard card from hand
    #####:  837:      discardCard(handPos, currentPlayer, state, 0);
        -:  838:			
    #####:  839:      if (choice1)		//+2 coins
        -:  840:	{
    #####:  841:	  state->coins = state->coins + 2;
    #####:  842:	}
        -:  843:			
    #####:  844:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  845:	{
        -:  846:	  //discard hand
    #####:  847:	  while(numHandCards(state) > 0)
        -:  848:	    {
    #####:  849:	      discardCard(handPos, currentPlayer, state, 0);
        -:  850:	    }
        -:  851:				
        -:  852:	  //draw 4
    #####:  853:	  for (i = 0; i < 4; i++)
        -:  854:	    {
    #####:  855:	      drawCard(currentPlayer, state);
    #####:  856:	    }
        -:  857:				
        -:  858:	  //other players discard hand and redraw if hand size > 4
    #####:  859:	  for (i = 0; i < state->numPlayers; i++)
        -:  860:	    {
    #####:  861:	      if (i != currentPlayer)
        -:  862:		{
    #####:  863:		  if ( state->handCount[i] > 4 )
        -:  864:		    {
        -:  865:		      //discard hand
    #####:  866:		      while( state->handCount[i] > 0 )
        -:  867:			{
    #####:  868:			  discardCard(handPos, i, state, 0);
        -:  869:			}
        -:  870:							
        -:  871:		      //draw 4
    #####:  872:		      for (j = 0; j < 4; j++)
        -:  873:			{
    #####:  874:			  drawCard(i, state);
    #####:  875:			}
    #####:  876:		    }
    #####:  877:		}
    #####:  878:	    }
        -:  879:				
    #####:  880:	}
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case steward:
    #####:  884:      if (choice1 == 1)
        -:  885:	{
        -:  886:	  //+2 cards
    #####:  887:	  drawCard(currentPlayer, state);
    #####:  888:	  drawCard(currentPlayer, state);
    #####:  889:	}
    #####:  890:      else if (choice1 == 2)
        -:  891:	{
        -:  892:	  //+2 coins
    #####:  893:	  state->coins = state->coins + 2;
    #####:  894:	}
        -:  895:      else
        -:  896:	{
        -:  897:	  //trash 2 cards in hand
    #####:  898:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  899:	  discardCard(choice3, currentPlayer, state, 1);
        -:  900:	}
        -:  901:			
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case tribute:
    #####:  907:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  908:	if (state->deckCount[nextPlayer] > 0){
    #####:  909:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  910:	  state->deckCount[nextPlayer]--;
    #####:  911:	}
    #####:  912:	else if (state->discardCount[nextPlayer] > 0){
    #####:  913:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  914:	  state->discardCount[nextPlayer]--;
    #####:  915:	}
        -:  916:	else{
        -:  917:	  //No Card to Reveal
        -:  918:	  if (DEBUG){
        -:  919:	    printf("No cards to reveal\n");
        -:  920:	  }
        -:  921:	}
    #####:  922:      }
        -:  923:	    
        -:  924:      else{
    #####:  925:	if (state->deckCount[nextPlayer] == 0){
    #####:  926:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  927:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  928:	    state->deckCount[nextPlayer]++;
    #####:  929:	    state->discard[nextPlayer][i] = -1;
    #####:  930:	    state->discardCount[nextPlayer]--;
    #####:  931:	  }
        -:  932:			    
    #####:  933:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  934:	} 
    #####:  935:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  937:	state->deckCount[nextPlayer]--;
    #####:  938:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:	state->deckCount[nextPlayer]--;
        -:  941:      }    
        -:  942:		       
    #####:  943:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  944:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  945:	state->playedCardCount++;
    #####:  946:	tributeRevealedCards[1] = -1;
    #####:  947:      }
        -:  948:
    #####:  949:      for (i = 0; i <= 2; i ++){
    #####:  950:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  951:	  state->coins += 2;
    #####:  952:	}
        -:  953:		    
    #####:  954:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
        -:  958:	else{//Action Card
    #####:  959:	  state->numActions = state->numActions + 2;
        -:  960:	}
    #####:  961:      }
        -:  962:	    
    #####:  963:      return 0;
        -:  964:		
        -:  965:    case ambassador:
    #####:  966:      j = 0;		//used to check if player has enough cards to discard
        -:  967:
    #####:  968:      if (choice2 > 2 || choice2 < 0)
        -:  969:	{
    #####:  970:	  return -1;				
        -:  971:	}
        -:  972:
    #####:  973:      if (choice1 == handPos)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  979:	{
    #####:  980:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  981:	    {
    #####:  982:	      j++;
    #####:  983:	    }
    #####:  984:	}
    #####:  985:      if (j < choice2)
        -:  986:	{
    #####:  987:	  return -1;				
        -:  988:	}
        -:  989:
        -:  990:      if (DEBUG) 
        -:  991:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  992:
        -:  993:      //increase supply count for choosen card by amount being discarded
    #####:  994:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  995:			
        -:  996:      //each other player gains a copy of revealed card
    #####:  997:      for (i = 0; i < state->numPlayers; i++)
        -:  998:	{
    #####:  999:	  if (i != currentPlayer)
        -: 1000:	    {
    #####: 1001:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1002:	    }
    #####: 1003:	}
        -: 1004:
        -: 1005:      //discard played card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1007:
        -: 1008:      //trash copies of cards returned to supply
    #####: 1009:      for (j = 0; j < choice2; j++)
        -: 1010:	{
    #####: 1011:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1012:	    {
    #####: 1013:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1014:		{
    #####: 1015:		  discardCard(i, currentPlayer, state, 1);
    #####: 1016:		  break;
        -: 1017:		}
    #####: 1018:	    }
    #####: 1019:	}			
        -: 1020:
    #####: 1021:      return 0;
        -: 1022:		
        -: 1023:    case cutpurse:
        -: 1024:
    #####: 1025:      updateCoins(currentPlayer, state, 2);
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
        -: 1029:	    {
    #####: 1030:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1031:		{
    #####: 1032:		  if (state->hand[i][j] == copper)
        -: 1033:		    {
    #####: 1034:		      discardCard(j, i, state, 0);
    #####: 1035:		      break;
        -: 1036:		    }
    #####: 1037:		  if (j == state->handCount[i])
        -: 1038:		    {
    #####: 1039:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1040:			{
        -: 1041:			  if (DEBUG)
        -: 1042:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1043:			}	
    #####: 1044:		      break;
        -: 1045:		    }		
    #####: 1046:		}
        -: 1047:					
    #####: 1048:	    }
        -: 1049:				
    #####: 1050:	}				
        -: 1051:
        -: 1052:      //discard played card from hand
    #####: 1053:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:
        -: 1057:		
        -: 1058:    case embargo: 
        -: 1059:      //+2 Coins
    #####: 1060:      state->coins = state->coins + 2;
        -: 1061:			
        -: 1062:      //see if selected pile is in play
    #####: 1063:      if ( state->supplyCount[choice1] == -1 )
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:			
        -: 1068:      //add embargo token to selected supply pile
    #####: 1069:      state->embargoTokens[choice1]++;
        -: 1070:			
        -: 1071:      //trash card
    #####: 1072:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case outpost:
        -: 1076:      //set outpost flag
    #####: 1077:      state->outpostPlayed++;
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case salvager:
        -: 1084:      //+1 buy
    #####: 1085:      state->numBuys++;
        -: 1086:			
    #####: 1087:      if (choice1)
        -: 1088:	{
        -: 1089:	  //gain coins equal to trashed card
    #####: 1090:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1091:	  //trash card
    #####: 1092:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1093:	}
        -: 1094:			
        -: 1095:      //discard card
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1097:      return 0;
        -: 1098:		
        -: 1099:    case sea_hag:
    #####: 1100:      for (i = 0; i < state->numPlayers; i++){
    #####: 1101:	if (i != currentPlayer){
    #####: 1102:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1103:	  state->discardCount[i]++;
    #####: 1104:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1105:	}
    #####: 1106:      }
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case treasure_map:
        -: 1110:      //search hand for another treasure_map
    #####: 1111:      index = -1;
    #####: 1112:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1113:	{
    #####: 1114:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1115:	    {
    #####: 1116:	      index = i;
    #####: 1117:	      break;
        -: 1118:	    }
    #####: 1119:	}
    #####: 1120:      if (index > -1)
        -: 1121:	{
        -: 1122:	  //trash both treasure cards
    #####: 1123:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1124:	  discardCard(index, currentPlayer, state, 1);
        -: 1125:
        -: 1126:	  //gain 4 Gold cards
    #####: 1127:	  for (i = 0; i < 4; i++)
        -: 1128:	    {
    #####: 1129:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1130:	    }
        -: 1131:				
        -: 1132:	  //return success
    #####: 1133:	  return 1;
        -: 1134:	}
        -: 1135:			
        -: 1136:      //no second treasure_map found in hand
    #####: 1137:      return -1;
        -: 1138:    }
        -: 1139:	
    #####: 1140:  return -1;
     1001: 1141:}
        -: 1142:
        -: 1143:int gardenEffect() {
    #####: 1144:printf("Your father was a hamster and your mother smelt of elderberries.");
    #####: 1145:return -1;
        -: 1146:}
        -: 1147:
        -: 1148:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1149:  int i;
        -: 1150:
     1001: 1151:  int tributeRevealedCards[2] = {-1, -1};
        -: 1152:  int temphand[MAX_HAND];// moved above the if statement
        -: 1153:
     1001: 1154:  int z = 0;// this is the counter for the temp hand
     4004: 1155:for (i = 0; i < 1; i++)
        -: 1156:	{
     1001: 1157:	  drawCard(currentPlayer, state);
     1001: 1158:	}
        -: 1159:			
        -: 1160:      //discard card from hand
     1001: 1161:      discardCard(handPos, currentPlayer, state, 0);
     1001: 1162:      return 0;
        -: 1163:}
        -: 1164:
        -: 1165:int council_room_effect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1166:      int i;
        -: 1167:      //+4 Cards
    #####: 1168:      for (i = 0; i < 4; i++)
        -: 1169:	{
    #####: 1170:	  drawCard(currentPlayer, state);
    #####: 1171:	}
        -: 1172:			
        -: 1173:      //+1 Buy
    #####: 1174:      state->numBuys++;
        -: 1175:			
        -: 1176:      //Each other player draws a card
    #####: 1177:      for (i = 0; i < state->numPlayers; i++)
        -: 1178:	{
    #####: 1179:	  if ( i != currentPlayer )
        -: 1180:	    {
    #####: 1181:	      drawCard(i, state);
    #####: 1182:	    }
    #####: 1183:	}
        -: 1184:			
        -: 1185:      //put played card in played card pile
        -: 1186:      //discardCard(handPos, currentPlayer, state, 0);
        -: 1187:			
    #####: 1188:      return 0;
        -: 1189:}
        -: 1190:
        -: 1191:int feastEffect(struct gameState *state, int currentPlayer, int choice1) {
        -: 1192:	int i;
        -: 1193:	int x;
        -: 1194:	int temphand[MAX_HAND];
        -: 1195:	
        -: 1196:	      //gain card with cost up to 5
        -: 1197:      //Backup hand
    #####: 1198:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1199:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1200:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1201:      }
        -: 1202:      //Backup hand
        -: 1203:
        -: 1204:      //Update Coins for Buy
    #####: 1205:      updateCoins(currentPlayer, state, 5);
    #####: 1206:      x = 1;//Condition to loop on
    #####: 1207:      while( x == 1) {//Buy one card
    #####: 1208:	if (supplyCount(choice1, state) <= 0){
        -: 1209:	  if (DEBUG)
        -: 1210:	    printf("None of that card left, sorry!\n");
        -: 1211:
        -: 1212:	  if (DEBUG){
        -: 1213:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1214:	  }
    #####: 1215:        return -1;
        -: 1216:	}
    #####: 1217:	else if (state->coins < getCost(choice1)){
    #####: 1218:	  printf("That card is too expensive!\n");
    #####: 1219:        return -1;
        -: 1220:
        -: 1221:	  if (DEBUG){
        -: 1222:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1223:	  }
        -: 1224:	}
        -: 1225:	else{
        -: 1226:
        -: 1227:	  if (DEBUG){
        -: 1228:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1229:	  }
        -: 1230:
    #####: 1231:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1232:	  x = 0;//No more buying cards
        -: 1233:
        -: 1234:	  if (DEBUG){
        -: 1235:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1236:	  }
        -: 1237:
        -: 1238:	}
        -: 1239:      }     
        -: 1240:
        -: 1241:      //Reset Hand
    #####: 1242:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1243:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1244:	temphand[i] = -1;
    #####: 1245:      }
        -: 1246:      //Reset Hand
        -: 1247:      			
    #####: 1248:      return 0;
        -: 1249:	
    #####: 1250:}
        -: 1251:
        -: 1252:int adventurerEffect(struct gameState *state, int currentPlayer) {
        -: 1253:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1254:	int drawntreasure=0;
        -: 1255:	int cardDrawn;
    #####: 1256:	int z = 0;// this is the counter for the temp hand
        -: 1257:    
    #####: 1258:      while(drawntreasure<2){
    #####: 1259:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1260:	  shuffle(currentPlayer, state);
    #####: 1261:	}
    #####: 1262:	drawCard(currentPlayer, state);
    #####: 1263:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1264:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1265:	  drawntreasure++;
        -: 1266:	else{
    #####: 1267:	  temphand[z]=cardDrawn;
    #####: 1268:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1269:	  z++;
        -: 1270:	}
        -: 1271:      }
    #####: 1272:      while(z-1>=0){
    #####: 1273:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1274:	z=z-1;
        -: 1275:      }
    #####: 1276:      return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
     1001: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
     1001: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1001: 1287:      state->playedCardCount++;
     1001: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
     1001: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
     1001: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
     1001: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
     1001: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
     1001: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
     1001: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
     1001: 1314:  return 0;
        -: 1315:}
        -: 1316:
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
    #####: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
    #####: 1341:    }
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
    #####: 1352:}
        -: 1353:
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
        1: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
       12: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
        5: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
        4: 1366:	  state->coins += 1;
        4: 1367:	}
        1: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
    #####: 1371:	}
        1: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
    #####: 1375:	}	
        5: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
        1: 1379:  state->coins += bonus;
        -: 1380:
        1: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c

->->->    - TESTING CARD: adventurer -    <-<-<-


----  - TEST 1: Function Return  -  ----

Return Value: 0, Expected: 0 


----  - TEST 2: Hand Count  -  ----

Hand Count: 7, Expected: 7 


----  - TEST 3: Money Count  -  ----

Money Count: 5, Expected Money Count: >= 5 


----  - TEST 4: Deck/Discard Count  -  ----

Total Cards: 3, Expected: 3 

->->  - TEST SUCCESSFULLY COMPLETED -  <-<-
File 'cardtest2.c'
Lines executed:81.25% of 80
cardtest2.c:creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:23.73% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Robert Clifton on 4/18/17.
        -:    3://cardtest2  unit test for the adventurer card function.
        -:    4://
        -:    5://to make and test: make unittestresults.out
        -:    6://
        -:    7://gcc dominion.c rngs.c cardtest2.c -o cardtest2
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:int main() {
        -:   18:
        1:   19:    int pass = 1;
        1:   20:    char testCard[] = "adventurer";
        -:   21:    struct gameState G, copyG;
        1:   22:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   23:                 sea_hag, tribute, smithy};
        -:   24:
        1:   25:    int x = 1000;
        -:   26:    int i, retVal, j;
        1:   27:    int numbPlayers = 2;
        1:   28:    int randSeed = 1000000;
        1:   29:    int handPos = 0;
        1:   30:    int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   31:    int bonus = 0;
        -:   32:
        -:   33:
        -:   34:    //initialize game state
        1:   35:    initializeGame(numbPlayers, k, randSeed, &G);
        -:   36:
        -:   37:
        1:   38:    printf("\n->->->    - TESTING CARD: %s -    <-<-<-\n\n", testCard);
        -:   39:
        -:   40:    //basic test of return value
        1:   41:    printf("\n----  - TEST 1: Function Return  -  ----\n\n");
     2002:   42:    for (i = 0; i < x; i++) {
     1000:   43:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   44:        retVal = cardEffect(adventurer, choice1, choice2, choice3, &copyG, handPos, &bonus);
     1000:   45:        if (retVal != 0) {
    #####:   46:            pass = 0;
    #####:   47:            break;
        -:   48:        };
     1000:   49:    };
        1:   50:    printf("Return Value: %d, Expected: %d \n\n", retVal, 0);
        -:   51:
        -:   52:    //test and compare hand count in copied struct
        1:   53:    printf("\n----  - TEST 2: Hand Count  -  ----\n\n");
        -:   54:
        1:   55:    int addedCards = 2;
        1:   56:    int currentPlayer = whoseTurn(&G);
     2002:   57:    for (i = 0; i < x; i++) {
     1000:   58:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   59:        cardEffect(adventurer, choice1, choice2, choice3, &copyG, handPos, &bonus);
     1000:   60:        if (copyG.handCount[currentPlayer] != G.handCount[currentPlayer] + addedCards) {
    #####:   61:            pass = 0;
    #####:   62:            break;
        -:   63:        };
     1000:   64:    }
        1:   65:    printf("Hand Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer], G.handCount[currentPlayer] + addedCards);
        -:   66:
        -:   67:    //test and compare the coin count
        1:   68:    printf("\n----  - TEST 3: Money Count  -  ----\n\n");
        -:   69:
        -:   70:    int money, copyMoney;
     2002:   71:    for (i = 0; i < x; i++) {
     1000:   72:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   73:        cardEffect(adventurer, choice1, choice2, choice3, &copyG, handPos, &bonus);
        -:   74:
     1000:   75:        money = 0;
     1000:   76:        j = 0;
    12000:   77:        while (j < numHandCards(&G)) {
     5000:   78:            if (handCard(j, &G) == copper) {
     3000:   79:                money++;
     5000:   80:            } else if (handCard(j, &G) == silver) {
    #####:   81:                money += 2;
     2000:   82:            } else if (handCard(j, &G) == gold) {
    #####:   83:                money += 3;
    #####:   84:            }
     5000:   85:            j++;
        -:   86:        }
        -:   87:
     1000:   88:        copyMoney = 0;
     1000:   89:        j = 0;
    16000:   90:        while (j < numHandCards(&copyG)) {
     7000:   91:            if (handCard(j, &copyG) == copper) {
     5000:   92:                copyMoney++;
     7000:   93:            } else if (handCard(j, &copyG) == silver) {
    #####:   94:                copyMoney += 2;
     2000:   95:            } else if (handCard(j, &copyG) == gold) {
    #####:   96:                copyMoney += 3;
    #####:   97:            }
     7000:   98:            j++;
        -:   99:        };
     1000:  100:        if (copyMoney < money+2) {
    #####:  101:            pass = 0;
    #####:  102:            break;
        -:  103:        }
     1000:  104:    };
        -:  105:
        1:  106:    printf("Money Count: %d, Expected Money Count: >= %d \n\n", copyMoney, money+2);
        -:  107:
        -:  108:    //test and compare Deck and discard count on copied struct
        1:  109:    printf("\n----  - TEST 4: Deck/Discard Count  -  ----\n\n");
        -:  110:
        1:  111:    int cardsMovedtoHand = 2;
        -:  112:    int totalCards, copytotalCards;
        1:  113:    currentPlayer = whoseTurn(&G);
        -:  114:
     2002:  115:    for (i = 0; i < x; i++) {
     1000:  116:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:  117:        cardEffect(adventurer, choice1, choice2, choice3, &copyG, handPos, &bonus);
        -:  118:
     1000:  119:        totalCards = G.deckCount[currentPlayer] + G.discardCount[currentPlayer];
     1000:  120:        copytotalCards = copyG.deckCount[currentPlayer] + copyG.discardCount[currentPlayer];
     1000:  121:        if (copytotalCards != totalCards - cardsMovedtoHand) {
    #####:  122:            pass = 0;
    #####:  123:            break;
        -:  124:        };
     1000:  125:    };
        -:  126:
        1:  127:    printf("Total Cards: %d, Expected: %d \n\n", copytotalCards, totalCards-cardsMovedtoHand);
        -:  128:
        -:  129:    //Final bool check to see if testing passed or failed,  prints result to standard out
        1:  130:    if (pass) {
        1:  131:        printf("->->  - TEST SUCCESSFULLY COMPLETED -  <-<-\n");
        1:  132:    } else{
    #####:  133:        printf("->->  - TEST FAILED -  <-<-\n");
        -:  134:    }
        -:  135:
        1:  136:    return 0;
        -:  137:};
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://test message
        -:    9:
        -:   10:int smithyEffect(struct gameState *state, int currentPlayer, int handPos);
        -:   11:
        -:   12:int council_room_effect(struct gameState *state, int currentPlayer, int handPos);
        -:   13:
        -:   14:int adventurerEffect(struct gameState *state, int currentPlayer);
        -:   15:
        -:   16:int feastEffect(struct gameState *state, int currentPlayer, int choice1);
        -:   17:
        -:   18:int gardenEffect();
        -:   19:
        -:   20:
        -:   21:int compare(const void* a, const void* b) {
       56:   22:  if (*(int*)a > *(int*)b)
    #####:   23:    return 1;
       56:   24:  if (*(int*)a < *(int*)b)
       20:   25:    return -1;
       36:   26:  return 0;
       56:   27:}
        -:   28:
        -:   29:struct gameState* newGame() {
    #####:   30:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   31:  return g;
        -:   32:}
        -:   33:
        -:   34:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   35:		  int k8, int k9, int k10) {
    #####:   36:  int* k = malloc(10 * sizeof(int));
    #####:   37:  k[0] = k1;
    #####:   38:  k[1] = k2;
    #####:   39:  k[2] = k3;
    #####:   40:  k[3] = k4;
    #####:   41:  k[4] = k5;
    #####:   42:  k[5] = k6;
    #####:   43:  k[6] = k7;
    #####:   44:  k[7] = k8;
    #####:   45:  k[8] = k9;
    #####:   46:  k[9] = k10;
    #####:   47:  return k;
        -:   48:}
        -:   49:
        -:   50:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   51:		   struct gameState *state) {
        -:   52:
        -:   53:  int i;
        -:   54:  int j;
        -:   55:  int it;			
        -:   56:  //set up random number generator
        2:   57:  SelectStream(1);
        2:   58:  PutSeed((long)randomSeed);
        -:   59:  
        -:   60:  //check number of players
        4:   61:  if (numPlayers > MAX_PLAYERS || numPlayers < 0)
        -:   62:    {
    #####:   63:      return -1;
        -:   64:    }
        -:   65:
        -:   66:  //set number of players
        2:   67:  state->numPlayers = numPlayers;
        -:   68:
        -:   69:  //check selected kingdom cards are different
       44:   70:  for (i = 0; i < 10; i++)
        -:   71:    {
      440:   72:      for (j = 0; j < 10; j++)
        -:   73:        {
      380:   74:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   75:	    {
    #####:   76:	      return -1;
        -:   77:	    }
      200:   78:        }
       20:   79:    }
        -:   80:
        -:   81:
        -:   82:  //initialize supply
        -:   83:  ///////////////////////////////
        -:   84:
        -:   85:  //set number of Curse cards
        2:   86:  if (numPlayers == 2)
        -:   87:    {
        2:   88:      state->supplyCount[curse] = 10;
        2:   89:    }
    #####:   90:  else if (numPlayers == 3)
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 20;
    #####:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[curse] = 30;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Victory cards
        2:  100:  if (numPlayers == 2)
        -:  101:    {
        2:  102:      state->supplyCount[estate] = 8;
        2:  103:      state->supplyCount[duchy] = 8;
        2:  104:      state->supplyCount[province] = 8;
        2:  105:    }
        -:  106:  else
        -:  107:    {
    #####:  108:      state->supplyCount[estate] = 12;
    #####:  109:      state->supplyCount[duchy] = 12;
    #####:  110:      state->supplyCount[province] = 12;
        -:  111:    }
        -:  112:
        -:  113:  //set number of Treasure cards
        2:  114:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  115:  state->supplyCount[silver] = 40;
        2:  116:  state->supplyCount[gold] = 30;
        -:  117:
        -:  118:  //set number of Kingdom cards
       84:  119:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  120:    {
      660:  121:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  122:	{
      310:  123:	  if (kingdomCards[j] == i)
        -:  124:	    {
        -:  125:	      //check if card is a 'Victory' Kingdom card
       40:  126:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  127:		{
        2:  128:		  if (numPlayers == 2){ 
        2:  129:		    state->supplyCount[i] = 8; 
        2:  130:		  }
    #####:  131:		  else{ state->supplyCount[i] = 12; }
        2:  132:		}
        -:  133:	      else
        -:  134:		{
       18:  135:		  state->supplyCount[i] = 10;
        -:  136:		}
       20:  137:	      break;
        -:  138:	    }
        -:  139:	  else    //card is not in the set choosen for the game
        -:  140:	    {
      290:  141:	      state->supplyCount[i] = -1;
        -:  142:	    }
      290:  143:	}
        -:  144:
       40:  145:    }
        -:  146:
        -:  147:  ////////////////////////
        -:  148:  //supply intilization complete
        -:  149:
        -:  150:  //set player decks
       12:  151:  for (i = 0; i < numPlayers; i++)
        -:  152:    {
        4:  153:      state->deckCount[i] = 0;
       32:  154:      for (j = 0; j < 3; j++)
        -:  155:	{
       12:  156:	  state->deck[i][j] = estate;
       12:  157:	  state->deckCount[i]++;
       12:  158:	}
       64:  159:      for (j = 3; j < 10; j++)
        -:  160:	{
       28:  161:	  state->deck[i][j] = copper;
       28:  162:	  state->deckCount[i]++;		
       28:  163:	}
        4:  164:    }
        -:  165:
        -:  166:  //shuffle player decks
       12:  167:  for (i = 0; i < numPlayers; i++)
        -:  168:    {
        4:  169:      if ( shuffle(i, state) < 0 )
        -:  170:	{
    #####:  171:	  return -1;
        -:  172:	}
        4:  173:    }
        -:  174:
        -:  175:  //draw player hands
       12:  176:  for (i = 0; i < numPlayers; i++)
        -:  177:    {  
        -:  178:      //initialize hand size to zero
        4:  179:      state->handCount[i] = 0;
        4:  180:      state->discardCount[i] = 0;
        -:  181:      //draw 5 cards
        -:  182:      // for (j = 0; j < 5; j++)
        -:  183:      //	{
        -:  184:      //	  drawCard(i, state);
        -:  185:      //	}
        4:  186:    }
        -:  187:  
        -:  188:  //set embargo tokens to 0 for all supply piles
      112:  189:  for (i = 0; i <= treasure_map; i++)
        -:  190:    {
       54:  191:      state->embargoTokens[i] = 0;
       54:  192:    }
        -:  193:
        -:  194:  //initialize first player's turn
        2:  195:  state->outpostPlayed = 0;
        2:  196:  state->phase = 0;
        2:  197:  state->numActions = 1;
        2:  198:  state->numBuys = 1;
        2:  199:  state->playedCardCount = 0;
        2:  200:  state->whoseTurn = 0;
        2:  201:  state->handCount[state->whoseTurn] = 0;
        -:  202:  //int it; move to top
        -:  203:
        -:  204:  //Moved draw cards to here, only drawing at the start of a turn
       24:  205:  for (it = 0; it < 5; it++){
       10:  206:    drawCard(state->whoseTurn, state);
       10:  207:  }
        -:  208:
        2:  209:  updateCoins(state->whoseTurn, state, 0);
        -:  210:
        2:  211:  return 0;
        2:  212:}
        -:  213:
        -:  214:int shuffle(int player, struct gameState *state) {
        -:  215: 
        -:  216:
        -:  217:  int newDeck[MAX_DECK];
        4:  218:  int newDeckPos = 0;
        -:  219:  int card;
        -:  220:  int i;
        -:  221:
        4:  222:  if (state->deckCount[player] < 1)
    #####:  223:    return -1;
        4:  224:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  225:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  226:
       88:  227:  while (state->deckCount[player] > 0) {
       40:  228:    card = floor(Random() * state->deckCount[player]);
       40:  229:    newDeck[newDeckPos] = state->deck[player][card];
       40:  230:    newDeckPos++;
      264:  231:    for (i = card; i < state->deckCount[player]-1; i++) {
       92:  232:      state->deck[player][i] = state->deck[player][i+1];
       92:  233:    }
       40:  234:    state->deckCount[player]--;
        -:  235:  }
       88:  236:  for (i = 0; i < newDeckPos; i++) {
       40:  237:    state->deck[player][i] = newDeck[i];
       40:  238:    state->deckCount[player]++;
       40:  239:  }
        -:  240:
        4:  241:  return 0;
        4:  242:}
        -:  243:
        -:  244:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  245:{	
        -:  246:  int card;
    #####:  247:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  248:
        -:  249:  //check if it is the right phase
    #####:  250:  if (state->phase != 0)
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //check if player has enough actions
    #####:  256:  if ( state->numActions < 1 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //get card played
    #####:  262:  card = handCard(handPos, state);
        -:  263:	
        -:  264:  //check if selected card is an action
    #####:  265:  if ( card < adventurer || card > treasure_map )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //play card
    #####:  271:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  272:    {
    #####:  273:      return -1;
        -:  274:    }
        -:  275:	
        -:  276:  //reduce number of actions
    #####:  277:  state->numActions--;
        -:  278:
        -:  279:  //update coins (Treasure cards may be added with card draws)
    #####:  280:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  281:	
    #####:  282:  return 0;
    #####:  283:}
        -:  284:
        -:  285:int buyCard(int supplyPos, struct gameState *state) {
        -:  286:  int who;
        -:  287:  if (DEBUG){
        -:  288:    printf("Entering buyCard...\n");
        -:  289:  }
        -:  290:
        -:  291:  // I don't know what to do about the phase thing.
        -:  292:
    #####:  293:  who = state->whoseTurn;
        -:  294:
    #####:  295:  if (state->numBuys < 1){
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (supplyCount(supplyPos, state) <1){
        -:  300:    if (DEBUG)
        -:  301:      printf("There are not any of that type of card left\n");
    #####:  302:    return -1;
    #####:  303:  } else if (state->coins < getCost(supplyPos)){
        -:  304:    if (DEBUG)
        -:  305:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  306:    return -1;
        -:  307:  } else {
    #####:  308:    state->phase=1;
        -:  309:    //state->supplyCount[supplyPos]--;
    #####:  310:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  311:
    #####:  312:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  313:    state->numBuys--;
        -:  314:    if (DEBUG)
        -:  315:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  316:  }
        -:  317:
        -:  318:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  319:  //state->discardCount[who]++;
        -:  320:
    #####:  321:  return 0;
    #####:  322:}
        -:  323:
        -:  324:int numHandCards(struct gameState *state) {
    14000:  325:  return state->handCount[ whoseTurn(state) ];
        -:  326:}
        -:  327:
        -:  328:int handCard(int handPos, struct gameState *state) {
    20000:  329:  int currentPlayer = whoseTurn(state);
    20000:  330:  return state->hand[currentPlayer][handPos];
        -:  331:}
        -:  332:
        -:  333:int supplyCount(int card, struct gameState *state) {
    #####:  334:  return state->supplyCount[card];
        -:  335:}
        -:  336:
        -:  337:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  338:  int i;
    #####:  339:  int count = 0;
        -:  340:
    #####:  341:  for (i = 0; i < state->deckCount[player]; i++)
        -:  342:    {
    #####:  343:      if (state->deck[player][i] == card) count++;
    #####:  344:    }
        -:  345:
    #####:  346:  for (i = 0; i < state->handCount[player]; i++)
        -:  347:    {
    #####:  348:      if (state->hand[player][i] == card) count++;
    #####:  349:    }
        -:  350:
    #####:  351:  for (i = 0; i < state->discardCount[player]; i++)
        -:  352:    {
    #####:  353:      if (state->discard[player][i] == card) count++;
    #####:  354:    }
        -:  355:
    #####:  356:  return count;
        -:  357:}
        -:  358:
        -:  359:int whoseTurn(struct gameState *state) {
    39004:  360:  return state->whoseTurn;
        -:  361:}
        -:  362:
        -:  363:int endTurn(struct gameState *state) {
        -:  364:  int k;
        -:  365:  int i;
    #####:  366:  int currentPlayer = whoseTurn(state);
        -:  367:  
        -:  368:  //Discard hand
    #####:  369:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  370:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  371:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  372:  }
    #####:  373:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  374:    
        -:  375:  //Code for determining the player
    #####:  376:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  377:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  378:  }
        -:  379:  else{
    #####:  380:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  381:  }
        -:  382:
    #####:  383:  state->outpostPlayed = 0;
    #####:  384:  state->phase = 0;
    #####:  385:  state->numActions = 1;
    #####:  386:  state->coins = 0;
    #####:  387:  state->numBuys = 1;
    #####:  388:  state->playedCardCount = 0;
    #####:  389:  state->handCount[state->whoseTurn] = 0;
        -:  390:
        -:  391:  //int k; move to top
        -:  392:  //Next player draws hand
    #####:  393:  for (k = 0; k < 5; k++){
    #####:  394:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  395:  }
        -:  396:
        -:  397:  //Update money
    #####:  398:  updateCoins(state->whoseTurn, state , 0);
        -:  399:
    #####:  400:  return 0;
        -:  401:}
        -:  402:
        -:  403:int isGameOver(struct gameState *state) {
        -:  404:  int i;
        -:  405:  int j;
        -:  406:	
        -:  407:  //if stack of Province cards is empty, the game ends
    #####:  408:  if (state->supplyCount[province] == 0)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
        -:  413:  //if three supply pile are at 0, the game ends
    #####:  414:  j = 0;
    #####:  415:  for (i = 0; i < 25; i++)
        -:  416:    {
    #####:  417:      if (state->supplyCount[i] == 0)
        -:  418:	{
    #####:  419:	  j++;
    #####:  420:	}
    #####:  421:    }
    #####:  422:  if ( j >= 3)
        -:  423:    {
    #####:  424:      return 1;
        -:  425:    }
        -:  426:
    #####:  427:  return 0;
    #####:  428:}
        -:  429:
        -:  430:int scoreFor (int player, struct gameState *state) {
        -:  431:
        -:  432:  int i;
    #####:  433:  int score = 0;
        -:  434:  //score from hand
    #####:  435:  for (i = 0; i < state->handCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  443:    }
        -:  444:
        -:  445:  //score from discard
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  454:    }
        -:  455:
        -:  456:  //score from deck
    #####:  457:  for (i = 0; i < state->discardCount[player]; i++)
        -:  458:    {
    #####:  459:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  460:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  461:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  462:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  463:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  465:    }
        -:  466:
    #####:  467:  return score;
        -:  468:}
        -:  469:
        -:  470:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  471:  int i;	
        -:  472:  int j;
        -:  473:  int highScore;
        -:  474:  int currentPlayer;
        -:  475:
        -:  476:  //get score for each player
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:    {
        -:  479:      //set unused player scores to -9999
    #####:  480:      if (i >= state->numPlayers)
        -:  481:	{
    #####:  482:	  players[i] = -9999;
    #####:  483:	}
        -:  484:      else
        -:  485:	{
    #####:  486:	  players[i] = scoreFor (i, state);
        -:  487:	}
    #####:  488:    }
        -:  489:
        -:  490:  //find highest score
    #####:  491:  j = 0;
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if (players[i] > players[j])
        -:  495:	{
    #####:  496:	  j = i;
    #####:  497:	}
    #####:  498:    }
    #####:  499:  highScore = players[j];
        -:  500:
        -:  501:  //add 1 to players who had less turns
    #####:  502:  currentPlayer = whoseTurn(state);
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if ( players[i] == highScore && i > currentPlayer )
        -:  506:	{
    #####:  507:	  players[i]++;
    #####:  508:	}
    #####:  509:    }
        -:  510:
        -:  511:  //find new highest score
    #####:  512:  j = 0;
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:      if ( players[i] > players[j] )
        -:  516:	{
    #####:  517:	  j = i;
    #####:  518:	}
    #####:  519:    }
    #####:  520:  highScore = players[j];
        -:  521:
        -:  522:  //set winners in array to 1 and rest to 0
    #####:  523:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  524:    {
    #####:  525:      if ( players[i] == highScore )
        -:  526:	{
    #####:  527:	  players[i] = 1;
    #####:  528:	}
        -:  529:      else
        -:  530:	{
    #####:  531:	  players[i] = 0;
        -:  532:	}
    #####:  533:    }
        -:  534:
    #####:  535:  return 0;
        -:  536:}
        -:  537:
        -:  538:int drawCard(int player, struct gameState *state)
        -:  539:{	int count;
        -:  540:  int deckCounter;
    13011:  541:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  542:    
        -:  543:    //Step 1 Shuffle the discard pile back into a deck
        -:  544:    int i;
        -:  545:    //Move discard to deck
    #####:  546:    for (i = 0; i < state->discardCount[player];i++){
    #####:  547:      state->deck[player][i] = state->discard[player][i];
    #####:  548:      state->discard[player][i] = -1;
    #####:  549:    }
        -:  550:
    #####:  551:    state->deckCount[player] = state->discardCount[player];
    #####:  552:    state->discardCount[player] = 0;//Reset discard
        -:  553:
        -:  554:    //Shufffle the deck
    #####:  555:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  556:   
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  559:    }
        -:  560:    
    #####:  561:    state->discardCount[player] = 0;
        -:  562:
        -:  563:    //Step 2 Draw Card
    #####:  564:    count = state->handCount[player];//Get current player's hand count
        -:  565:    
        -:  566:    if (DEBUG){//Debug statements
        -:  567:      printf("Current hand count: %d\n", count);
        -:  568:    }
        -:  569:    
    #####:  570:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  571:
    #####:  572:    if (deckCounter == 0)
    #####:  573:      return -1;
        -:  574:
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
    #####:  578:  }
        -:  579:
        -:  580:  else{
    13011:  581:    int count = state->handCount[player];//Get current hand count for player
        -:  582:    int deckCounter;
        -:  583:    if (DEBUG){//Debug statements
        -:  584:      printf("Current hand count: %d\n", count);
        -:  585:    }
        -:  586:
    13011:  587:    deckCounter = state->deckCount[player];//Create holder for the deck count
    13011:  588:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    13011:  589:    state->deckCount[player]--;
    13011:  590:    state->handCount[player]++;//Increment hand count
        -:  591:  }
        -:  592:
    13011:  593:  return 0;
    13011:  594:}
        -:  595:
        -:  596:int getCost(int cardNumber)
        -:  597:{
    #####:  598:  switch( cardNumber ) 
        -:  599:    {
        -:  600:    case curse:
    #####:  601:      return 0;
        -:  602:    case estate:
    #####:  603:      return 2;
        -:  604:    case duchy:
    #####:  605:      return 5;
        -:  606:    case province:
    #####:  607:      return 8;
        -:  608:    case copper:
    #####:  609:      return 0;
        -:  610:    case silver:
    #####:  611:      return 3;
        -:  612:    case gold:
    #####:  613:      return 6;
        -:  614:    case adventurer:
    #####:  615:      return 6;
        -:  616:    case council_room:
    #####:  617:      return 5;
        -:  618:    case feast:
    #####:  619:      return 4;
        -:  620:    case gardens:
    #####:  621:      return 4;
        -:  622:    case mine:
    #####:  623:      return 5;
        -:  624:    case remodel:
    #####:  625:      return 4;
        -:  626:    case smithy:
    #####:  627:      return 4;
        -:  628:    case village:
    #####:  629:      return 3;
        -:  630:    case baron:
    #####:  631:      return 4;
        -:  632:    case great_hall:
    #####:  633:      return 3;
        -:  634:    case minion:
    #####:  635:      return 5;
        -:  636:    case steward:
    #####:  637:      return 3;
        -:  638:    case tribute:
    #####:  639:      return 5;
        -:  640:    case ambassador:
    #####:  641:      return 3;
        -:  642:    case cutpurse:
    #####:  643:      return 4;
        -:  644:    case embargo: 
    #####:  645:      return 2;
        -:  646:    case outpost:
    #####:  647:      return 5;
        -:  648:    case salvager:
    #####:  649:      return 4;
        -:  650:    case sea_hag:
    #####:  651:      return 4;
        -:  652:    case treasure_map:
    #####:  653:      return 4;
        -:  654:    }
        -:  655:	
    #####:  656:  return -1;
    #####:  657:}
        -:  658:
        -:  659:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  660:{
        -:  661:  int i;
        -:  662:  int j;
        -:  663:  int k;
        -:  664:  int x;
        -:  665:  int index;
     5001:  666:  int currentPlayer = whoseTurn(state);
     5001:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
     5001:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
     5001:  671:  int drawntreasure=0;
        -:  672:  int cardDrawn;
     5001:  673:  int z = 0;// this is the counter for the temp hand
     5001:  674:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  675:    nextPlayer = 0;
    #####:  676:  }
        -:  677:  //uses switch to select card and perform actions
     5001:  678:  switch( card ) 
        -:  679:    {
        -:  680:		  
        -:  681:   case adventurer:
     4000:  682:	return adventurerEffect(state, currentPlayer);
        -:  683:			
        -:  684:    case council_room:
    #####:  685:		return council_room_effect(state, currentPlayer, handPos);
        -:  686:			
        -:  687:    case feast:
    #####:  688:		return feastEffect(state, currentPlayer, choice1);
        -:  689:			
        -:  690:    case gardens:
    #####:  691:      return gardenEffect();
        -:  692:			
        -:  693:    case mine:
    #####:  694:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  695:
    #####:  696:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  697:	{
    #####:  698:	  return -1;
        -:  699:	}
        -:  700:		
    #####:  701:      if (choice2 > treasure_map || choice2 < curse)
        -:  702:	{
    #####:  703:	  return -1;
        -:  704:	}
        -:  705:
    #####:  706:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  707:	{
    #####:  708:	  return -1;
        -:  709:	}
        -:  710:
    #####:  711:      gainCard(choice2, state, 2, currentPlayer);
        -:  712:
        -:  713:      //discard card from hand
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:
        -:  716:      //discard trashed card
    #####:  717:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  718:	{
    #####:  719:	  if (state->hand[currentPlayer][i] == j)
        -:  720:	    {
    #####:  721:	      discardCard(i, currentPlayer, state, 0);			
    #####:  722:	      break;
        -:  723:	    }
    #####:  724:	}
        -:  725:			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case remodel:
    #####:  729:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  730:
    #####:  731:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  732:	{
    #####:  733:	  return -1;
        -:  734:	}
        -:  735:
    #####:  736:      gainCard(choice2, state, 0, currentPlayer);
        -:  737:
        -:  738:      //discard card from hand
    #####:  739:      discardCard(handPos, currentPlayer, state, 0);
        -:  740:
        -:  741:      //discard trashed card
    #####:  742:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  743:	{
    #####:  744:	  if (state->hand[currentPlayer][i] == j)
        -:  745:	    {
    #####:  746:	      discardCard(i, currentPlayer, state, 0);			
    #####:  747:	      break;
        -:  748:	    }
    #####:  749:	}
        -:  750:
        -:  751:
    #####:  752:      return 0;
        -:  753:		
        -:  754:    case smithy:
        -:  755:      //+3 Cards
     1001:  756:      return smithyEffect(state, currentPlayer, handPos);
        -:  757:      
        -:  758:		
        -:  759:    case village:
        -:  760:      //+1 Card
    #####:  761:      drawCard(currentPlayer, state);
        -:  762:			
        -:  763:      //+2 Actions
    #####:  764:      state->numActions = state->numActions + 2;
        -:  765:			
        -:  766:      //discard played card from hand
    #####:  767:      discardCard(handPos, currentPlayer, state, 0);
    #####:  768:      return 0;
        -:  769:		
        -:  770:    case baron:
    #####:  771:      state->numBuys++;//Increase buys by 1!
    #####:  772:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  773:	int p = 0;//Iterator for hand!
    #####:  774:	int card_not_discarded = 1;//Flag for discard set!
    #####:  775:	while(card_not_discarded){
    #####:  776:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  777:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  778:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  779:	    state->discardCount[currentPlayer]++;
    #####:  780:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  781:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  782:	    }
    #####:  783:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  784:	    state->handCount[currentPlayer]--;
    #####:  785:	    card_not_discarded = 0;//Exit the loop
    #####:  786:	  }
    #####:  787:	  else if (p > state->handCount[currentPlayer]){
        -:  788:	    if(DEBUG) {
        -:  789:	      printf("No estate cards in your hand, invalid choice\n");
        -:  790:	      printf("Must gain an estate if there are any\n");
        -:  791:	    }
    #####:  792:	    if (supplyCount(estate, state) > 0){
    #####:  793:	      gainCard(estate, state, 0, currentPlayer);
    #####:  794:	      state->supplyCount[estate]--;//Decrement estates
    #####:  795:	      if (supplyCount(estate, state) == 0){
    #####:  796:		isGameOver(state);
    #####:  797:	      }
    #####:  798:	    }
    #####:  799:	    card_not_discarded = 0;//Exit the loop
    #####:  800:	  }
        -:  801:			    
        -:  802:	  else{
    #####:  803:	    p++;//Next card
        -:  804:	  }
        -:  805:	}
    #####:  806:      }
        -:  807:			    
        -:  808:      else{
    #####:  809:	if (supplyCount(estate, state) > 0){
    #####:  810:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  811:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  812:	  if (supplyCount(estate, state) == 0){
    #####:  813:	    isGameOver(state);
    #####:  814:	  }
    #####:  815:	}
        -:  816:      }
        -:  817:	    
        -:  818:      
    #####:  819:      return 0;
        -:  820:		
        -:  821:    case great_hall:
        -:  822:      //+1 Card
    #####:  823:      drawCard(currentPlayer, state);
        -:  824:			
        -:  825:      //+1 Actions
    #####:  826:      state->numActions++;
        -:  827:			
        -:  828:      //discard card from hand
    #####:  829:      discardCard(handPos, currentPlayer, state, 0);
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case minion:
        -:  833:      //+1 action
    #####:  834:      state->numActions++;
        -:  835:			
        -:  836:      //discard card from hand
    #####:  837:      discardCard(handPos, currentPlayer, state, 0);
        -:  838:			
    #####:  839:      if (choice1)		//+2 coins
        -:  840:	{
    #####:  841:	  state->coins = state->coins + 2;
    #####:  842:	}
        -:  843:			
    #####:  844:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  845:	{
        -:  846:	  //discard hand
    #####:  847:	  while(numHandCards(state) > 0)
        -:  848:	    {
    #####:  849:	      discardCard(handPos, currentPlayer, state, 0);
        -:  850:	    }
        -:  851:				
        -:  852:	  //draw 4
    #####:  853:	  for (i = 0; i < 4; i++)
        -:  854:	    {
    #####:  855:	      drawCard(currentPlayer, state);
    #####:  856:	    }
        -:  857:				
        -:  858:	  //other players discard hand and redraw if hand size > 4
    #####:  859:	  for (i = 0; i < state->numPlayers; i++)
        -:  860:	    {
    #####:  861:	      if (i != currentPlayer)
        -:  862:		{
    #####:  863:		  if ( state->handCount[i] > 4 )
        -:  864:		    {
        -:  865:		      //discard hand
    #####:  866:		      while( state->handCount[i] > 0 )
        -:  867:			{
    #####:  868:			  discardCard(handPos, i, state, 0);
        -:  869:			}
        -:  870:							
        -:  871:		      //draw 4
    #####:  872:		      for (j = 0; j < 4; j++)
        -:  873:			{
    #####:  874:			  drawCard(i, state);
    #####:  875:			}
    #####:  876:		    }
    #####:  877:		}
    #####:  878:	    }
        -:  879:				
    #####:  880:	}
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case steward:
    #####:  884:      if (choice1 == 1)
        -:  885:	{
        -:  886:	  //+2 cards
    #####:  887:	  drawCard(currentPlayer, state);
    #####:  888:	  drawCard(currentPlayer, state);
    #####:  889:	}
    #####:  890:      else if (choice1 == 2)
        -:  891:	{
        -:  892:	  //+2 coins
    #####:  893:	  state->coins = state->coins + 2;
    #####:  894:	}
        -:  895:      else
        -:  896:	{
        -:  897:	  //trash 2 cards in hand
    #####:  898:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  899:	  discardCard(choice3, currentPlayer, state, 1);
        -:  900:	}
        -:  901:			
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case tribute:
    #####:  907:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  908:	if (state->deckCount[nextPlayer] > 0){
    #####:  909:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  910:	  state->deckCount[nextPlayer]--;
    #####:  911:	}
    #####:  912:	else if (state->discardCount[nextPlayer] > 0){
    #####:  913:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  914:	  state->discardCount[nextPlayer]--;
    #####:  915:	}
        -:  916:	else{
        -:  917:	  //No Card to Reveal
        -:  918:	  if (DEBUG){
        -:  919:	    printf("No cards to reveal\n");
        -:  920:	  }
        -:  921:	}
    #####:  922:      }
        -:  923:	    
        -:  924:      else{
    #####:  925:	if (state->deckCount[nextPlayer] == 0){
    #####:  926:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  927:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  928:	    state->deckCount[nextPlayer]++;
    #####:  929:	    state->discard[nextPlayer][i] = -1;
    #####:  930:	    state->discardCount[nextPlayer]--;
    #####:  931:	  }
        -:  932:			    
    #####:  933:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  934:	} 
    #####:  935:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  937:	state->deckCount[nextPlayer]--;
    #####:  938:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:	state->deckCount[nextPlayer]--;
        -:  941:      }    
        -:  942:		       
    #####:  943:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  944:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  945:	state->playedCardCount++;
    #####:  946:	tributeRevealedCards[1] = -1;
    #####:  947:      }
        -:  948:
    #####:  949:      for (i = 0; i <= 2; i ++){
    #####:  950:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  951:	  state->coins += 2;
    #####:  952:	}
        -:  953:		    
    #####:  954:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
        -:  958:	else{//Action Card
    #####:  959:	  state->numActions = state->numActions + 2;
        -:  960:	}
    #####:  961:      }
        -:  962:	    
    #####:  963:      return 0;
        -:  964:		
        -:  965:    case ambassador:
    #####:  966:      j = 0;		//used to check if player has enough cards to discard
        -:  967:
    #####:  968:      if (choice2 > 2 || choice2 < 0)
        -:  969:	{
    #####:  970:	  return -1;				
        -:  971:	}
        -:  972:
    #####:  973:      if (choice1 == handPos)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  979:	{
    #####:  980:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  981:	    {
    #####:  982:	      j++;
    #####:  983:	    }
    #####:  984:	}
    #####:  985:      if (j < choice2)
        -:  986:	{
    #####:  987:	  return -1;				
        -:  988:	}
        -:  989:
        -:  990:      if (DEBUG) 
        -:  991:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  992:
        -:  993:      //increase supply count for choosen card by amount being discarded
    #####:  994:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  995:			
        -:  996:      //each other player gains a copy of revealed card
    #####:  997:      for (i = 0; i < state->numPlayers; i++)
        -:  998:	{
    #####:  999:	  if (i != currentPlayer)
        -: 1000:	    {
    #####: 1001:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1002:	    }
    #####: 1003:	}
        -: 1004:
        -: 1005:      //discard played card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1007:
        -: 1008:      //trash copies of cards returned to supply
    #####: 1009:      for (j = 0; j < choice2; j++)
        -: 1010:	{
    #####: 1011:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1012:	    {
    #####: 1013:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1014:		{
    #####: 1015:		  discardCard(i, currentPlayer, state, 1);
    #####: 1016:		  break;
        -: 1017:		}
    #####: 1018:	    }
    #####: 1019:	}			
        -: 1020:
    #####: 1021:      return 0;
        -: 1022:		
        -: 1023:    case cutpurse:
        -: 1024:
    #####: 1025:      updateCoins(currentPlayer, state, 2);
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
        -: 1029:	    {
    #####: 1030:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1031:		{
    #####: 1032:		  if (state->hand[i][j] == copper)
        -: 1033:		    {
    #####: 1034:		      discardCard(j, i, state, 0);
    #####: 1035:		      break;
        -: 1036:		    }
    #####: 1037:		  if (j == state->handCount[i])
        -: 1038:		    {
    #####: 1039:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1040:			{
        -: 1041:			  if (DEBUG)
        -: 1042:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1043:			}	
    #####: 1044:		      break;
        -: 1045:		    }		
    #####: 1046:		}
        -: 1047:					
    #####: 1048:	    }
        -: 1049:				
    #####: 1050:	}				
        -: 1051:
        -: 1052:      //discard played card from hand
    #####: 1053:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:
        -: 1057:		
        -: 1058:    case embargo: 
        -: 1059:      //+2 Coins
    #####: 1060:      state->coins = state->coins + 2;
        -: 1061:			
        -: 1062:      //see if selected pile is in play
    #####: 1063:      if ( state->supplyCount[choice1] == -1 )
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:			
        -: 1068:      //add embargo token to selected supply pile
    #####: 1069:      state->embargoTokens[choice1]++;
        -: 1070:			
        -: 1071:      //trash card
    #####: 1072:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case outpost:
        -: 1076:      //set outpost flag
    #####: 1077:      state->outpostPlayed++;
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case salvager:
        -: 1084:      //+1 buy
    #####: 1085:      state->numBuys++;
        -: 1086:			
    #####: 1087:      if (choice1)
        -: 1088:	{
        -: 1089:	  //gain coins equal to trashed card
    #####: 1090:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1091:	  //trash card
    #####: 1092:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1093:	}
        -: 1094:			
        -: 1095:      //discard card
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1097:      return 0;
        -: 1098:		
        -: 1099:    case sea_hag:
    #####: 1100:      for (i = 0; i < state->numPlayers; i++){
    #####: 1101:	if (i != currentPlayer){
    #####: 1102:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1103:	  state->discardCount[i]++;
    #####: 1104:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1105:	}
    #####: 1106:      }
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case treasure_map:
        -: 1110:      //search hand for another treasure_map
    #####: 1111:      index = -1;
    #####: 1112:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1113:	{
    #####: 1114:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1115:	    {
    #####: 1116:	      index = i;
    #####: 1117:	      break;
        -: 1118:	    }
    #####: 1119:	}
    #####: 1120:      if (index > -1)
        -: 1121:	{
        -: 1122:	  //trash both treasure cards
    #####: 1123:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1124:	  discardCard(index, currentPlayer, state, 1);
        -: 1125:
        -: 1126:	  //gain 4 Gold cards
    #####: 1127:	  for (i = 0; i < 4; i++)
        -: 1128:	    {
    #####: 1129:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1130:	    }
        -: 1131:				
        -: 1132:	  //return success
    #####: 1133:	  return 1;
        -: 1134:	}
        -: 1135:			
        -: 1136:      //no second treasure_map found in hand
    #####: 1137:      return -1;
        -: 1138:    }
        -: 1139:	
    #####: 1140:  return -1;
     5001: 1141:}
        -: 1142:
        -: 1143:int gardenEffect() {
    #####: 1144:printf("Your father was a hamster and your mother smelt of elderberries.");
    #####: 1145:return -1;
        -: 1146:}
        -: 1147:
        -: 1148:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1149:  int i;
        -: 1150:
     1001: 1151:  int tributeRevealedCards[2] = {-1, -1};
        -: 1152:  int temphand[MAX_HAND];// moved above the if statement
        -: 1153:
     1001: 1154:  int z = 0;// this is the counter for the temp hand
     4004: 1155:for (i = 0; i < 1; i++)
        -: 1156:	{
     1001: 1157:	  drawCard(currentPlayer, state);
     1001: 1158:	}
        -: 1159:			
        -: 1160:      //discard card from hand
     1001: 1161:      discardCard(handPos, currentPlayer, state, 0);
     1001: 1162:      return 0;
        -: 1163:}
        -: 1164:
        -: 1165:int council_room_effect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1166:      int i;
        -: 1167:      //+4 Cards
    #####: 1168:      for (i = 0; i < 4; i++)
        -: 1169:	{
    #####: 1170:	  drawCard(currentPlayer, state);
    #####: 1171:	}
        -: 1172:			
        -: 1173:      //+1 Buy
    #####: 1174:      state->numBuys++;
        -: 1175:			
        -: 1176:      //Each other player draws a card
    #####: 1177:      for (i = 0; i < state->numPlayers; i++)
        -: 1178:	{
    #####: 1179:	  if ( i != currentPlayer )
        -: 1180:	    {
    #####: 1181:	      drawCard(i, state);
    #####: 1182:	    }
    #####: 1183:	}
        -: 1184:			
        -: 1185:      //put played card in played card pile
        -: 1186:      //discardCard(handPos, currentPlayer, state, 0);
        -: 1187:			
    #####: 1188:      return 0;
        -: 1189:}
        -: 1190:
        -: 1191:int feastEffect(struct gameState *state, int currentPlayer, int choice1) {
        -: 1192:	int i;
        -: 1193:	int x;
        -: 1194:	int temphand[MAX_HAND];
        -: 1195:	
        -: 1196:	      //gain card with cost up to 5
        -: 1197:      //Backup hand
    #####: 1198:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1199:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1200:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1201:      }
        -: 1202:      //Backup hand
        -: 1203:
        -: 1204:      //Update Coins for Buy
    #####: 1205:      updateCoins(currentPlayer, state, 5);
    #####: 1206:      x = 1;//Condition to loop on
    #####: 1207:      while( x == 1) {//Buy one card
    #####: 1208:	if (supplyCount(choice1, state) <= 0){
        -: 1209:	  if (DEBUG)
        -: 1210:	    printf("None of that card left, sorry!\n");
        -: 1211:
        -: 1212:	  if (DEBUG){
        -: 1213:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1214:	  }
    #####: 1215:        return -1;
        -: 1216:	}
    #####: 1217:	else if (state->coins < getCost(choice1)){
    #####: 1218:	  printf("That card is too expensive!\n");
    #####: 1219:        return -1;
        -: 1220:
        -: 1221:	  if (DEBUG){
        -: 1222:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1223:	  }
        -: 1224:	}
        -: 1225:	else{
        -: 1226:
        -: 1227:	  if (DEBUG){
        -: 1228:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1229:	  }
        -: 1230:
    #####: 1231:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1232:	  x = 0;//No more buying cards
        -: 1233:
        -: 1234:	  if (DEBUG){
        -: 1235:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1236:	  }
        -: 1237:
        -: 1238:	}
        -: 1239:      }     
        -: 1240:
        -: 1241:      //Reset Hand
    #####: 1242:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1243:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1244:	temphand[i] = -1;
    #####: 1245:      }
        -: 1246:      //Reset Hand
        -: 1247:      			
    #####: 1248:      return 0;
        -: 1249:	
    #####: 1250:}
        -: 1251:
        -: 1252:int adventurerEffect(struct gameState *state, int currentPlayer) {
        -: 1253:	int temphand[MAX_HAND];// moved above the if statement
     4000: 1254:	int drawntreasure=0;
        -: 1255:	int cardDrawn;
     4000: 1256:	int z = 0;// this is the counter for the temp hand
        -: 1257:    
    32000: 1258:      while(drawntreasure<2){
    12000: 1259:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1260:	  shuffle(currentPlayer, state);
    #####: 1261:	}
    12000: 1262:	drawCard(currentPlayer, state);
    12000: 1263:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    20000: 1264:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     8000: 1265:	  drawntreasure++;
        -: 1266:	else{
     4000: 1267:	  temphand[z]=cardDrawn;
     4000: 1268:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4000: 1269:	  z++;
        -: 1270:	}
        -: 1271:      }
    16000: 1272:      while(z-1>=0){
     4000: 1273:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4000: 1274:	z=z-1;
        -: 1275:      }
     4000: 1276:      return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
     1001: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
     1001: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1001: 1287:      state->playedCardCount++;
     1001: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
     1001: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
     1001: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
     1001: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
     1001: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
     1001: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
     1001: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
     1001: 1314:  return 0;
        -: 1315:}
        -: 1316:
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
    #####: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
    #####: 1341:    }
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
    #####: 1352:}
        -: 1353:
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
        2: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
       24: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
       10: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
        7: 1366:	  state->coins += 1;
        7: 1367:	}
        3: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
    #####: 1371:	}
        3: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
    #####: 1375:	}	
       10: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
        2: 1379:  state->coins += bonus;
        -: 1380:
        2: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c

->->->    - TESTING CARD: council_room -    <-<-<-


----  - TEST 1: Function Return  -  ----

Return Value: 0, Expected: 0 


----  - TEST 2: Hand Count  -  ----

Hand Count: 9, Expected: 8 


----  - TEST 3: Number of Buys  -  ----

Buy Count: 2, Expected: 2 


----  - TEST 4: Other Player Draw -  ----

->->  - TEST FAILED -  <-<-
File 'cardtest3.c'
Lines executed:86.76% of 68
cardtest3.c:creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:25.42% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Robert Clifton on 4/18/17.
        -:    3://cardtest3  unit test for the council_rooom card function.
        -:    4://
        -:    5://to make and test: make unittestresults.out
        -:    6://
        -:    7://gcc dominion.c rngs.c cardtest3.c -o cardtest3
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:int main() {
        -:   18:
        1:   19:    int pass = 1;
        1:   20:    char testCard[] = "council_room";
        -:   21:    struct gameState G, copyG;
        1:   22:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   23:                 sea_hag, tribute, smithy};
        -:   24:    int j, i, retVal;
        1:   25:    int x = 1000;
        1:   26:    int numbPlayers = 2;
        1:   27:    int randSeed = 10000000;
        1:   28:    int handPos = 0;
        1:   29:    int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   30:    int bonus = 0;
        -:   31:
        -:   32:
        -:   33:    //initialize game state
        1:   34:    initializeGame(numbPlayers, k, randSeed, &G);
        -:   35:
        -:   36:
        1:   37:    printf("\n->->->    - TESTING CARD: %s -    <-<-<-\n\n", testCard);
        -:   38:
        -:   39:    //basic test of return value
        1:   40:    printf("\n----  - TEST 1: Function Return  -  ----\n\n");
     2002:   41:    for (i = 0; i < x; i++) {
     1000:   42:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   43:        retVal = cardEffect(council_room, choice1, choice2, choice3, &copyG, handPos, &bonus);
     1000:   44:        if (retVal != 0) {
    #####:   45:            pass = 0;
    #####:   46:            break;
        -:   47:        };
     1000:   48:    };
        1:   49:    printf("Return Value: %d, Expected: %d \n\n", retVal, 0);
        -:   50:
        -:   51:    //test and compare hand count in copied struct
        1:   52:    printf("\n----  - TEST 2: Hand Count  -  ----\n\n");
        -:   53:
        1:   54:    int addedCards = 4;
        1:   55:    int discard = 1;
        1:   56:    int currentPlayer = whoseTurn(&G);
        -:   57:
        2:   58:    for (i = 0; i < x; i++) {
        1:   59:        memcpy(&copyG, &G, sizeof(struct gameState));
        1:   60:        cardEffect(council_room, choice1, choice2, choice3, &copyG, handPos, &bonus);
        -:   61:
        1:   62:        if (copyG.handCount[currentPlayer] != G.handCount[currentPlayer] + addedCards - discard) {
        1:   63:            pass = 0;
        1:   64:            break;
        -:   65:        };
    #####:   66:    };
        1:   67:    printf("Hand Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer], G.handCount[currentPlayer]+addedCards-discard);
        -:   68:
        -:   69:    //test number of buys adjusted by card function
        1:   70:    printf("\n----  - TEST 3: Number of Buys  -  ----\n\n");
        -:   71:
        1:   72:    int addedBuys = 1;
        1:   73:    currentPlayer = whoseTurn(&G);
        -:   74:
     2002:   75:    for (i = 0; i < x; i++) {
     1000:   76:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   77:        cardEffect(council_room, choice1, choice2, choice3, &copyG, handPos, &bonus);
     1000:   78:        if (copyG.numBuys != G.numBuys + addedBuys) {
    #####:   79:            pass = 0;
    #####:   80:            break;
        -:   81:        };
     1000:   82:    };
        -:   83:
        1:   84:    printf("Buy Count: %d, Expected: %d \n\n", copyG.numBuys, G.numBuys+addedBuys);
        -:   85:
        -:   86:    //test that other player gets to draw
        1:   87:    printf("\n----  - TEST 4: Other Player Draw -  ----\n\n");
        -:   88:
        -:   89:    int playerHand[4];
        -:   90:    int copyPlayerHand[4];
        1:   91:    addedCards = 1;
        1:   92:    currentPlayer = whoseTurn(&G);
        -:   93:
     2002:   94:    for (i = 0; i < x; i++) {
     1000:   95:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   96:        cardEffect(council_room, choice1, choice2, choice3, &copyG, handPos, &bonus);
        -:   97:
     6000:   98:        for (j = 0; j < G.numPlayers; j++) {
     2000:   99:            if (j != currentPlayer) {
     1000:  100:                copyPlayerHand[j] = copyG.handCount[j];
     1000:  101:                playerHand[j] = G.handCount[j];
     1000:  102:            }
     2000:  103:        }
        -:  104:
        -:  105:
     6000:  106:        for (j = 0; j < G.numPlayers; j++) {
     2000:  107:            if (j != currentPlayer) {
     1000:  108:                if (copyPlayerHand[j] != playerHand[j] + addedCards) {
    #####:  109:                    pass = 0;
    #####:  110:                    break;
        -:  111:                }
     1000:  112:            }
     2000:  113:        }
     1000:  114:    };
        -:  115:
        -:  116:    //Final bool check to see if testing passed or failed,  prints result to standard out
        1:  117:    if (pass) {
    #####:  118:        printf("->->  - TEST SUCCESSFULLY COMPLETED -  <-<-\n");
    #####:  119:    } else{
        1:  120:        printf("->->  - TEST FAILED -  <-<-\n");
        -:  121:    }
        -:  122:
        1:  123:    return 0;
        -:  124:};
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://test message
        -:    9:
        -:   10:int smithyEffect(struct gameState *state, int currentPlayer, int handPos);
        -:   11:
        -:   12:int council_room_effect(struct gameState *state, int currentPlayer, int handPos);
        -:   13:
        -:   14:int adventurerEffect(struct gameState *state, int currentPlayer);
        -:   15:
        -:   16:int feastEffect(struct gameState *state, int currentPlayer, int choice1);
        -:   17:
        -:   18:int gardenEffect();
        -:   19:
        -:   20:
        -:   21:int compare(const void* a, const void* b) {
       84:   22:  if (*(int*)a > *(int*)b)
    #####:   23:    return 1;
       84:   24:  if (*(int*)a < *(int*)b)
       30:   25:    return -1;
       54:   26:  return 0;
       84:   27:}
        -:   28:
        -:   29:struct gameState* newGame() {
    #####:   30:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   31:  return g;
        -:   32:}
        -:   33:
        -:   34:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   35:		  int k8, int k9, int k10) {
    #####:   36:  int* k = malloc(10 * sizeof(int));
    #####:   37:  k[0] = k1;
    #####:   38:  k[1] = k2;
    #####:   39:  k[2] = k3;
    #####:   40:  k[3] = k4;
    #####:   41:  k[4] = k5;
    #####:   42:  k[5] = k6;
    #####:   43:  k[6] = k7;
    #####:   44:  k[7] = k8;
    #####:   45:  k[8] = k9;
    #####:   46:  k[9] = k10;
    #####:   47:  return k;
        -:   48:}
        -:   49:
        -:   50:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   51:		   struct gameState *state) {
        -:   52:
        -:   53:  int i;
        -:   54:  int j;
        -:   55:  int it;			
        -:   56:  //set up random number generator
        3:   57:  SelectStream(1);
        3:   58:  PutSeed((long)randomSeed);
        -:   59:  
        -:   60:  //check number of players
        6:   61:  if (numPlayers > MAX_PLAYERS || numPlayers < 0)
        -:   62:    {
    #####:   63:      return -1;
        -:   64:    }
        -:   65:
        -:   66:  //set number of players
        3:   67:  state->numPlayers = numPlayers;
        -:   68:
        -:   69:  //check selected kingdom cards are different
       66:   70:  for (i = 0; i < 10; i++)
        -:   71:    {
      660:   72:      for (j = 0; j < 10; j++)
        -:   73:        {
      570:   74:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   75:	    {
    #####:   76:	      return -1;
        -:   77:	    }
      300:   78:        }
       30:   79:    }
        -:   80:
        -:   81:
        -:   82:  //initialize supply
        -:   83:  ///////////////////////////////
        -:   84:
        -:   85:  //set number of Curse cards
        3:   86:  if (numPlayers == 2)
        -:   87:    {
        3:   88:      state->supplyCount[curse] = 10;
        3:   89:    }
    #####:   90:  else if (numPlayers == 3)
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 20;
    #####:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[curse] = 30;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Victory cards
        3:  100:  if (numPlayers == 2)
        -:  101:    {
        3:  102:      state->supplyCount[estate] = 8;
        3:  103:      state->supplyCount[duchy] = 8;
        3:  104:      state->supplyCount[province] = 8;
        3:  105:    }
        -:  106:  else
        -:  107:    {
    #####:  108:      state->supplyCount[estate] = 12;
    #####:  109:      state->supplyCount[duchy] = 12;
    #####:  110:      state->supplyCount[province] = 12;
        -:  111:    }
        -:  112:
        -:  113:  //set number of Treasure cards
        3:  114:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  115:  state->supplyCount[silver] = 40;
        3:  116:  state->supplyCount[gold] = 30;
        -:  117:
        -:  118:  //set number of Kingdom cards
      126:  119:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  120:    {
      990:  121:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  122:	{
      465:  123:	  if (kingdomCards[j] == i)
        -:  124:	    {
        -:  125:	      //check if card is a 'Victory' Kingdom card
       60:  126:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  127:		{
        3:  128:		  if (numPlayers == 2){ 
        3:  129:		    state->supplyCount[i] = 8; 
        3:  130:		  }
    #####:  131:		  else{ state->supplyCount[i] = 12; }
        3:  132:		}
        -:  133:	      else
        -:  134:		{
       27:  135:		  state->supplyCount[i] = 10;
        -:  136:		}
       30:  137:	      break;
        -:  138:	    }
        -:  139:	  else    //card is not in the set choosen for the game
        -:  140:	    {
      435:  141:	      state->supplyCount[i] = -1;
        -:  142:	    }
      435:  143:	}
        -:  144:
       60:  145:    }
        -:  146:
        -:  147:  ////////////////////////
        -:  148:  //supply intilization complete
        -:  149:
        -:  150:  //set player decks
       18:  151:  for (i = 0; i < numPlayers; i++)
        -:  152:    {
        6:  153:      state->deckCount[i] = 0;
       48:  154:      for (j = 0; j < 3; j++)
        -:  155:	{
       18:  156:	  state->deck[i][j] = estate;
       18:  157:	  state->deckCount[i]++;
       18:  158:	}
       96:  159:      for (j = 3; j < 10; j++)
        -:  160:	{
       42:  161:	  state->deck[i][j] = copper;
       42:  162:	  state->deckCount[i]++;		
       42:  163:	}
        6:  164:    }
        -:  165:
        -:  166:  //shuffle player decks
       18:  167:  for (i = 0; i < numPlayers; i++)
        -:  168:    {
        6:  169:      if ( shuffle(i, state) < 0 )
        -:  170:	{
    #####:  171:	  return -1;
        -:  172:	}
        6:  173:    }
        -:  174:
        -:  175:  //draw player hands
       18:  176:  for (i = 0; i < numPlayers; i++)
        -:  177:    {  
        -:  178:      //initialize hand size to zero
        6:  179:      state->handCount[i] = 0;
        6:  180:      state->discardCount[i] = 0;
        -:  181:      //draw 5 cards
        -:  182:      // for (j = 0; j < 5; j++)
        -:  183:      //	{
        -:  184:      //	  drawCard(i, state);
        -:  185:      //	}
        6:  186:    }
        -:  187:  
        -:  188:  //set embargo tokens to 0 for all supply piles
      168:  189:  for (i = 0; i <= treasure_map; i++)
        -:  190:    {
       81:  191:      state->embargoTokens[i] = 0;
       81:  192:    }
        -:  193:
        -:  194:  //initialize first player's turn
        3:  195:  state->outpostPlayed = 0;
        3:  196:  state->phase = 0;
        3:  197:  state->numActions = 1;
        3:  198:  state->numBuys = 1;
        3:  199:  state->playedCardCount = 0;
        3:  200:  state->whoseTurn = 0;
        3:  201:  state->handCount[state->whoseTurn] = 0;
        -:  202:  //int it; move to top
        -:  203:
        -:  204:  //Moved draw cards to here, only drawing at the start of a turn
       36:  205:  for (it = 0; it < 5; it++){
       15:  206:    drawCard(state->whoseTurn, state);
       15:  207:  }
        -:  208:
        3:  209:  updateCoins(state->whoseTurn, state, 0);
        -:  210:
        3:  211:  return 0;
        3:  212:}
        -:  213:
        -:  214:int shuffle(int player, struct gameState *state) {
        -:  215: 
        -:  216:
        -:  217:  int newDeck[MAX_DECK];
        6:  218:  int newDeckPos = 0;
        -:  219:  int card;
        -:  220:  int i;
        -:  221:
        6:  222:  if (state->deckCount[player] < 1)
    #####:  223:    return -1;
        6:  224:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  225:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  226:
      132:  227:  while (state->deckCount[player] > 0) {
       60:  228:    card = floor(Random() * state->deckCount[player]);
       60:  229:    newDeck[newDeckPos] = state->deck[player][card];
       60:  230:    newDeckPos++;
      388:  231:    for (i = card; i < state->deckCount[player]-1; i++) {
      134:  232:      state->deck[player][i] = state->deck[player][i+1];
      134:  233:    }
       60:  234:    state->deckCount[player]--;
        -:  235:  }
      132:  236:  for (i = 0; i < newDeckPos; i++) {
       60:  237:    state->deck[player][i] = newDeck[i];
       60:  238:    state->deckCount[player]++;
       60:  239:  }
        -:  240:
        6:  241:  return 0;
        6:  242:}
        -:  243:
        -:  244:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  245:{	
        -:  246:  int card;
    #####:  247:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  248:
        -:  249:  //check if it is the right phase
    #####:  250:  if (state->phase != 0)
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //check if player has enough actions
    #####:  256:  if ( state->numActions < 1 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //get card played
    #####:  262:  card = handCard(handPos, state);
        -:  263:	
        -:  264:  //check if selected card is an action
    #####:  265:  if ( card < adventurer || card > treasure_map )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //play card
    #####:  271:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  272:    {
    #####:  273:      return -1;
        -:  274:    }
        -:  275:	
        -:  276:  //reduce number of actions
    #####:  277:  state->numActions--;
        -:  278:
        -:  279:  //update coins (Treasure cards may be added with card draws)
    #####:  280:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  281:	
    #####:  282:  return 0;
    #####:  283:}
        -:  284:
        -:  285:int buyCard(int supplyPos, struct gameState *state) {
        -:  286:  int who;
        -:  287:  if (DEBUG){
        -:  288:    printf("Entering buyCard...\n");
        -:  289:  }
        -:  290:
        -:  291:  // I don't know what to do about the phase thing.
        -:  292:
    #####:  293:  who = state->whoseTurn;
        -:  294:
    #####:  295:  if (state->numBuys < 1){
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (supplyCount(supplyPos, state) <1){
        -:  300:    if (DEBUG)
        -:  301:      printf("There are not any of that type of card left\n");
    #####:  302:    return -1;
    #####:  303:  } else if (state->coins < getCost(supplyPos)){
        -:  304:    if (DEBUG)
        -:  305:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  306:    return -1;
        -:  307:  } else {
    #####:  308:    state->phase=1;
        -:  309:    //state->supplyCount[supplyPos]--;
    #####:  310:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  311:
    #####:  312:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  313:    state->numBuys--;
        -:  314:    if (DEBUG)
        -:  315:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  316:  }
        -:  317:
        -:  318:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  319:  //state->discardCount[who]++;
        -:  320:
    #####:  321:  return 0;
    #####:  322:}
        -:  323:
        -:  324:int numHandCards(struct gameState *state) {
    14000:  325:  return state->handCount[ whoseTurn(state) ];
        -:  326:}
        -:  327:
        -:  328:int handCard(int handPos, struct gameState *state) {
    20000:  329:  int currentPlayer = whoseTurn(state);
    20000:  330:  return state->hand[currentPlayer][handPos];
        -:  331:}
        -:  332:
        -:  333:int supplyCount(int card, struct gameState *state) {
    #####:  334:  return state->supplyCount[card];
        -:  335:}
        -:  336:
        -:  337:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  338:  int i;
    #####:  339:  int count = 0;
        -:  340:
    #####:  341:  for (i = 0; i < state->deckCount[player]; i++)
        -:  342:    {
    #####:  343:      if (state->deck[player][i] == card) count++;
    #####:  344:    }
        -:  345:
    #####:  346:  for (i = 0; i < state->handCount[player]; i++)
        -:  347:    {
    #####:  348:      if (state->hand[player][i] == card) count++;
    #####:  349:    }
        -:  350:
    #####:  351:  for (i = 0; i < state->discardCount[player]; i++)
        -:  352:    {
    #####:  353:      if (state->discard[player][i] == card) count++;
    #####:  354:    }
        -:  355:
    #####:  356:  return count;
        -:  357:}
        -:  358:
        -:  359:int whoseTurn(struct gameState *state) {
    42008:  360:  return state->whoseTurn;
        -:  361:}
        -:  362:
        -:  363:int endTurn(struct gameState *state) {
        -:  364:  int k;
        -:  365:  int i;
    #####:  366:  int currentPlayer = whoseTurn(state);
        -:  367:  
        -:  368:  //Discard hand
    #####:  369:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  370:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  371:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  372:  }
    #####:  373:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  374:    
        -:  375:  //Code for determining the player
    #####:  376:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  377:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  378:  }
        -:  379:  else{
    #####:  380:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  381:  }
        -:  382:
    #####:  383:  state->outpostPlayed = 0;
    #####:  384:  state->phase = 0;
    #####:  385:  state->numActions = 1;
    #####:  386:  state->coins = 0;
    #####:  387:  state->numBuys = 1;
    #####:  388:  state->playedCardCount = 0;
    #####:  389:  state->handCount[state->whoseTurn] = 0;
        -:  390:
        -:  391:  //int k; move to top
        -:  392:  //Next player draws hand
    #####:  393:  for (k = 0; k < 5; k++){
    #####:  394:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  395:  }
        -:  396:
        -:  397:  //Update money
    #####:  398:  updateCoins(state->whoseTurn, state , 0);
        -:  399:
    #####:  400:  return 0;
        -:  401:}
        -:  402:
        -:  403:int isGameOver(struct gameState *state) {
        -:  404:  int i;
        -:  405:  int j;
        -:  406:	
        -:  407:  //if stack of Province cards is empty, the game ends
    #####:  408:  if (state->supplyCount[province] == 0)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
        -:  413:  //if three supply pile are at 0, the game ends
    #####:  414:  j = 0;
    #####:  415:  for (i = 0; i < 25; i++)
        -:  416:    {
    #####:  417:      if (state->supplyCount[i] == 0)
        -:  418:	{
    #####:  419:	  j++;
    #####:  420:	}
    #####:  421:    }
    #####:  422:  if ( j >= 3)
        -:  423:    {
    #####:  424:      return 1;
        -:  425:    }
        -:  426:
    #####:  427:  return 0;
    #####:  428:}
        -:  429:
        -:  430:int scoreFor (int player, struct gameState *state) {
        -:  431:
        -:  432:  int i;
    #####:  433:  int score = 0;
        -:  434:  //score from hand
    #####:  435:  for (i = 0; i < state->handCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  443:    }
        -:  444:
        -:  445:  //score from discard
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  454:    }
        -:  455:
        -:  456:  //score from deck
    #####:  457:  for (i = 0; i < state->discardCount[player]; i++)
        -:  458:    {
    #####:  459:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  460:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  461:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  462:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  463:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  465:    }
        -:  466:
    #####:  467:  return score;
        -:  468:}
        -:  469:
        -:  470:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  471:  int i;	
        -:  472:  int j;
        -:  473:  int highScore;
        -:  474:  int currentPlayer;
        -:  475:
        -:  476:  //get score for each player
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:    {
        -:  479:      //set unused player scores to -9999
    #####:  480:      if (i >= state->numPlayers)
        -:  481:	{
    #####:  482:	  players[i] = -9999;
    #####:  483:	}
        -:  484:      else
        -:  485:	{
    #####:  486:	  players[i] = scoreFor (i, state);
        -:  487:	}
    #####:  488:    }
        -:  489:
        -:  490:  //find highest score
    #####:  491:  j = 0;
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if (players[i] > players[j])
        -:  495:	{
    #####:  496:	  j = i;
    #####:  497:	}
    #####:  498:    }
    #####:  499:  highScore = players[j];
        -:  500:
        -:  501:  //add 1 to players who had less turns
    #####:  502:  currentPlayer = whoseTurn(state);
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if ( players[i] == highScore && i > currentPlayer )
        -:  506:	{
    #####:  507:	  players[i]++;
    #####:  508:	}
    #####:  509:    }
        -:  510:
        -:  511:  //find new highest score
    #####:  512:  j = 0;
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:      if ( players[i] > players[j] )
        -:  516:	{
    #####:  517:	  j = i;
    #####:  518:	}
    #####:  519:    }
    #####:  520:  highScore = players[j];
        -:  521:
        -:  522:  //set winners in array to 1 and rest to 0
    #####:  523:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  524:    {
    #####:  525:      if ( players[i] == highScore )
        -:  526:	{
    #####:  527:	  players[i] = 1;
    #####:  528:	}
        -:  529:      else
        -:  530:	{
    #####:  531:	  players[i] = 0;
        -:  532:	}
    #####:  533:    }
        -:  534:
    #####:  535:  return 0;
        -:  536:}
        -:  537:
        -:  538:int drawCard(int player, struct gameState *state)
        -:  539:{	int count;
        -:  540:  int deckCounter;
    28021:  541:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  542:    
        -:  543:    //Step 1 Shuffle the discard pile back into a deck
        -:  544:    int i;
        -:  545:    //Move discard to deck
    #####:  546:    for (i = 0; i < state->discardCount[player];i++){
    #####:  547:      state->deck[player][i] = state->discard[player][i];
    #####:  548:      state->discard[player][i] = -1;
    #####:  549:    }
        -:  550:
    #####:  551:    state->deckCount[player] = state->discardCount[player];
    #####:  552:    state->discardCount[player] = 0;//Reset discard
        -:  553:
        -:  554:    //Shufffle the deck
    #####:  555:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  556:   
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  559:    }
        -:  560:    
    #####:  561:    state->discardCount[player] = 0;
        -:  562:
        -:  563:    //Step 2 Draw Card
    #####:  564:    count = state->handCount[player];//Get current player's hand count
        -:  565:    
        -:  566:    if (DEBUG){//Debug statements
        -:  567:      printf("Current hand count: %d\n", count);
        -:  568:    }
        -:  569:    
    #####:  570:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  571:
    #####:  572:    if (deckCounter == 0)
    #####:  573:      return -1;
        -:  574:
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
    #####:  578:  }
        -:  579:
        -:  580:  else{
    28021:  581:    int count = state->handCount[player];//Get current hand count for player
        -:  582:    int deckCounter;
        -:  583:    if (DEBUG){//Debug statements
        -:  584:      printf("Current hand count: %d\n", count);
        -:  585:    }
        -:  586:
    28021:  587:    deckCounter = state->deckCount[player];//Create holder for the deck count
    28021:  588:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    28021:  589:    state->deckCount[player]--;
    28021:  590:    state->handCount[player]++;//Increment hand count
        -:  591:  }
        -:  592:
    28021:  593:  return 0;
    28021:  594:}
        -:  595:
        -:  596:int getCost(int cardNumber)
        -:  597:{
    #####:  598:  switch( cardNumber ) 
        -:  599:    {
        -:  600:    case curse:
    #####:  601:      return 0;
        -:  602:    case estate:
    #####:  603:      return 2;
        -:  604:    case duchy:
    #####:  605:      return 5;
        -:  606:    case province:
    #####:  607:      return 8;
        -:  608:    case copper:
    #####:  609:      return 0;
        -:  610:    case silver:
    #####:  611:      return 3;
        -:  612:    case gold:
    #####:  613:      return 6;
        -:  614:    case adventurer:
    #####:  615:      return 6;
        -:  616:    case council_room:
    #####:  617:      return 5;
        -:  618:    case feast:
    #####:  619:      return 4;
        -:  620:    case gardens:
    #####:  621:      return 4;
        -:  622:    case mine:
    #####:  623:      return 5;
        -:  624:    case remodel:
    #####:  625:      return 4;
        -:  626:    case smithy:
    #####:  627:      return 4;
        -:  628:    case village:
    #####:  629:      return 3;
        -:  630:    case baron:
    #####:  631:      return 4;
        -:  632:    case great_hall:
    #####:  633:      return 3;
        -:  634:    case minion:
    #####:  635:      return 5;
        -:  636:    case steward:
    #####:  637:      return 3;
        -:  638:    case tribute:
    #####:  639:      return 5;
        -:  640:    case ambassador:
    #####:  641:      return 3;
        -:  642:    case cutpurse:
    #####:  643:      return 4;
        -:  644:    case embargo: 
    #####:  645:      return 2;
        -:  646:    case outpost:
    #####:  647:      return 5;
        -:  648:    case salvager:
    #####:  649:      return 4;
        -:  650:    case sea_hag:
    #####:  651:      return 4;
        -:  652:    case treasure_map:
    #####:  653:      return 4;
        -:  654:    }
        -:  655:	
    #####:  656:  return -1;
    #####:  657:}
        -:  658:
        -:  659:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  660:{
        -:  661:  int i;
        -:  662:  int j;
        -:  663:  int k;
        -:  664:  int x;
        -:  665:  int index;
     8002:  666:  int currentPlayer = whoseTurn(state);
     8002:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
     8002:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
     8002:  671:  int drawntreasure=0;
        -:  672:  int cardDrawn;
     8002:  673:  int z = 0;// this is the counter for the temp hand
     8002:  674:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  675:    nextPlayer = 0;
    #####:  676:  }
        -:  677:  //uses switch to select card and perform actions
     8002:  678:  switch( card ) 
        -:  679:    {
        -:  680:		  
        -:  681:   case adventurer:
     4000:  682:	return adventurerEffect(state, currentPlayer);
        -:  683:			
        -:  684:    case council_room:
     3001:  685:		return council_room_effect(state, currentPlayer, handPos);
        -:  686:			
        -:  687:    case feast:
    #####:  688:		return feastEffect(state, currentPlayer, choice1);
        -:  689:			
        -:  690:    case gardens:
    #####:  691:      return gardenEffect();
        -:  692:			
        -:  693:    case mine:
    #####:  694:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  695:
    #####:  696:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  697:	{
    #####:  698:	  return -1;
        -:  699:	}
        -:  700:		
    #####:  701:      if (choice2 > treasure_map || choice2 < curse)
        -:  702:	{
    #####:  703:	  return -1;
        -:  704:	}
        -:  705:
    #####:  706:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  707:	{
    #####:  708:	  return -1;
        -:  709:	}
        -:  710:
    #####:  711:      gainCard(choice2, state, 2, currentPlayer);
        -:  712:
        -:  713:      //discard card from hand
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:
        -:  716:      //discard trashed card
    #####:  717:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  718:	{
    #####:  719:	  if (state->hand[currentPlayer][i] == j)
        -:  720:	    {
    #####:  721:	      discardCard(i, currentPlayer, state, 0);			
    #####:  722:	      break;
        -:  723:	    }
    #####:  724:	}
        -:  725:			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case remodel:
    #####:  729:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  730:
    #####:  731:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  732:	{
    #####:  733:	  return -1;
        -:  734:	}
        -:  735:
    #####:  736:      gainCard(choice2, state, 0, currentPlayer);
        -:  737:
        -:  738:      //discard card from hand
    #####:  739:      discardCard(handPos, currentPlayer, state, 0);
        -:  740:
        -:  741:      //discard trashed card
    #####:  742:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  743:	{
    #####:  744:	  if (state->hand[currentPlayer][i] == j)
        -:  745:	    {
    #####:  746:	      discardCard(i, currentPlayer, state, 0);			
    #####:  747:	      break;
        -:  748:	    }
    #####:  749:	}
        -:  750:
        -:  751:
    #####:  752:      return 0;
        -:  753:		
        -:  754:    case smithy:
        -:  755:      //+3 Cards
     1001:  756:      return smithyEffect(state, currentPlayer, handPos);
        -:  757:      
        -:  758:		
        -:  759:    case village:
        -:  760:      //+1 Card
    #####:  761:      drawCard(currentPlayer, state);
        -:  762:			
        -:  763:      //+2 Actions
    #####:  764:      state->numActions = state->numActions + 2;
        -:  765:			
        -:  766:      //discard played card from hand
    #####:  767:      discardCard(handPos, currentPlayer, state, 0);
    #####:  768:      return 0;
        -:  769:		
        -:  770:    case baron:
    #####:  771:      state->numBuys++;//Increase buys by 1!
    #####:  772:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  773:	int p = 0;//Iterator for hand!
    #####:  774:	int card_not_discarded = 1;//Flag for discard set!
    #####:  775:	while(card_not_discarded){
    #####:  776:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  777:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  778:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  779:	    state->discardCount[currentPlayer]++;
    #####:  780:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  781:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  782:	    }
    #####:  783:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  784:	    state->handCount[currentPlayer]--;
    #####:  785:	    card_not_discarded = 0;//Exit the loop
    #####:  786:	  }
    #####:  787:	  else if (p > state->handCount[currentPlayer]){
        -:  788:	    if(DEBUG) {
        -:  789:	      printf("No estate cards in your hand, invalid choice\n");
        -:  790:	      printf("Must gain an estate if there are any\n");
        -:  791:	    }
    #####:  792:	    if (supplyCount(estate, state) > 0){
    #####:  793:	      gainCard(estate, state, 0, currentPlayer);
    #####:  794:	      state->supplyCount[estate]--;//Decrement estates
    #####:  795:	      if (supplyCount(estate, state) == 0){
    #####:  796:		isGameOver(state);
    #####:  797:	      }
    #####:  798:	    }
    #####:  799:	    card_not_discarded = 0;//Exit the loop
    #####:  800:	  }
        -:  801:			    
        -:  802:	  else{
    #####:  803:	    p++;//Next card
        -:  804:	  }
        -:  805:	}
    #####:  806:      }
        -:  807:			    
        -:  808:      else{
    #####:  809:	if (supplyCount(estate, state) > 0){
    #####:  810:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  811:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  812:	  if (supplyCount(estate, state) == 0){
    #####:  813:	    isGameOver(state);
    #####:  814:	  }
    #####:  815:	}
        -:  816:      }
        -:  817:	    
        -:  818:      
    #####:  819:      return 0;
        -:  820:		
        -:  821:    case great_hall:
        -:  822:      //+1 Card
    #####:  823:      drawCard(currentPlayer, state);
        -:  824:			
        -:  825:      //+1 Actions
    #####:  826:      state->numActions++;
        -:  827:			
        -:  828:      //discard card from hand
    #####:  829:      discardCard(handPos, currentPlayer, state, 0);
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case minion:
        -:  833:      //+1 action
    #####:  834:      state->numActions++;
        -:  835:			
        -:  836:      //discard card from hand
    #####:  837:      discardCard(handPos, currentPlayer, state, 0);
        -:  838:			
    #####:  839:      if (choice1)		//+2 coins
        -:  840:	{
    #####:  841:	  state->coins = state->coins + 2;
    #####:  842:	}
        -:  843:			
    #####:  844:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  845:	{
        -:  846:	  //discard hand
    #####:  847:	  while(numHandCards(state) > 0)
        -:  848:	    {
    #####:  849:	      discardCard(handPos, currentPlayer, state, 0);
        -:  850:	    }
        -:  851:				
        -:  852:	  //draw 4
    #####:  853:	  for (i = 0; i < 4; i++)
        -:  854:	    {
    #####:  855:	      drawCard(currentPlayer, state);
    #####:  856:	    }
        -:  857:				
        -:  858:	  //other players discard hand and redraw if hand size > 4
    #####:  859:	  for (i = 0; i < state->numPlayers; i++)
        -:  860:	    {
    #####:  861:	      if (i != currentPlayer)
        -:  862:		{
    #####:  863:		  if ( state->handCount[i] > 4 )
        -:  864:		    {
        -:  865:		      //discard hand
    #####:  866:		      while( state->handCount[i] > 0 )
        -:  867:			{
    #####:  868:			  discardCard(handPos, i, state, 0);
        -:  869:			}
        -:  870:							
        -:  871:		      //draw 4
    #####:  872:		      for (j = 0; j < 4; j++)
        -:  873:			{
    #####:  874:			  drawCard(i, state);
    #####:  875:			}
    #####:  876:		    }
    #####:  877:		}
    #####:  878:	    }
        -:  879:				
    #####:  880:	}
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case steward:
    #####:  884:      if (choice1 == 1)
        -:  885:	{
        -:  886:	  //+2 cards
    #####:  887:	  drawCard(currentPlayer, state);
    #####:  888:	  drawCard(currentPlayer, state);
    #####:  889:	}
    #####:  890:      else if (choice1 == 2)
        -:  891:	{
        -:  892:	  //+2 coins
    #####:  893:	  state->coins = state->coins + 2;
    #####:  894:	}
        -:  895:      else
        -:  896:	{
        -:  897:	  //trash 2 cards in hand
    #####:  898:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  899:	  discardCard(choice3, currentPlayer, state, 1);
        -:  900:	}
        -:  901:			
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case tribute:
    #####:  907:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  908:	if (state->deckCount[nextPlayer] > 0){
    #####:  909:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  910:	  state->deckCount[nextPlayer]--;
    #####:  911:	}
    #####:  912:	else if (state->discardCount[nextPlayer] > 0){
    #####:  913:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  914:	  state->discardCount[nextPlayer]--;
    #####:  915:	}
        -:  916:	else{
        -:  917:	  //No Card to Reveal
        -:  918:	  if (DEBUG){
        -:  919:	    printf("No cards to reveal\n");
        -:  920:	  }
        -:  921:	}
    #####:  922:      }
        -:  923:	    
        -:  924:      else{
    #####:  925:	if (state->deckCount[nextPlayer] == 0){
    #####:  926:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  927:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  928:	    state->deckCount[nextPlayer]++;
    #####:  929:	    state->discard[nextPlayer][i] = -1;
    #####:  930:	    state->discardCount[nextPlayer]--;
    #####:  931:	  }
        -:  932:			    
    #####:  933:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  934:	} 
    #####:  935:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  937:	state->deckCount[nextPlayer]--;
    #####:  938:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:	state->deckCount[nextPlayer]--;
        -:  941:      }    
        -:  942:		       
    #####:  943:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  944:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  945:	state->playedCardCount++;
    #####:  946:	tributeRevealedCards[1] = -1;
    #####:  947:      }
        -:  948:
    #####:  949:      for (i = 0; i <= 2; i ++){
    #####:  950:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  951:	  state->coins += 2;
    #####:  952:	}
        -:  953:		    
    #####:  954:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
        -:  958:	else{//Action Card
    #####:  959:	  state->numActions = state->numActions + 2;
        -:  960:	}
    #####:  961:      }
        -:  962:	    
    #####:  963:      return 0;
        -:  964:		
        -:  965:    case ambassador:
    #####:  966:      j = 0;		//used to check if player has enough cards to discard
        -:  967:
    #####:  968:      if (choice2 > 2 || choice2 < 0)
        -:  969:	{
    #####:  970:	  return -1;				
        -:  971:	}
        -:  972:
    #####:  973:      if (choice1 == handPos)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  979:	{
    #####:  980:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  981:	    {
    #####:  982:	      j++;
    #####:  983:	    }
    #####:  984:	}
    #####:  985:      if (j < choice2)
        -:  986:	{
    #####:  987:	  return -1;				
        -:  988:	}
        -:  989:
        -:  990:      if (DEBUG) 
        -:  991:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  992:
        -:  993:      //increase supply count for choosen card by amount being discarded
    #####:  994:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  995:			
        -:  996:      //each other player gains a copy of revealed card
    #####:  997:      for (i = 0; i < state->numPlayers; i++)
        -:  998:	{
    #####:  999:	  if (i != currentPlayer)
        -: 1000:	    {
    #####: 1001:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1002:	    }
    #####: 1003:	}
        -: 1004:
        -: 1005:      //discard played card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1007:
        -: 1008:      //trash copies of cards returned to supply
    #####: 1009:      for (j = 0; j < choice2; j++)
        -: 1010:	{
    #####: 1011:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1012:	    {
    #####: 1013:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1014:		{
    #####: 1015:		  discardCard(i, currentPlayer, state, 1);
    #####: 1016:		  break;
        -: 1017:		}
    #####: 1018:	    }
    #####: 1019:	}			
        -: 1020:
    #####: 1021:      return 0;
        -: 1022:		
        -: 1023:    case cutpurse:
        -: 1024:
    #####: 1025:      updateCoins(currentPlayer, state, 2);
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
        -: 1029:	    {
    #####: 1030:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1031:		{
    #####: 1032:		  if (state->hand[i][j] == copper)
        -: 1033:		    {
    #####: 1034:		      discardCard(j, i, state, 0);
    #####: 1035:		      break;
        -: 1036:		    }
    #####: 1037:		  if (j == state->handCount[i])
        -: 1038:		    {
    #####: 1039:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1040:			{
        -: 1041:			  if (DEBUG)
        -: 1042:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1043:			}	
    #####: 1044:		      break;
        -: 1045:		    }		
    #####: 1046:		}
        -: 1047:					
    #####: 1048:	    }
        -: 1049:				
    #####: 1050:	}				
        -: 1051:
        -: 1052:      //discard played card from hand
    #####: 1053:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:
        -: 1057:		
        -: 1058:    case embargo: 
        -: 1059:      //+2 Coins
    #####: 1060:      state->coins = state->coins + 2;
        -: 1061:			
        -: 1062:      //see if selected pile is in play
    #####: 1063:      if ( state->supplyCount[choice1] == -1 )
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:			
        -: 1068:      //add embargo token to selected supply pile
    #####: 1069:      state->embargoTokens[choice1]++;
        -: 1070:			
        -: 1071:      //trash card
    #####: 1072:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case outpost:
        -: 1076:      //set outpost flag
    #####: 1077:      state->outpostPlayed++;
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case salvager:
        -: 1084:      //+1 buy
    #####: 1085:      state->numBuys++;
        -: 1086:			
    #####: 1087:      if (choice1)
        -: 1088:	{
        -: 1089:	  //gain coins equal to trashed card
    #####: 1090:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1091:	  //trash card
    #####: 1092:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1093:	}
        -: 1094:			
        -: 1095:      //discard card
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1097:      return 0;
        -: 1098:		
        -: 1099:    case sea_hag:
    #####: 1100:      for (i = 0; i < state->numPlayers; i++){
    #####: 1101:	if (i != currentPlayer){
    #####: 1102:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1103:	  state->discardCount[i]++;
    #####: 1104:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1105:	}
    #####: 1106:      }
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case treasure_map:
        -: 1110:      //search hand for another treasure_map
    #####: 1111:      index = -1;
    #####: 1112:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1113:	{
    #####: 1114:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1115:	    {
    #####: 1116:	      index = i;
    #####: 1117:	      break;
        -: 1118:	    }
    #####: 1119:	}
    #####: 1120:      if (index > -1)
        -: 1121:	{
        -: 1122:	  //trash both treasure cards
    #####: 1123:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1124:	  discardCard(index, currentPlayer, state, 1);
        -: 1125:
        -: 1126:	  //gain 4 Gold cards
    #####: 1127:	  for (i = 0; i < 4; i++)
        -: 1128:	    {
    #####: 1129:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1130:	    }
        -: 1131:				
        -: 1132:	  //return success
    #####: 1133:	  return 1;
        -: 1134:	}
        -: 1135:			
        -: 1136:      //no second treasure_map found in hand
    #####: 1137:      return -1;
        -: 1138:    }
        -: 1139:	
    #####: 1140:  return -1;
     8002: 1141:}
        -: 1142:
        -: 1143:int gardenEffect() {
    #####: 1144:printf("Your father was a hamster and your mother smelt of elderberries.");
    #####: 1145:return -1;
        -: 1146:}
        -: 1147:
        -: 1148:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1149:  int i;
        -: 1150:
     1001: 1151:  int tributeRevealedCards[2] = {-1, -1};
        -: 1152:  int temphand[MAX_HAND];// moved above the if statement
        -: 1153:
     1001: 1154:  int z = 0;// this is the counter for the temp hand
     4004: 1155:for (i = 0; i < 1; i++)
        -: 1156:	{
     1001: 1157:	  drawCard(currentPlayer, state);
     1001: 1158:	}
        -: 1159:			
        -: 1160:      //discard card from hand
     1001: 1161:      discardCard(handPos, currentPlayer, state, 0);
     1001: 1162:      return 0;
        -: 1163:}
        -: 1164:
        -: 1165:int council_room_effect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1166:      int i;
        -: 1167:      //+4 Cards
    30010: 1168:      for (i = 0; i < 4; i++)
        -: 1169:	{
    12004: 1170:	  drawCard(currentPlayer, state);
    12004: 1171:	}
        -: 1172:			
        -: 1173:      //+1 Buy
     3001: 1174:      state->numBuys++;
        -: 1175:			
        -: 1176:      //Each other player draws a card
    18006: 1177:      for (i = 0; i < state->numPlayers; i++)
        -: 1178:	{
     6002: 1179:	  if ( i != currentPlayer )
        -: 1180:	    {
     3001: 1181:	      drawCard(i, state);
     3001: 1182:	    }
     6002: 1183:	}
        -: 1184:			
        -: 1185:      //put played card in played card pile
        -: 1186:      //discardCard(handPos, currentPlayer, state, 0);
        -: 1187:			
     3001: 1188:      return 0;
        -: 1189:}
        -: 1190:
        -: 1191:int feastEffect(struct gameState *state, int currentPlayer, int choice1) {
        -: 1192:	int i;
        -: 1193:	int x;
        -: 1194:	int temphand[MAX_HAND];
        -: 1195:	
        -: 1196:	      //gain card with cost up to 5
        -: 1197:      //Backup hand
    #####: 1198:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1199:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1200:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1201:      }
        -: 1202:      //Backup hand
        -: 1203:
        -: 1204:      //Update Coins for Buy
    #####: 1205:      updateCoins(currentPlayer, state, 5);
    #####: 1206:      x = 1;//Condition to loop on
    #####: 1207:      while( x == 1) {//Buy one card
    #####: 1208:	if (supplyCount(choice1, state) <= 0){
        -: 1209:	  if (DEBUG)
        -: 1210:	    printf("None of that card left, sorry!\n");
        -: 1211:
        -: 1212:	  if (DEBUG){
        -: 1213:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1214:	  }
    #####: 1215:        return -1;
        -: 1216:	}
    #####: 1217:	else if (state->coins < getCost(choice1)){
    #####: 1218:	  printf("That card is too expensive!\n");
    #####: 1219:        return -1;
        -: 1220:
        -: 1221:	  if (DEBUG){
        -: 1222:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1223:	  }
        -: 1224:	}
        -: 1225:	else{
        -: 1226:
        -: 1227:	  if (DEBUG){
        -: 1228:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1229:	  }
        -: 1230:
    #####: 1231:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1232:	  x = 0;//No more buying cards
        -: 1233:
        -: 1234:	  if (DEBUG){
        -: 1235:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1236:	  }
        -: 1237:
        -: 1238:	}
        -: 1239:      }     
        -: 1240:
        -: 1241:      //Reset Hand
    #####: 1242:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1243:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1244:	temphand[i] = -1;
    #####: 1245:      }
        -: 1246:      //Reset Hand
        -: 1247:      			
    #####: 1248:      return 0;
        -: 1249:	
    #####: 1250:}
        -: 1251:
        -: 1252:int adventurerEffect(struct gameState *state, int currentPlayer) {
        -: 1253:	int temphand[MAX_HAND];// moved above the if statement
     4000: 1254:	int drawntreasure=0;
        -: 1255:	int cardDrawn;
     4000: 1256:	int z = 0;// this is the counter for the temp hand
        -: 1257:    
    32000: 1258:      while(drawntreasure<2){
    12000: 1259:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1260:	  shuffle(currentPlayer, state);
    #####: 1261:	}
    12000: 1262:	drawCard(currentPlayer, state);
    12000: 1263:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    20000: 1264:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     8000: 1265:	  drawntreasure++;
        -: 1266:	else{
     4000: 1267:	  temphand[z]=cardDrawn;
     4000: 1268:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4000: 1269:	  z++;
        -: 1270:	}
        -: 1271:      }
    16000: 1272:      while(z-1>=0){
     4000: 1273:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4000: 1274:	z=z-1;
        -: 1275:      }
     4000: 1276:      return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
     1001: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
     1001: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1001: 1287:      state->playedCardCount++;
     1001: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
     1001: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
     1001: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
     1001: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
     1001: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
     1001: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
     1001: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
     1001: 1314:  return 0;
        -: 1315:}
        -: 1316:
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
    #####: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
    #####: 1341:    }
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
    #####: 1352:}
        -: 1353:
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
        3: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
       36: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
       15: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
       11: 1366:	  state->coins += 1;
       11: 1367:	}
        4: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
    #####: 1371:	}
        4: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
    #####: 1375:	}	
       15: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
        3: 1379:  state->coins += bonus;
        -: 1380:
        3: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c

->->->    - TESTING CARD: feast -    <-<-<-


----  - TEST 1: Function Return  -  ----

Return Value: 0, Expected: 0 


----  - TEST 2: Hand Count  -  ----

Hand Count: 5, Expected: 5 


----  - TEST 3: Choice1 <= 0 -  ----

Deck Count: 11, Expected: 11 


----  - TEST 4: Choice1 <= 5 -  ----

Deck Count: 11, Expected: 11 


----  - TEST 5: Choice1 > 5 -  ----

That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
That card is too expensive!
Deck Count: 10, Expected: 11 


----  - TEST 6: Supply <= 0 -  ----

Deck Count: 10, Expected: 11 

->->  - TEST FAILED -  <-<-
File 'cardtest4.c'
Lines executed:84.15% of 82
cardtest4.c:creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:30.82% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Robert Clifton on 4/18/17.
        -:    3://cardtest4  unit test for the feast card function.
        -:    4://
        -:    5://to make and test: make unittestresults.out
        -:    6://
        -:    7://gcc dominion.c rngs.c cardtest4.c -o cardtest4
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:
        -:   18:int main() {
        -:   19:
        1:   20:    int pass = 1;
        1:   21:    char testCard[] = "feast";
        -:   22:    struct gameState G, copyG;
        1:   23:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   24:                 sea_hag, tribute, smithy};
        1:   25:    int x = 1000;
        -:   26:    int i, retVal;
        1:   27:    int numbPlayers = 2;
        1:   28:    int randSeed = 2;
        1:   29:    int handPos = 0;
        1:   30:    int choice1 = 5, choice2 = 0, choice3 = 0;
        1:   31:    int bonus = 0;
        -:   32:
        -:   33:
        -:   34:    //initialize game state
        1:   35:    initializeGame(numbPlayers, k, randSeed, &G);
        -:   36:
        -:   37:
        1:   38:    printf("\n->->->    - TESTING CARD: %s -    <-<-<-\n\n", testCard);
        -:   39:
        -:   40:    //basic test of return value
        1:   41:    printf("\n----  - TEST 1: Function Return  -  ----\n\n");
        -:   42:
     2002:   43:    for (i = 0; i < x; i++) {
     1000:   44:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   45:        retVal = cardEffect(feast, choice1, choice2, choice3, &copyG, handPos, &bonus);
     1000:   46:        if (retVal != 0) {
    #####:   47:            pass = 0;
    #####:   48:            break;
        -:   49:        };
     1000:   50:    };
        1:   51:    printf("Return Value: %d, Expected: %d \n\n", retVal, 0);
        -:   52:
        -:   53:    //test and compare hand count in copied struct
        1:   54:    printf("\n----  - TEST 2: Hand Count  -  ----\n\n");
        -:   55:
        1:   56:    int currentPlayer = whoseTurn(&G);
        -:   57:
     2002:   58:    for (i = 0; i < x; i++) {
     1000:   59:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   60:        cardEffect(feast, choice1, choice2, choice3, &copyG, handPos, &bonus);
     1000:   61:        if (copyG.handCount[currentPlayer] != G.handCount[currentPlayer]) {
    #####:   62:            pass = 0;
    #####:   63:            break;
        -:   64:        };
     1000:   65:    };
        -:   66:
        1:   67:    printf("Hand Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer], G.handCount[currentPlayer]);
        -:   68:
        -:   69:    //test result when player choie <= 0
        1:   70:    printf("\n----  - TEST 3: Choice1 <= 0 -  ----\n\n");
        1:   71:    memcpy(&copyG, &G, sizeof(struct gameState));
        -:   72:
        1:   73:    int addedCard = 1;
        1:   74:    choice1 = 0;
        1:   75:    currentPlayer = whoseTurn(&G);
        -:   76:
     2002:   77:    for (i = 0; i < x; i++) {
     1000:   78:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   79:        cardEffect(feast, choice1, choice2, choice3, &copyG, handPos, &bonus);
     1000:   80:        if (copyG.handCount[currentPlayer] != G.handCount[currentPlayer]) {
    #####:   81:            pass = 0;
    #####:   82:            break;
        -:   83:        };
     1000:   84:    };
        -:   85:
        1:   86:    printf("Deck Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer]+copyG.deckCount[currentPlayer]+ copyG.discardCount[currentPlayer], G.handCount[currentPlayer]+ G.deckCount[currentPlayer]+ G.discardCount[currentPlayer]+addedCard);
        -:   87:
        -:   88:    //test result when player choie <= 5
        1:   89:    printf("\n----  - TEST 4: Choice1 <= 5 -  ----\n\n");
        -:   90:
        1:   91:    choice1 = 5;
        1:   92:    currentPlayer = whoseTurn(&G);
        -:   93:
     2002:   94:    for (i = 0; i < x; i++) {
     1000:   95:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   96:        cardEffect(feast, choice1, choice2, choice3, &copyG, handPos, &bonus);
        -:   97:
     1000:   98:        if (copyG.handCount[currentPlayer] != G.handCount[currentPlayer]) {
    #####:   99:            pass = 0;
    #####:  100:            break;
        -:  101:        };
     1000:  102:    };
        1:  103:    printf("Deck Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer]+copyG.deckCount[currentPlayer]+ copyG.discardCount[currentPlayer], G.handCount[currentPlayer]+ G.deckCount[currentPlayer]+ G.discardCount[currentPlayer]+addedCard);
        -:  104:
        -:  105:    //test result when player choie > 5
        1:  106:    printf("\n----  - TEST 5: Choice1 > 5 -  ----\n\n");
        -:  107:
        1:  108:    choice1 = 6;
        1:  109:    currentPlayer = whoseTurn(&G);
        -:  110:
     2002:  111:    for (i = 0; i < x; i++) {
     1000:  112:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:  113:        cardEffect(feast, choice1, choice2, choice3, &copyG, handPos, &bonus);
        -:  114:
     1000:  115:        if (copyG.handCount[currentPlayer] != G.handCount[currentPlayer]) {
    #####:  116:            pass = 0;
    #####:  117:            break;
        -:  118:        };
     1000:  119:    };
        1:  120:    printf("Deck Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer]+copyG.deckCount[currentPlayer]+ copyG.discardCount[currentPlayer], G.handCount[currentPlayer]+ G.deckCount[currentPlayer]+ G.discardCount[currentPlayer]+addedCard);
        -:  121:
        -:  122:    //test result when player card supply <= 0
        1:  123:    printf("\n----  - TEST 6: Supply <= 0 -  ----\n\n");
        -:  124:
        1:  125:    choice1 = 0;
        1:  126:    currentPlayer = whoseTurn(&G);
        -:  127:
        2:  128:    for (i = 0; i < x; i++) {
        1:  129:        memcpy(&copyG, &G, sizeof(struct gameState));
        1:  130:        copyG.supplyCount[0] = 0;
        1:  131:        cardEffect(feast, choice1, choice2, choice3, &copyG, handPos, &bonus);
        -:  132:
        1:  133:        if (copyG.handCount[currentPlayer] == G.handCount[currentPlayer]) {
        1:  134:            pass = 0;
        1:  135:            break;
        -:  136:        };
    #####:  137:    };
        -:  138:
        -:  139:    //Final bool check to see if testing passed or failed,  prints result to standard out
        1:  140:    printf("Deck Count: %d, Expected: %d \n\n", copyG.handCount[currentPlayer]+copyG.deckCount[currentPlayer]+ copyG.discardCount[currentPlayer], G.handCount[currentPlayer]+ G.deckCount[currentPlayer]+ G.discardCount[currentPlayer]+addedCard);
        1:  141:    if (pass) {
    #####:  142:        printf("->->  - TEST SUCCESSFULLY COMPLETED -  <-<-\n");
    #####:  143:    } else{
        1:  144:        printf("->->  - TEST FAILED -  <-<-\n");
        -:  145:    }
        -:  146:
        1:  147:    return 0;
        -:  148:};
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://test message
        -:    9:
        -:   10:int smithyEffect(struct gameState *state, int currentPlayer, int handPos);
        -:   11:
        -:   12:int council_room_effect(struct gameState *state, int currentPlayer, int handPos);
        -:   13:
        -:   14:int adventurerEffect(struct gameState *state, int currentPlayer);
        -:   15:
        -:   16:int feastEffect(struct gameState *state, int currentPlayer, int choice1);
        -:   17:
        -:   18:int gardenEffect();
        -:   19:
        -:   20:
        -:   21:int compare(const void* a, const void* b) {
      112:   22:  if (*(int*)a > *(int*)b)
    #####:   23:    return 1;
      112:   24:  if (*(int*)a < *(int*)b)
       40:   25:    return -1;
       72:   26:  return 0;
      112:   27:}
        -:   28:
        -:   29:struct gameState* newGame() {
    #####:   30:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   31:  return g;
        -:   32:}
        -:   33:
        -:   34:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   35:		  int k8, int k9, int k10) {
    #####:   36:  int* k = malloc(10 * sizeof(int));
    #####:   37:  k[0] = k1;
    #####:   38:  k[1] = k2;
    #####:   39:  k[2] = k3;
    #####:   40:  k[3] = k4;
    #####:   41:  k[4] = k5;
    #####:   42:  k[5] = k6;
    #####:   43:  k[6] = k7;
    #####:   44:  k[7] = k8;
    #####:   45:  k[8] = k9;
    #####:   46:  k[9] = k10;
    #####:   47:  return k;
        -:   48:}
        -:   49:
        -:   50:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   51:		   struct gameState *state) {
        -:   52:
        -:   53:  int i;
        -:   54:  int j;
        -:   55:  int it;			
        -:   56:  //set up random number generator
        4:   57:  SelectStream(1);
        4:   58:  PutSeed((long)randomSeed);
        -:   59:  
        -:   60:  //check number of players
        8:   61:  if (numPlayers > MAX_PLAYERS || numPlayers < 0)
        -:   62:    {
    #####:   63:      return -1;
        -:   64:    }
        -:   65:
        -:   66:  //set number of players
        4:   67:  state->numPlayers = numPlayers;
        -:   68:
        -:   69:  //check selected kingdom cards are different
       88:   70:  for (i = 0; i < 10; i++)
        -:   71:    {
      880:   72:      for (j = 0; j < 10; j++)
        -:   73:        {
      760:   74:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   75:	    {
    #####:   76:	      return -1;
        -:   77:	    }
      400:   78:        }
       40:   79:    }
        -:   80:
        -:   81:
        -:   82:  //initialize supply
        -:   83:  ///////////////////////////////
        -:   84:
        -:   85:  //set number of Curse cards
        4:   86:  if (numPlayers == 2)
        -:   87:    {
        4:   88:      state->supplyCount[curse] = 10;
        4:   89:    }
    #####:   90:  else if (numPlayers == 3)
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 20;
    #####:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[curse] = 30;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Victory cards
        4:  100:  if (numPlayers == 2)
        -:  101:    {
        4:  102:      state->supplyCount[estate] = 8;
        4:  103:      state->supplyCount[duchy] = 8;
        4:  104:      state->supplyCount[province] = 8;
        4:  105:    }
        -:  106:  else
        -:  107:    {
    #####:  108:      state->supplyCount[estate] = 12;
    #####:  109:      state->supplyCount[duchy] = 12;
    #####:  110:      state->supplyCount[province] = 12;
        -:  111:    }
        -:  112:
        -:  113:  //set number of Treasure cards
        4:  114:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  115:  state->supplyCount[silver] = 40;
        4:  116:  state->supplyCount[gold] = 30;
        -:  117:
        -:  118:  //set number of Kingdom cards
      168:  119:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  120:    {
     1320:  121:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  122:	{
      620:  123:	  if (kingdomCards[j] == i)
        -:  124:	    {
        -:  125:	      //check if card is a 'Victory' Kingdom card
       80:  126:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  127:		{
        4:  128:		  if (numPlayers == 2){ 
        4:  129:		    state->supplyCount[i] = 8; 
        4:  130:		  }
    #####:  131:		  else{ state->supplyCount[i] = 12; }
        4:  132:		}
        -:  133:	      else
        -:  134:		{
       36:  135:		  state->supplyCount[i] = 10;
        -:  136:		}
       40:  137:	      break;
        -:  138:	    }
        -:  139:	  else    //card is not in the set choosen for the game
        -:  140:	    {
      580:  141:	      state->supplyCount[i] = -1;
        -:  142:	    }
      580:  143:	}
        -:  144:
       80:  145:    }
        -:  146:
        -:  147:  ////////////////////////
        -:  148:  //supply intilization complete
        -:  149:
        -:  150:  //set player decks
       24:  151:  for (i = 0; i < numPlayers; i++)
        -:  152:    {
        8:  153:      state->deckCount[i] = 0;
       64:  154:      for (j = 0; j < 3; j++)
        -:  155:	{
       24:  156:	  state->deck[i][j] = estate;
       24:  157:	  state->deckCount[i]++;
       24:  158:	}
      128:  159:      for (j = 3; j < 10; j++)
        -:  160:	{
       56:  161:	  state->deck[i][j] = copper;
       56:  162:	  state->deckCount[i]++;		
       56:  163:	}
        8:  164:    }
        -:  165:
        -:  166:  //shuffle player decks
       24:  167:  for (i = 0; i < numPlayers; i++)
        -:  168:    {
        8:  169:      if ( shuffle(i, state) < 0 )
        -:  170:	{
    #####:  171:	  return -1;
        -:  172:	}
        8:  173:    }
        -:  174:
        -:  175:  //draw player hands
       24:  176:  for (i = 0; i < numPlayers; i++)
        -:  177:    {  
        -:  178:      //initialize hand size to zero
        8:  179:      state->handCount[i] = 0;
        8:  180:      state->discardCount[i] = 0;
        -:  181:      //draw 5 cards
        -:  182:      // for (j = 0; j < 5; j++)
        -:  183:      //	{
        -:  184:      //	  drawCard(i, state);
        -:  185:      //	}
        8:  186:    }
        -:  187:  
        -:  188:  //set embargo tokens to 0 for all supply piles
      224:  189:  for (i = 0; i <= treasure_map; i++)
        -:  190:    {
      108:  191:      state->embargoTokens[i] = 0;
      108:  192:    }
        -:  193:
        -:  194:  //initialize first player's turn
        4:  195:  state->outpostPlayed = 0;
        4:  196:  state->phase = 0;
        4:  197:  state->numActions = 1;
        4:  198:  state->numBuys = 1;
        4:  199:  state->playedCardCount = 0;
        4:  200:  state->whoseTurn = 0;
        4:  201:  state->handCount[state->whoseTurn] = 0;
        -:  202:  //int it; move to top
        -:  203:
        -:  204:  //Moved draw cards to here, only drawing at the start of a turn
       48:  205:  for (it = 0; it < 5; it++){
       20:  206:    drawCard(state->whoseTurn, state);
       20:  207:  }
        -:  208:
        4:  209:  updateCoins(state->whoseTurn, state, 0);
        -:  210:
        4:  211:  return 0;
        4:  212:}
        -:  213:
        -:  214:int shuffle(int player, struct gameState *state) {
        -:  215: 
        -:  216:
        -:  217:  int newDeck[MAX_DECK];
        8:  218:  int newDeckPos = 0;
        -:  219:  int card;
        -:  220:  int i;
        -:  221:
        8:  222:  if (state->deckCount[player] < 1)
    #####:  223:    return -1;
        8:  224:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  225:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  226:
      176:  227:  while (state->deckCount[player] > 0) {
       80:  228:    card = floor(Random() * state->deckCount[player]);
       80:  229:    newDeck[newDeckPos] = state->deck[player][card];
       80:  230:    newDeckPos++;
      550:  231:    for (i = card; i < state->deckCount[player]-1; i++) {
      195:  232:      state->deck[player][i] = state->deck[player][i+1];
      195:  233:    }
       80:  234:    state->deckCount[player]--;
        -:  235:  }
      176:  236:  for (i = 0; i < newDeckPos; i++) {
       80:  237:    state->deck[player][i] = newDeck[i];
       80:  238:    state->deckCount[player]++;
       80:  239:  }
        -:  240:
        8:  241:  return 0;
        8:  242:}
        -:  243:
        -:  244:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  245:{	
        -:  246:  int card;
    #####:  247:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  248:
        -:  249:  //check if it is the right phase
    #####:  250:  if (state->phase != 0)
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //check if player has enough actions
    #####:  256:  if ( state->numActions < 1 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //get card played
    #####:  262:  card = handCard(handPos, state);
        -:  263:	
        -:  264:  //check if selected card is an action
    #####:  265:  if ( card < adventurer || card > treasure_map )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //play card
    #####:  271:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  272:    {
    #####:  273:      return -1;
        -:  274:    }
        -:  275:	
        -:  276:  //reduce number of actions
    #####:  277:  state->numActions--;
        -:  278:
        -:  279:  //update coins (Treasure cards may be added with card draws)
    #####:  280:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  281:	
    #####:  282:  return 0;
    #####:  283:}
        -:  284:
        -:  285:int buyCard(int supplyPos, struct gameState *state) {
        -:  286:  int who;
        -:  287:  if (DEBUG){
        -:  288:    printf("Entering buyCard...\n");
        -:  289:  }
        -:  290:
        -:  291:  // I don't know what to do about the phase thing.
        -:  292:
    #####:  293:  who = state->whoseTurn;
        -:  294:
    #####:  295:  if (state->numBuys < 1){
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (supplyCount(supplyPos, state) <1){
        -:  300:    if (DEBUG)
        -:  301:      printf("There are not any of that type of card left\n");
    #####:  302:    return -1;
    #####:  303:  } else if (state->coins < getCost(supplyPos)){
        -:  304:    if (DEBUG)
        -:  305:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  306:    return -1;
        -:  307:  } else {
    #####:  308:    state->phase=1;
        -:  309:    //state->supplyCount[supplyPos]--;
    #####:  310:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  311:
    #####:  312:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  313:    state->numBuys--;
        -:  314:    if (DEBUG)
        -:  315:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  316:  }
        -:  317:
        -:  318:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  319:  //state->discardCount[who]++;
        -:  320:
    #####:  321:  return 0;
    #####:  322:}
        -:  323:
        -:  324:int numHandCards(struct gameState *state) {
    14000:  325:  return state->handCount[ whoseTurn(state) ];
        -:  326:}
        -:  327:
        -:  328:int handCard(int handPos, struct gameState *state) {
    20000:  329:  int currentPlayer = whoseTurn(state);
    20000:  330:  return state->hand[currentPlayer][handPos];
        -:  331:}
        -:  332:
        -:  333:int supplyCount(int card, struct gameState *state) {
     9001:  334:  return state->supplyCount[card];
        -:  335:}
        -:  336:
        -:  337:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  338:  int i;
    #####:  339:  int count = 0;
        -:  340:
    #####:  341:  for (i = 0; i < state->deckCount[player]; i++)
        -:  342:    {
    #####:  343:      if (state->deck[player][i] == card) count++;
    #####:  344:    }
        -:  345:
    #####:  346:  for (i = 0; i < state->handCount[player]; i++)
        -:  347:    {
    #####:  348:      if (state->hand[player][i] == card) count++;
    #####:  349:    }
        -:  350:
    #####:  351:  for (i = 0; i < state->discardCount[player]; i++)
        -:  352:    {
    #####:  353:      if (state->discard[player][i] == card) count++;
    #####:  354:    }
        -:  355:
    #####:  356:  return count;
        -:  357:}
        -:  358:
        -:  359:int whoseTurn(struct gameState *state) {
    47014:  360:  return state->whoseTurn;
        -:  361:}
        -:  362:
        -:  363:int endTurn(struct gameState *state) {
        -:  364:  int k;
        -:  365:  int i;
    #####:  366:  int currentPlayer = whoseTurn(state);
        -:  367:  
        -:  368:  //Discard hand
    #####:  369:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  370:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  371:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  372:  }
    #####:  373:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  374:    
        -:  375:  //Code for determining the player
    #####:  376:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  377:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  378:  }
        -:  379:  else{
    #####:  380:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  381:  }
        -:  382:
    #####:  383:  state->outpostPlayed = 0;
    #####:  384:  state->phase = 0;
    #####:  385:  state->numActions = 1;
    #####:  386:  state->coins = 0;
    #####:  387:  state->numBuys = 1;
    #####:  388:  state->playedCardCount = 0;
    #####:  389:  state->handCount[state->whoseTurn] = 0;
        -:  390:
        -:  391:  //int k; move to top
        -:  392:  //Next player draws hand
    #####:  393:  for (k = 0; k < 5; k++){
    #####:  394:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  395:  }
        -:  396:
        -:  397:  //Update money
    #####:  398:  updateCoins(state->whoseTurn, state , 0);
        -:  399:
    #####:  400:  return 0;
        -:  401:}
        -:  402:
        -:  403:int isGameOver(struct gameState *state) {
        -:  404:  int i;
        -:  405:  int j;
        -:  406:	
        -:  407:  //if stack of Province cards is empty, the game ends
    #####:  408:  if (state->supplyCount[province] == 0)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
        -:  413:  //if three supply pile are at 0, the game ends
    #####:  414:  j = 0;
    #####:  415:  for (i = 0; i < 25; i++)
        -:  416:    {
    #####:  417:      if (state->supplyCount[i] == 0)
        -:  418:	{
    #####:  419:	  j++;
    #####:  420:	}
    #####:  421:    }
    #####:  422:  if ( j >= 3)
        -:  423:    {
    #####:  424:      return 1;
        -:  425:    }
        -:  426:
    #####:  427:  return 0;
    #####:  428:}
        -:  429:
        -:  430:int scoreFor (int player, struct gameState *state) {
        -:  431:
        -:  432:  int i;
    #####:  433:  int score = 0;
        -:  434:  //score from hand
    #####:  435:  for (i = 0; i < state->handCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  443:    }
        -:  444:
        -:  445:  //score from discard
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  454:    }
        -:  455:
        -:  456:  //score from deck
    #####:  457:  for (i = 0; i < state->discardCount[player]; i++)
        -:  458:    {
    #####:  459:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  460:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  461:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  462:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  463:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  465:    }
        -:  466:
    #####:  467:  return score;
        -:  468:}
        -:  469:
        -:  470:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  471:  int i;	
        -:  472:  int j;
        -:  473:  int highScore;
        -:  474:  int currentPlayer;
        -:  475:
        -:  476:  //get score for each player
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:    {
        -:  479:      //set unused player scores to -9999
    #####:  480:      if (i >= state->numPlayers)
        -:  481:	{
    #####:  482:	  players[i] = -9999;
    #####:  483:	}
        -:  484:      else
        -:  485:	{
    #####:  486:	  players[i] = scoreFor (i, state);
        -:  487:	}
    #####:  488:    }
        -:  489:
        -:  490:  //find highest score
    #####:  491:  j = 0;
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if (players[i] > players[j])
        -:  495:	{
    #####:  496:	  j = i;
    #####:  497:	}
    #####:  498:    }
    #####:  499:  highScore = players[j];
        -:  500:
        -:  501:  //add 1 to players who had less turns
    #####:  502:  currentPlayer = whoseTurn(state);
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if ( players[i] == highScore && i > currentPlayer )
        -:  506:	{
    #####:  507:	  players[i]++;
    #####:  508:	}
    #####:  509:    }
        -:  510:
        -:  511:  //find new highest score
    #####:  512:  j = 0;
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:      if ( players[i] > players[j] )
        -:  516:	{
    #####:  517:	  j = i;
    #####:  518:	}
    #####:  519:    }
    #####:  520:  highScore = players[j];
        -:  521:
        -:  522:  //set winners in array to 1 and rest to 0
    #####:  523:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  524:    {
    #####:  525:      if ( players[i] == highScore )
        -:  526:	{
    #####:  527:	  players[i] = 1;
    #####:  528:	}
        -:  529:      else
        -:  530:	{
    #####:  531:	  players[i] = 0;
        -:  532:	}
    #####:  533:    }
        -:  534:
    #####:  535:  return 0;
        -:  536:}
        -:  537:
        -:  538:int drawCard(int player, struct gameState *state)
        -:  539:{	int count;
        -:  540:  int deckCounter;
    28026:  541:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  542:    
        -:  543:    //Step 1 Shuffle the discard pile back into a deck
        -:  544:    int i;
        -:  545:    //Move discard to deck
    #####:  546:    for (i = 0; i < state->discardCount[player];i++){
    #####:  547:      state->deck[player][i] = state->discard[player][i];
    #####:  548:      state->discard[player][i] = -1;
    #####:  549:    }
        -:  550:
    #####:  551:    state->deckCount[player] = state->discardCount[player];
    #####:  552:    state->discardCount[player] = 0;//Reset discard
        -:  553:
        -:  554:    //Shufffle the deck
    #####:  555:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  556:   
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  559:    }
        -:  560:    
    #####:  561:    state->discardCount[player] = 0;
        -:  562:
        -:  563:    //Step 2 Draw Card
    #####:  564:    count = state->handCount[player];//Get current player's hand count
        -:  565:    
        -:  566:    if (DEBUG){//Debug statements
        -:  567:      printf("Current hand count: %d\n", count);
        -:  568:    }
        -:  569:    
    #####:  570:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  571:
    #####:  572:    if (deckCounter == 0)
    #####:  573:      return -1;
        -:  574:
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
    #####:  578:  }
        -:  579:
        -:  580:  else{
    28026:  581:    int count = state->handCount[player];//Get current hand count for player
        -:  582:    int deckCounter;
        -:  583:    if (DEBUG){//Debug statements
        -:  584:      printf("Current hand count: %d\n", count);
        -:  585:    }
        -:  586:
    28026:  587:    deckCounter = state->deckCount[player];//Create holder for the deck count
    28026:  588:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    28026:  589:    state->deckCount[player]--;
    28026:  590:    state->handCount[player]++;//Increment hand count
        -:  591:  }
        -:  592:
    28026:  593:  return 0;
    28026:  594:}
        -:  595:
        -:  596:int getCost(int cardNumber)
        -:  597:{
     5000:  598:  switch( cardNumber ) 
        -:  599:    {
        -:  600:    case curse:
     1000:  601:      return 0;
        -:  602:    case estate:
    #####:  603:      return 2;
        -:  604:    case duchy:
    #####:  605:      return 5;
        -:  606:    case province:
    #####:  607:      return 8;
        -:  608:    case copper:
    #####:  609:      return 0;
        -:  610:    case silver:
     3000:  611:      return 3;
        -:  612:    case gold:
     1000:  613:      return 6;
        -:  614:    case adventurer:
    #####:  615:      return 6;
        -:  616:    case council_room:
    #####:  617:      return 5;
        -:  618:    case feast:
    #####:  619:      return 4;
        -:  620:    case gardens:
    #####:  621:      return 4;
        -:  622:    case mine:
    #####:  623:      return 5;
        -:  624:    case remodel:
    #####:  625:      return 4;
        -:  626:    case smithy:
    #####:  627:      return 4;
        -:  628:    case village:
    #####:  629:      return 3;
        -:  630:    case baron:
    #####:  631:      return 4;
        -:  632:    case great_hall:
    #####:  633:      return 3;
        -:  634:    case minion:
    #####:  635:      return 5;
        -:  636:    case steward:
    #####:  637:      return 3;
        -:  638:    case tribute:
    #####:  639:      return 5;
        -:  640:    case ambassador:
    #####:  641:      return 3;
        -:  642:    case cutpurse:
    #####:  643:      return 4;
        -:  644:    case embargo: 
    #####:  645:      return 2;
        -:  646:    case outpost:
    #####:  647:      return 5;
        -:  648:    case salvager:
    #####:  649:      return 4;
        -:  650:    case sea_hag:
    #####:  651:      return 4;
        -:  652:    case treasure_map:
    #####:  653:      return 4;
        -:  654:    }
        -:  655:	
    #####:  656:  return -1;
     5000:  657:}
        -:  658:
        -:  659:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  660:{
        -:  661:  int i;
        -:  662:  int j;
        -:  663:  int k;
        -:  664:  int x;
        -:  665:  int index;
    13003:  666:  int currentPlayer = whoseTurn(state);
    13003:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
    13003:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
    13003:  671:  int drawntreasure=0;
        -:  672:  int cardDrawn;
    13003:  673:  int z = 0;// this is the counter for the temp hand
    13003:  674:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  675:    nextPlayer = 0;
    #####:  676:  }
        -:  677:  //uses switch to select card and perform actions
    13003:  678:  switch( card ) 
        -:  679:    {
        -:  680:		  
        -:  681:   case adventurer:
     4000:  682:	return adventurerEffect(state, currentPlayer);
        -:  683:			
        -:  684:    case council_room:
     3001:  685:		return council_room_effect(state, currentPlayer, handPos);
        -:  686:			
        -:  687:    case feast:
     5001:  688:		return feastEffect(state, currentPlayer, choice1);
        -:  689:			
        -:  690:    case gardens:
    #####:  691:      return gardenEffect();
        -:  692:			
        -:  693:    case mine:
    #####:  694:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  695:
    #####:  696:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  697:	{
    #####:  698:	  return -1;
        -:  699:	}
        -:  700:		
    #####:  701:      if (choice2 > treasure_map || choice2 < curse)
        -:  702:	{
    #####:  703:	  return -1;
        -:  704:	}
        -:  705:
    #####:  706:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  707:	{
    #####:  708:	  return -1;
        -:  709:	}
        -:  710:
    #####:  711:      gainCard(choice2, state, 2, currentPlayer);
        -:  712:
        -:  713:      //discard card from hand
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:
        -:  716:      //discard trashed card
    #####:  717:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  718:	{
    #####:  719:	  if (state->hand[currentPlayer][i] == j)
        -:  720:	    {
    #####:  721:	      discardCard(i, currentPlayer, state, 0);			
    #####:  722:	      break;
        -:  723:	    }
    #####:  724:	}
        -:  725:			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case remodel:
    #####:  729:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  730:
    #####:  731:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  732:	{
    #####:  733:	  return -1;
        -:  734:	}
        -:  735:
    #####:  736:      gainCard(choice2, state, 0, currentPlayer);
        -:  737:
        -:  738:      //discard card from hand
    #####:  739:      discardCard(handPos, currentPlayer, state, 0);
        -:  740:
        -:  741:      //discard trashed card
    #####:  742:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  743:	{
    #####:  744:	  if (state->hand[currentPlayer][i] == j)
        -:  745:	    {
    #####:  746:	      discardCard(i, currentPlayer, state, 0);			
    #####:  747:	      break;
        -:  748:	    }
    #####:  749:	}
        -:  750:
        -:  751:
    #####:  752:      return 0;
        -:  753:		
        -:  754:    case smithy:
        -:  755:      //+3 Cards
     1001:  756:      return smithyEffect(state, currentPlayer, handPos);
        -:  757:      
        -:  758:		
        -:  759:    case village:
        -:  760:      //+1 Card
    #####:  761:      drawCard(currentPlayer, state);
        -:  762:			
        -:  763:      //+2 Actions
    #####:  764:      state->numActions = state->numActions + 2;
        -:  765:			
        -:  766:      //discard played card from hand
    #####:  767:      discardCard(handPos, currentPlayer, state, 0);
    #####:  768:      return 0;
        -:  769:		
        -:  770:    case baron:
    #####:  771:      state->numBuys++;//Increase buys by 1!
    #####:  772:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  773:	int p = 0;//Iterator for hand!
    #####:  774:	int card_not_discarded = 1;//Flag for discard set!
    #####:  775:	while(card_not_discarded){
    #####:  776:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  777:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  778:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  779:	    state->discardCount[currentPlayer]++;
    #####:  780:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  781:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  782:	    }
    #####:  783:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  784:	    state->handCount[currentPlayer]--;
    #####:  785:	    card_not_discarded = 0;//Exit the loop
    #####:  786:	  }
    #####:  787:	  else if (p > state->handCount[currentPlayer]){
        -:  788:	    if(DEBUG) {
        -:  789:	      printf("No estate cards in your hand, invalid choice\n");
        -:  790:	      printf("Must gain an estate if there are any\n");
        -:  791:	    }
    #####:  792:	    if (supplyCount(estate, state) > 0){
    #####:  793:	      gainCard(estate, state, 0, currentPlayer);
    #####:  794:	      state->supplyCount[estate]--;//Decrement estates
    #####:  795:	      if (supplyCount(estate, state) == 0){
    #####:  796:		isGameOver(state);
    #####:  797:	      }
    #####:  798:	    }
    #####:  799:	    card_not_discarded = 0;//Exit the loop
    #####:  800:	  }
        -:  801:			    
        -:  802:	  else{
    #####:  803:	    p++;//Next card
        -:  804:	  }
        -:  805:	}
    #####:  806:      }
        -:  807:			    
        -:  808:      else{
    #####:  809:	if (supplyCount(estate, state) > 0){
    #####:  810:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  811:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  812:	  if (supplyCount(estate, state) == 0){
    #####:  813:	    isGameOver(state);
    #####:  814:	  }
    #####:  815:	}
        -:  816:      }
        -:  817:	    
        -:  818:      
    #####:  819:      return 0;
        -:  820:		
        -:  821:    case great_hall:
        -:  822:      //+1 Card
    #####:  823:      drawCard(currentPlayer, state);
        -:  824:			
        -:  825:      //+1 Actions
    #####:  826:      state->numActions++;
        -:  827:			
        -:  828:      //discard card from hand
    #####:  829:      discardCard(handPos, currentPlayer, state, 0);
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case minion:
        -:  833:      //+1 action
    #####:  834:      state->numActions++;
        -:  835:			
        -:  836:      //discard card from hand
    #####:  837:      discardCard(handPos, currentPlayer, state, 0);
        -:  838:			
    #####:  839:      if (choice1)		//+2 coins
        -:  840:	{
    #####:  841:	  state->coins = state->coins + 2;
    #####:  842:	}
        -:  843:			
    #####:  844:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  845:	{
        -:  846:	  //discard hand
    #####:  847:	  while(numHandCards(state) > 0)
        -:  848:	    {
    #####:  849:	      discardCard(handPos, currentPlayer, state, 0);
        -:  850:	    }
        -:  851:				
        -:  852:	  //draw 4
    #####:  853:	  for (i = 0; i < 4; i++)
        -:  854:	    {
    #####:  855:	      drawCard(currentPlayer, state);
    #####:  856:	    }
        -:  857:				
        -:  858:	  //other players discard hand and redraw if hand size > 4
    #####:  859:	  for (i = 0; i < state->numPlayers; i++)
        -:  860:	    {
    #####:  861:	      if (i != currentPlayer)
        -:  862:		{
    #####:  863:		  if ( state->handCount[i] > 4 )
        -:  864:		    {
        -:  865:		      //discard hand
    #####:  866:		      while( state->handCount[i] > 0 )
        -:  867:			{
    #####:  868:			  discardCard(handPos, i, state, 0);
        -:  869:			}
        -:  870:							
        -:  871:		      //draw 4
    #####:  872:		      for (j = 0; j < 4; j++)
        -:  873:			{
    #####:  874:			  drawCard(i, state);
    #####:  875:			}
    #####:  876:		    }
    #####:  877:		}
    #####:  878:	    }
        -:  879:				
    #####:  880:	}
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case steward:
    #####:  884:      if (choice1 == 1)
        -:  885:	{
        -:  886:	  //+2 cards
    #####:  887:	  drawCard(currentPlayer, state);
    #####:  888:	  drawCard(currentPlayer, state);
    #####:  889:	}
    #####:  890:      else if (choice1 == 2)
        -:  891:	{
        -:  892:	  //+2 coins
    #####:  893:	  state->coins = state->coins + 2;
    #####:  894:	}
        -:  895:      else
        -:  896:	{
        -:  897:	  //trash 2 cards in hand
    #####:  898:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  899:	  discardCard(choice3, currentPlayer, state, 1);
        -:  900:	}
        -:  901:			
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case tribute:
    #####:  907:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  908:	if (state->deckCount[nextPlayer] > 0){
    #####:  909:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  910:	  state->deckCount[nextPlayer]--;
    #####:  911:	}
    #####:  912:	else if (state->discardCount[nextPlayer] > 0){
    #####:  913:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  914:	  state->discardCount[nextPlayer]--;
    #####:  915:	}
        -:  916:	else{
        -:  917:	  //No Card to Reveal
        -:  918:	  if (DEBUG){
        -:  919:	    printf("No cards to reveal\n");
        -:  920:	  }
        -:  921:	}
    #####:  922:      }
        -:  923:	    
        -:  924:      else{
    #####:  925:	if (state->deckCount[nextPlayer] == 0){
    #####:  926:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  927:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  928:	    state->deckCount[nextPlayer]++;
    #####:  929:	    state->discard[nextPlayer][i] = -1;
    #####:  930:	    state->discardCount[nextPlayer]--;
    #####:  931:	  }
        -:  932:			    
    #####:  933:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  934:	} 
    #####:  935:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  937:	state->deckCount[nextPlayer]--;
    #####:  938:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:	state->deckCount[nextPlayer]--;
        -:  941:      }    
        -:  942:		       
    #####:  943:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  944:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  945:	state->playedCardCount++;
    #####:  946:	tributeRevealedCards[1] = -1;
    #####:  947:      }
        -:  948:
    #####:  949:      for (i = 0; i <= 2; i ++){
    #####:  950:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  951:	  state->coins += 2;
    #####:  952:	}
        -:  953:		    
    #####:  954:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
        -:  958:	else{//Action Card
    #####:  959:	  state->numActions = state->numActions + 2;
        -:  960:	}
    #####:  961:      }
        -:  962:	    
    #####:  963:      return 0;
        -:  964:		
        -:  965:    case ambassador:
    #####:  966:      j = 0;		//used to check if player has enough cards to discard
        -:  967:
    #####:  968:      if (choice2 > 2 || choice2 < 0)
        -:  969:	{
    #####:  970:	  return -1;				
        -:  971:	}
        -:  972:
    #####:  973:      if (choice1 == handPos)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  979:	{
    #####:  980:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  981:	    {
    #####:  982:	      j++;
    #####:  983:	    }
    #####:  984:	}
    #####:  985:      if (j < choice2)
        -:  986:	{
    #####:  987:	  return -1;				
        -:  988:	}
        -:  989:
        -:  990:      if (DEBUG) 
        -:  991:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  992:
        -:  993:      //increase supply count for choosen card by amount being discarded
    #####:  994:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  995:			
        -:  996:      //each other player gains a copy of revealed card
    #####:  997:      for (i = 0; i < state->numPlayers; i++)
        -:  998:	{
    #####:  999:	  if (i != currentPlayer)
        -: 1000:	    {
    #####: 1001:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1002:	    }
    #####: 1003:	}
        -: 1004:
        -: 1005:      //discard played card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1007:
        -: 1008:      //trash copies of cards returned to supply
    #####: 1009:      for (j = 0; j < choice2; j++)
        -: 1010:	{
    #####: 1011:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1012:	    {
    #####: 1013:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1014:		{
    #####: 1015:		  discardCard(i, currentPlayer, state, 1);
    #####: 1016:		  break;
        -: 1017:		}
    #####: 1018:	    }
    #####: 1019:	}			
        -: 1020:
    #####: 1021:      return 0;
        -: 1022:		
        -: 1023:    case cutpurse:
        -: 1024:
    #####: 1025:      updateCoins(currentPlayer, state, 2);
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
        -: 1029:	    {
    #####: 1030:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1031:		{
    #####: 1032:		  if (state->hand[i][j] == copper)
        -: 1033:		    {
    #####: 1034:		      discardCard(j, i, state, 0);
    #####: 1035:		      break;
        -: 1036:		    }
    #####: 1037:		  if (j == state->handCount[i])
        -: 1038:		    {
    #####: 1039:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1040:			{
        -: 1041:			  if (DEBUG)
        -: 1042:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1043:			}	
    #####: 1044:		      break;
        -: 1045:		    }		
    #####: 1046:		}
        -: 1047:					
    #####: 1048:	    }
        -: 1049:				
    #####: 1050:	}				
        -: 1051:
        -: 1052:      //discard played card from hand
    #####: 1053:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:
        -: 1057:		
        -: 1058:    case embargo: 
        -: 1059:      //+2 Coins
    #####: 1060:      state->coins = state->coins + 2;
        -: 1061:			
        -: 1062:      //see if selected pile is in play
    #####: 1063:      if ( state->supplyCount[choice1] == -1 )
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:			
        -: 1068:      //add embargo token to selected supply pile
    #####: 1069:      state->embargoTokens[choice1]++;
        -: 1070:			
        -: 1071:      //trash card
    #####: 1072:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case outpost:
        -: 1076:      //set outpost flag
    #####: 1077:      state->outpostPlayed++;
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case salvager:
        -: 1084:      //+1 buy
    #####: 1085:      state->numBuys++;
        -: 1086:			
    #####: 1087:      if (choice1)
        -: 1088:	{
        -: 1089:	  //gain coins equal to trashed card
    #####: 1090:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1091:	  //trash card
    #####: 1092:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1093:	}
        -: 1094:			
        -: 1095:      //discard card
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1097:      return 0;
        -: 1098:		
        -: 1099:    case sea_hag:
    #####: 1100:      for (i = 0; i < state->numPlayers; i++){
    #####: 1101:	if (i != currentPlayer){
    #####: 1102:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1103:	  state->discardCount[i]++;
    #####: 1104:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1105:	}
    #####: 1106:      }
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case treasure_map:
        -: 1110:      //search hand for another treasure_map
    #####: 1111:      index = -1;
    #####: 1112:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1113:	{
    #####: 1114:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1115:	    {
    #####: 1116:	      index = i;
    #####: 1117:	      break;
        -: 1118:	    }
    #####: 1119:	}
    #####: 1120:      if (index > -1)
        -: 1121:	{
        -: 1122:	  //trash both treasure cards
    #####: 1123:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1124:	  discardCard(index, currentPlayer, state, 1);
        -: 1125:
        -: 1126:	  //gain 4 Gold cards
    #####: 1127:	  for (i = 0; i < 4; i++)
        -: 1128:	    {
    #####: 1129:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1130:	    }
        -: 1131:				
        -: 1132:	  //return success
    #####: 1133:	  return 1;
        -: 1134:	}
        -: 1135:			
        -: 1136:      //no second treasure_map found in hand
    #####: 1137:      return -1;
        -: 1138:    }
        -: 1139:	
    #####: 1140:  return -1;
    13003: 1141:}
        -: 1142:
        -: 1143:int gardenEffect() {
    #####: 1144:printf("Your father was a hamster and your mother smelt of elderberries.");
    #####: 1145:return -1;
        -: 1146:}
        -: 1147:
        -: 1148:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1149:  int i;
        -: 1150:
     1001: 1151:  int tributeRevealedCards[2] = {-1, -1};
        -: 1152:  int temphand[MAX_HAND];// moved above the if statement
        -: 1153:
     1001: 1154:  int z = 0;// this is the counter for the temp hand
     4004: 1155:for (i = 0; i < 1; i++)
        -: 1156:	{
     1001: 1157:	  drawCard(currentPlayer, state);
     1001: 1158:	}
        -: 1159:			
        -: 1160:      //discard card from hand
     1001: 1161:      discardCard(handPos, currentPlayer, state, 0);
     1001: 1162:      return 0;
        -: 1163:}
        -: 1164:
        -: 1165:int council_room_effect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1166:      int i;
        -: 1167:      //+4 Cards
    30010: 1168:      for (i = 0; i < 4; i++)
        -: 1169:	{
    12004: 1170:	  drawCard(currentPlayer, state);
    12004: 1171:	}
        -: 1172:			
        -: 1173:      //+1 Buy
     3001: 1174:      state->numBuys++;
        -: 1175:			
        -: 1176:      //Each other player draws a card
    18006: 1177:      for (i = 0; i < state->numPlayers; i++)
        -: 1178:	{
     6002: 1179:	  if ( i != currentPlayer )
        -: 1180:	    {
     3001: 1181:	      drawCard(i, state);
     3001: 1182:	    }
     6002: 1183:	}
        -: 1184:			
        -: 1185:      //put played card in played card pile
        -: 1186:      //discardCard(handPos, currentPlayer, state, 0);
        -: 1187:			
     3001: 1188:      return 0;
        -: 1189:}
        -: 1190:
        -: 1191:int feastEffect(struct gameState *state, int currentPlayer, int choice1) {
        -: 1192:	int i;
        -: 1193:	int x;
        -: 1194:	int temphand[MAX_HAND];
        -: 1195:	
        -: 1196:	      //gain card with cost up to 5
        -: 1197:      //Backup hand
    70014: 1198:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    30006: 1199:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    30006: 1200:	state->hand[currentPlayer][i] = -1;//Set to nothing
    30006: 1201:      }
        -: 1202:      //Backup hand
        -: 1203:
        -: 1204:      //Update Coins for Buy
     5001: 1205:      updateCoins(currentPlayer, state, 5);
     5001: 1206:      x = 1;//Condition to loop on
    18002: 1207:      while( x == 1) {//Buy one card
     5001: 1208:	if (supplyCount(choice1, state) <= 0){
        -: 1209:	  if (DEBUG)
        -: 1210:	    printf("None of that card left, sorry!\n");
        -: 1211:
        -: 1212:	  if (DEBUG){
        -: 1213:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1214:	  }
        1: 1215:        return -1;
        -: 1216:	}
     5000: 1217:	else if (state->coins < getCost(choice1)){
     1000: 1218:	  printf("That card is too expensive!\n");
     1000: 1219:        return -1;
        -: 1220:
        -: 1221:	  if (DEBUG){
        -: 1222:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1223:	  }
        -: 1224:	}
        -: 1225:	else{
        -: 1226:
        -: 1227:	  if (DEBUG){
        -: 1228:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1229:	  }
        -: 1230:
     4000: 1231:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
     4000: 1232:	  x = 0;//No more buying cards
        -: 1233:
        -: 1234:	  if (DEBUG){
        -: 1235:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1236:	  }
        -: 1237:
        -: 1238:	}
        -: 1239:      }     
        -: 1240:
        -: 1241:      //Reset Hand
    56000: 1242:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    24000: 1243:	state->hand[currentPlayer][i] = temphand[i];
    24000: 1244:	temphand[i] = -1;
    24000: 1245:      }
        -: 1246:      //Reset Hand
        -: 1247:      			
     4000: 1248:      return 0;
        -: 1249:	
     5001: 1250:}
        -: 1251:
        -: 1252:int adventurerEffect(struct gameState *state, int currentPlayer) {
        -: 1253:	int temphand[MAX_HAND];// moved above the if statement
     4000: 1254:	int drawntreasure=0;
        -: 1255:	int cardDrawn;
     4000: 1256:	int z = 0;// this is the counter for the temp hand
        -: 1257:    
    32000: 1258:      while(drawntreasure<2){
    12000: 1259:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1260:	  shuffle(currentPlayer, state);
    #####: 1261:	}
    12000: 1262:	drawCard(currentPlayer, state);
    12000: 1263:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    20000: 1264:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     8000: 1265:	  drawntreasure++;
        -: 1266:	else{
     4000: 1267:	  temphand[z]=cardDrawn;
     4000: 1268:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4000: 1269:	  z++;
        -: 1270:	}
        -: 1271:      }
    16000: 1272:      while(z-1>=0){
     4000: 1273:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4000: 1274:	z=z-1;
        -: 1275:      }
     4000: 1276:      return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
     1001: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
     1001: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1001: 1287:      state->playedCardCount++;
     1001: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
     1001: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
     1001: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
     1001: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
     1001: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
     1001: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
     1001: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
     1001: 1314:  return 0;
        -: 1315:}
        -: 1316:
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
     4000: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
     4000: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
     4000: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
    #####: 1341:    }
        -: 1342:  else
        -: 1343:    {
     4000: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     4000: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
     4000: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
     4000: 1351:  return 0;
     4000: 1352:}
        -: 1353:
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
     5005: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
    60060: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
    25025: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
       15: 1366:	  state->coins += 1;
       15: 1367:	}
    25010: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
    #####: 1371:	}
    25010: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
    #####: 1375:	}	
    25025: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
     5005: 1379:  state->coins += bonus;
        -: 1380:
     5005: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c

->->->    - TESTING FUNCTION: handCard() -    <-<-<-


----  - TEST 1: Return Value -  ----

Return Value: 1, Expected: 0 


----  - TEST 2: Test Values-  ----

Card Val: 4, Expected: 4

Card Val: 4, Expected: 4

Card Val: 4, Expected: 4

Card Val: 1, Expected: 1

Card Val: 4, Expected: 4

->->  - TEST SUCCESSFULLY COMPLETED -  <-<-
File 'unittest1.c'
Lines executed:87.23% of 47
unittest1.c:creating 'unittest1.c.gcov'

File 'dominion.c'
Lines executed:30.82% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Robert Clifton on 4/18/17.
        -:    3://unittest1  unit test for the handCard function.
        -:    4://
        -:    5://to make and test: make unittestresults.out
        -:    6://
        -:    7:
        -:    8://gcc dominion.c rngs.c unittest1.c -o unittest1
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:#include <stdlib.h>
        -:   17:
        -:   18:int main() {
        -:   19:
        1:   20:    int pass = 1;
        -:   21:    int i, z;
        1:   22:    int x = 1000;
        -:   23:    int retVal;
        -:   24:
        -:   25:
        1:   26:    char testFunction[] = "handCard()";
        -:   27:    struct gameState G, copyG;
        1:   28:    int randSeed = 2;
        1:   29:    int numbPlayers = 2;
        -:   30:
        1:   31:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   32:                 sea_hag, tribute, smithy};
        -:   33:
        1:   34:    initializeGame(numbPlayers, k, randSeed, &G);
        -:   35:
        -:   36:
        1:   37:    printf("\n->->->    - TESTING FUNCTION: %s -    <-<-<-\n\n", testFunction);
        -:   38:
        -:   39:    //basic test of return value
        1:   40:    printf("\n----  - TEST 1: Return Value -  ----\n\n");
        1:   41:    z = 0;
     2002:   42:    for (i = 0; i < x; i++) {
     1000:   43:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   44:        copyG.whoseTurn = 0;
     1000:   45:        retVal = handCard(z, &copyG);
     1000:   46:        if (retVal != G.hand[0][z]) {
    #####:   47:            printf("TEST 1 Fail");
    #####:   48:            pass = 0;
    #####:   49:        }
     1000:   50:        z++;
     1000:   51:        if (z > copyG.handCount[0]) {
      166:   52:            z = 0;
      166:   53:        }
     1000:   54:    }
        1:   55:    printf("Return Value: %d, Expected: %d \n\n", retVal, 0);
        -:   56:
        -:   57:    //Test the card values after running function on copied struct
        1:   58:    printf("\n----  - TEST 2: Test Values-  ----\n\n");
        1:   59:    z = 0;
     2002:   60:    for (i = 0; i < x; i++) {
     1000:   61:        memcpy(&copyG, &G, sizeof(struct gameState));
     1000:   62:        copyG.whoseTurn = 0;
     1000:   63:        handCard(z, &copyG);
     1000:   64:        z++;
     1000:   65:        if (z > copyG.handCount[0]) {
      166:   66:            z = 0;
      166:   67:        }
     1000:   68:    }
        1:   69:    x = G.handCount[0];
       12:   70:    for (i = 0; i < x; i++ ) {
        5:   71:        printf("Card Val: %d, Expected: %d\n\n", copyG.hand[0][i], G.hand[0][i]);
        5:   72:        if (copyG.hand[0][i]!= G.hand[0][i]) {
    #####:   73:            pass = 0;
    #####:   74:        }
        5:   75:    }
        -:   76:
        -:   77:    //Final bool check to see if testing passed or failed,  prints result to standard out
        1:   78:    if (pass) {
        1:   79:        printf("->->  - TEST SUCCESSFULLY COMPLETED -  <-<-\n");
        1:   80:    } else{
    #####:   81:        printf("->->  - TEST FAILED -  <-<-\n");
        -:   82:    }
        -:   83:
        1:   84:    return 0;
        -:   85:};
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://test message
        -:    9:
        -:   10:int smithyEffect(struct gameState *state, int currentPlayer, int handPos);
        -:   11:
        -:   12:int council_room_effect(struct gameState *state, int currentPlayer, int handPos);
        -:   13:
        -:   14:int adventurerEffect(struct gameState *state, int currentPlayer);
        -:   15:
        -:   16:int feastEffect(struct gameState *state, int currentPlayer, int choice1);
        -:   17:
        -:   18:int gardenEffect();
        -:   19:
        -:   20:
        -:   21:int compare(const void* a, const void* b) {
      140:   22:  if (*(int*)a > *(int*)b)
    #####:   23:    return 1;
      140:   24:  if (*(int*)a < *(int*)b)
       50:   25:    return -1;
       90:   26:  return 0;
      140:   27:}
        -:   28:
        -:   29:struct gameState* newGame() {
    #####:   30:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   31:  return g;
        -:   32:}
        -:   33:
        -:   34:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   35:		  int k8, int k9, int k10) {
    #####:   36:  int* k = malloc(10 * sizeof(int));
    #####:   37:  k[0] = k1;
    #####:   38:  k[1] = k2;
    #####:   39:  k[2] = k3;
    #####:   40:  k[3] = k4;
    #####:   41:  k[4] = k5;
    #####:   42:  k[5] = k6;
    #####:   43:  k[6] = k7;
    #####:   44:  k[7] = k8;
    #####:   45:  k[8] = k9;
    #####:   46:  k[9] = k10;
    #####:   47:  return k;
        -:   48:}
        -:   49:
        -:   50:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   51:		   struct gameState *state) {
        -:   52:
        -:   53:  int i;
        -:   54:  int j;
        -:   55:  int it;			
        -:   56:  //set up random number generator
        5:   57:  SelectStream(1);
        5:   58:  PutSeed((long)randomSeed);
        -:   59:  
        -:   60:  //check number of players
       10:   61:  if (numPlayers > MAX_PLAYERS || numPlayers < 0)
        -:   62:    {
    #####:   63:      return -1;
        -:   64:    }
        -:   65:
        -:   66:  //set number of players
        5:   67:  state->numPlayers = numPlayers;
        -:   68:
        -:   69:  //check selected kingdom cards are different
      110:   70:  for (i = 0; i < 10; i++)
        -:   71:    {
     1100:   72:      for (j = 0; j < 10; j++)
        -:   73:        {
      950:   74:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   75:	    {
    #####:   76:	      return -1;
        -:   77:	    }
      500:   78:        }
       50:   79:    }
        -:   80:
        -:   81:
        -:   82:  //initialize supply
        -:   83:  ///////////////////////////////
        -:   84:
        -:   85:  //set number of Curse cards
        5:   86:  if (numPlayers == 2)
        -:   87:    {
        5:   88:      state->supplyCount[curse] = 10;
        5:   89:    }
    #####:   90:  else if (numPlayers == 3)
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 20;
    #####:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[curse] = 30;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Victory cards
        5:  100:  if (numPlayers == 2)
        -:  101:    {
        5:  102:      state->supplyCount[estate] = 8;
        5:  103:      state->supplyCount[duchy] = 8;
        5:  104:      state->supplyCount[province] = 8;
        5:  105:    }
        -:  106:  else
        -:  107:    {
    #####:  108:      state->supplyCount[estate] = 12;
    #####:  109:      state->supplyCount[duchy] = 12;
    #####:  110:      state->supplyCount[province] = 12;
        -:  111:    }
        -:  112:
        -:  113:  //set number of Treasure cards
        5:  114:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  115:  state->supplyCount[silver] = 40;
        5:  116:  state->supplyCount[gold] = 30;
        -:  117:
        -:  118:  //set number of Kingdom cards
      210:  119:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  120:    {
     1650:  121:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  122:	{
      775:  123:	  if (kingdomCards[j] == i)
        -:  124:	    {
        -:  125:	      //check if card is a 'Victory' Kingdom card
      100:  126:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  127:		{
        5:  128:		  if (numPlayers == 2){ 
        5:  129:		    state->supplyCount[i] = 8; 
        5:  130:		  }
    #####:  131:		  else{ state->supplyCount[i] = 12; }
        5:  132:		}
        -:  133:	      else
        -:  134:		{
       45:  135:		  state->supplyCount[i] = 10;
        -:  136:		}
       50:  137:	      break;
        -:  138:	    }
        -:  139:	  else    //card is not in the set choosen for the game
        -:  140:	    {
      725:  141:	      state->supplyCount[i] = -1;
        -:  142:	    }
      725:  143:	}
        -:  144:
      100:  145:    }
        -:  146:
        -:  147:  ////////////////////////
        -:  148:  //supply intilization complete
        -:  149:
        -:  150:  //set player decks
       30:  151:  for (i = 0; i < numPlayers; i++)
        -:  152:    {
       10:  153:      state->deckCount[i] = 0;
       80:  154:      for (j = 0; j < 3; j++)
        -:  155:	{
       30:  156:	  state->deck[i][j] = estate;
       30:  157:	  state->deckCount[i]++;
       30:  158:	}
      160:  159:      for (j = 3; j < 10; j++)
        -:  160:	{
       70:  161:	  state->deck[i][j] = copper;
       70:  162:	  state->deckCount[i]++;		
       70:  163:	}
       10:  164:    }
        -:  165:
        -:  166:  //shuffle player decks
       30:  167:  for (i = 0; i < numPlayers; i++)
        -:  168:    {
       10:  169:      if ( shuffle(i, state) < 0 )
        -:  170:	{
    #####:  171:	  return -1;
        -:  172:	}
       10:  173:    }
        -:  174:
        -:  175:  //draw player hands
       30:  176:  for (i = 0; i < numPlayers; i++)
        -:  177:    {  
        -:  178:      //initialize hand size to zero
       10:  179:      state->handCount[i] = 0;
       10:  180:      state->discardCount[i] = 0;
        -:  181:      //draw 5 cards
        -:  182:      // for (j = 0; j < 5; j++)
        -:  183:      //	{
        -:  184:      //	  drawCard(i, state);
        -:  185:      //	}
       10:  186:    }
        -:  187:  
        -:  188:  //set embargo tokens to 0 for all supply piles
      280:  189:  for (i = 0; i <= treasure_map; i++)
        -:  190:    {
      135:  191:      state->embargoTokens[i] = 0;
      135:  192:    }
        -:  193:
        -:  194:  //initialize first player's turn
        5:  195:  state->outpostPlayed = 0;
        5:  196:  state->phase = 0;
        5:  197:  state->numActions = 1;
        5:  198:  state->numBuys = 1;
        5:  199:  state->playedCardCount = 0;
        5:  200:  state->whoseTurn = 0;
        5:  201:  state->handCount[state->whoseTurn] = 0;
        -:  202:  //int it; move to top
        -:  203:
        -:  204:  //Moved draw cards to here, only drawing at the start of a turn
       60:  205:  for (it = 0; it < 5; it++){
       25:  206:    drawCard(state->whoseTurn, state);
       25:  207:  }
        -:  208:
        5:  209:  updateCoins(state->whoseTurn, state, 0);
        -:  210:
        5:  211:  return 0;
        5:  212:}
        -:  213:
        -:  214:int shuffle(int player, struct gameState *state) {
        -:  215: 
        -:  216:
        -:  217:  int newDeck[MAX_DECK];
       10:  218:  int newDeckPos = 0;
        -:  219:  int card;
        -:  220:  int i;
        -:  221:
       10:  222:  if (state->deckCount[player] < 1)
    #####:  223:    return -1;
       10:  224:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  225:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  226:
      220:  227:  while (state->deckCount[player] > 0) {
      100:  228:    card = floor(Random() * state->deckCount[player]);
      100:  229:    newDeck[newDeckPos] = state->deck[player][card];
      100:  230:    newDeckPos++;
      712:  231:    for (i = card; i < state->deckCount[player]-1; i++) {
      256:  232:      state->deck[player][i] = state->deck[player][i+1];
      256:  233:    }
      100:  234:    state->deckCount[player]--;
        -:  235:  }
      220:  236:  for (i = 0; i < newDeckPos; i++) {
      100:  237:    state->deck[player][i] = newDeck[i];
      100:  238:    state->deckCount[player]++;
      100:  239:  }
        -:  240:
       10:  241:  return 0;
       10:  242:}
        -:  243:
        -:  244:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  245:{	
        -:  246:  int card;
    #####:  247:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  248:
        -:  249:  //check if it is the right phase
    #####:  250:  if (state->phase != 0)
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //check if player has enough actions
    #####:  256:  if ( state->numActions < 1 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //get card played
    #####:  262:  card = handCard(handPos, state);
        -:  263:	
        -:  264:  //check if selected card is an action
    #####:  265:  if ( card < adventurer || card > treasure_map )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //play card
    #####:  271:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  272:    {
    #####:  273:      return -1;
        -:  274:    }
        -:  275:	
        -:  276:  //reduce number of actions
    #####:  277:  state->numActions--;
        -:  278:
        -:  279:  //update coins (Treasure cards may be added with card draws)
    #####:  280:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  281:	
    #####:  282:  return 0;
    #####:  283:}
        -:  284:
        -:  285:int buyCard(int supplyPos, struct gameState *state) {
        -:  286:  int who;
        -:  287:  if (DEBUG){
        -:  288:    printf("Entering buyCard...\n");
        -:  289:  }
        -:  290:
        -:  291:  // I don't know what to do about the phase thing.
        -:  292:
    #####:  293:  who = state->whoseTurn;
        -:  294:
    #####:  295:  if (state->numBuys < 1){
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (supplyCount(supplyPos, state) <1){
        -:  300:    if (DEBUG)
        -:  301:      printf("There are not any of that type of card left\n");
    #####:  302:    return -1;
    #####:  303:  } else if (state->coins < getCost(supplyPos)){
        -:  304:    if (DEBUG)
        -:  305:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  306:    return -1;
        -:  307:  } else {
    #####:  308:    state->phase=1;
        -:  309:    //state->supplyCount[supplyPos]--;
    #####:  310:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  311:
    #####:  312:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  313:    state->numBuys--;
        -:  314:    if (DEBUG)
        -:  315:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  316:  }
        -:  317:
        -:  318:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  319:  //state->discardCount[who]++;
        -:  320:
    #####:  321:  return 0;
    #####:  322:}
        -:  323:
        -:  324:int numHandCards(struct gameState *state) {
    14000:  325:  return state->handCount[ whoseTurn(state) ];
        -:  326:}
        -:  327:
        -:  328:int handCard(int handPos, struct gameState *state) {
    22000:  329:  int currentPlayer = whoseTurn(state);
    22000:  330:  return state->hand[currentPlayer][handPos];
        -:  331:}
        -:  332:
        -:  333:int supplyCount(int card, struct gameState *state) {
     9001:  334:  return state->supplyCount[card];
        -:  335:}
        -:  336:
        -:  337:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  338:  int i;
    #####:  339:  int count = 0;
        -:  340:
    #####:  341:  for (i = 0; i < state->deckCount[player]; i++)
        -:  342:    {
    #####:  343:      if (state->deck[player][i] == card) count++;
    #####:  344:    }
        -:  345:
    #####:  346:  for (i = 0; i < state->handCount[player]; i++)
        -:  347:    {
    #####:  348:      if (state->hand[player][i] == card) count++;
    #####:  349:    }
        -:  350:
    #####:  351:  for (i = 0; i < state->discardCount[player]; i++)
        -:  352:    {
    #####:  353:      if (state->discard[player][i] == card) count++;
    #####:  354:    }
        -:  355:
    #####:  356:  return count;
        -:  357:}
        -:  358:
        -:  359:int whoseTurn(struct gameState *state) {
    49014:  360:  return state->whoseTurn;
        -:  361:}
        -:  362:
        -:  363:int endTurn(struct gameState *state) {
        -:  364:  int k;
        -:  365:  int i;
    #####:  366:  int currentPlayer = whoseTurn(state);
        -:  367:  
        -:  368:  //Discard hand
    #####:  369:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  370:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  371:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  372:  }
    #####:  373:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  374:    
        -:  375:  //Code for determining the player
    #####:  376:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  377:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  378:  }
        -:  379:  else{
    #####:  380:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  381:  }
        -:  382:
    #####:  383:  state->outpostPlayed = 0;
    #####:  384:  state->phase = 0;
    #####:  385:  state->numActions = 1;
    #####:  386:  state->coins = 0;
    #####:  387:  state->numBuys = 1;
    #####:  388:  state->playedCardCount = 0;
    #####:  389:  state->handCount[state->whoseTurn] = 0;
        -:  390:
        -:  391:  //int k; move to top
        -:  392:  //Next player draws hand
    #####:  393:  for (k = 0; k < 5; k++){
    #####:  394:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  395:  }
        -:  396:
        -:  397:  //Update money
    #####:  398:  updateCoins(state->whoseTurn, state , 0);
        -:  399:
    #####:  400:  return 0;
        -:  401:}
        -:  402:
        -:  403:int isGameOver(struct gameState *state) {
        -:  404:  int i;
        -:  405:  int j;
        -:  406:	
        -:  407:  //if stack of Province cards is empty, the game ends
    #####:  408:  if (state->supplyCount[province] == 0)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
        -:  413:  //if three supply pile are at 0, the game ends
    #####:  414:  j = 0;
    #####:  415:  for (i = 0; i < 25; i++)
        -:  416:    {
    #####:  417:      if (state->supplyCount[i] == 0)
        -:  418:	{
    #####:  419:	  j++;
    #####:  420:	}
    #####:  421:    }
    #####:  422:  if ( j >= 3)
        -:  423:    {
    #####:  424:      return 1;
        -:  425:    }
        -:  426:
    #####:  427:  return 0;
    #####:  428:}
        -:  429:
        -:  430:int scoreFor (int player, struct gameState *state) {
        -:  431:
        -:  432:  int i;
    #####:  433:  int score = 0;
        -:  434:  //score from hand
    #####:  435:  for (i = 0; i < state->handCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  443:    }
        -:  444:
        -:  445:  //score from discard
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  454:    }
        -:  455:
        -:  456:  //score from deck
    #####:  457:  for (i = 0; i < state->discardCount[player]; i++)
        -:  458:    {
    #####:  459:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  460:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  461:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  462:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  463:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  465:    }
        -:  466:
    #####:  467:  return score;
        -:  468:}
        -:  469:
        -:  470:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  471:  int i;	
        -:  472:  int j;
        -:  473:  int highScore;
        -:  474:  int currentPlayer;
        -:  475:
        -:  476:  //get score for each player
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:    {
        -:  479:      //set unused player scores to -9999
    #####:  480:      if (i >= state->numPlayers)
        -:  481:	{
    #####:  482:	  players[i] = -9999;
    #####:  483:	}
        -:  484:      else
        -:  485:	{
    #####:  486:	  players[i] = scoreFor (i, state);
        -:  487:	}
    #####:  488:    }
        -:  489:
        -:  490:  //find highest score
    #####:  491:  j = 0;
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if (players[i] > players[j])
        -:  495:	{
    #####:  496:	  j = i;
    #####:  497:	}
    #####:  498:    }
    #####:  499:  highScore = players[j];
        -:  500:
        -:  501:  //add 1 to players who had less turns
    #####:  502:  currentPlayer = whoseTurn(state);
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if ( players[i] == highScore && i > currentPlayer )
        -:  506:	{
    #####:  507:	  players[i]++;
    #####:  508:	}
    #####:  509:    }
        -:  510:
        -:  511:  //find new highest score
    #####:  512:  j = 0;
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:      if ( players[i] > players[j] )
        -:  516:	{
    #####:  517:	  j = i;
    #####:  518:	}
    #####:  519:    }
    #####:  520:  highScore = players[j];
        -:  521:
        -:  522:  //set winners in array to 1 and rest to 0
    #####:  523:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  524:    {
    #####:  525:      if ( players[i] == highScore )
        -:  526:	{
    #####:  527:	  players[i] = 1;
    #####:  528:	}
        -:  529:      else
        -:  530:	{
    #####:  531:	  players[i] = 0;
        -:  532:	}
    #####:  533:    }
        -:  534:
    #####:  535:  return 0;
        -:  536:}
        -:  537:
        -:  538:int drawCard(int player, struct gameState *state)
        -:  539:{	int count;
        -:  540:  int deckCounter;
    28031:  541:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  542:    
        -:  543:    //Step 1 Shuffle the discard pile back into a deck
        -:  544:    int i;
        -:  545:    //Move discard to deck
    #####:  546:    for (i = 0; i < state->discardCount[player];i++){
    #####:  547:      state->deck[player][i] = state->discard[player][i];
    #####:  548:      state->discard[player][i] = -1;
    #####:  549:    }
        -:  550:
    #####:  551:    state->deckCount[player] = state->discardCount[player];
    #####:  552:    state->discardCount[player] = 0;//Reset discard
        -:  553:
        -:  554:    //Shufffle the deck
    #####:  555:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  556:   
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  559:    }
        -:  560:    
    #####:  561:    state->discardCount[player] = 0;
        -:  562:
        -:  563:    //Step 2 Draw Card
    #####:  564:    count = state->handCount[player];//Get current player's hand count
        -:  565:    
        -:  566:    if (DEBUG){//Debug statements
        -:  567:      printf("Current hand count: %d\n", count);
        -:  568:    }
        -:  569:    
    #####:  570:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  571:
    #####:  572:    if (deckCounter == 0)
    #####:  573:      return -1;
        -:  574:
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
    #####:  578:  }
        -:  579:
        -:  580:  else{
    28031:  581:    int count = state->handCount[player];//Get current hand count for player
        -:  582:    int deckCounter;
        -:  583:    if (DEBUG){//Debug statements
        -:  584:      printf("Current hand count: %d\n", count);
        -:  585:    }
        -:  586:
    28031:  587:    deckCounter = state->deckCount[player];//Create holder for the deck count
    28031:  588:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    28031:  589:    state->deckCount[player]--;
    28031:  590:    state->handCount[player]++;//Increment hand count
        -:  591:  }
        -:  592:
    28031:  593:  return 0;
    28031:  594:}
        -:  595:
        -:  596:int getCost(int cardNumber)
        -:  597:{
     5000:  598:  switch( cardNumber ) 
        -:  599:    {
        -:  600:    case curse:
     1000:  601:      return 0;
        -:  602:    case estate:
    #####:  603:      return 2;
        -:  604:    case duchy:
    #####:  605:      return 5;
        -:  606:    case province:
    #####:  607:      return 8;
        -:  608:    case copper:
    #####:  609:      return 0;
        -:  610:    case silver:
     3000:  611:      return 3;
        -:  612:    case gold:
     1000:  613:      return 6;
        -:  614:    case adventurer:
    #####:  615:      return 6;
        -:  616:    case council_room:
    #####:  617:      return 5;
        -:  618:    case feast:
    #####:  619:      return 4;
        -:  620:    case gardens:
    #####:  621:      return 4;
        -:  622:    case mine:
    #####:  623:      return 5;
        -:  624:    case remodel:
    #####:  625:      return 4;
        -:  626:    case smithy:
    #####:  627:      return 4;
        -:  628:    case village:
    #####:  629:      return 3;
        -:  630:    case baron:
    #####:  631:      return 4;
        -:  632:    case great_hall:
    #####:  633:      return 3;
        -:  634:    case minion:
    #####:  635:      return 5;
        -:  636:    case steward:
    #####:  637:      return 3;
        -:  638:    case tribute:
    #####:  639:      return 5;
        -:  640:    case ambassador:
    #####:  641:      return 3;
        -:  642:    case cutpurse:
    #####:  643:      return 4;
        -:  644:    case embargo: 
    #####:  645:      return 2;
        -:  646:    case outpost:
    #####:  647:      return 5;
        -:  648:    case salvager:
    #####:  649:      return 4;
        -:  650:    case sea_hag:
    #####:  651:      return 4;
        -:  652:    case treasure_map:
    #####:  653:      return 4;
        -:  654:    }
        -:  655:	
    #####:  656:  return -1;
     5000:  657:}
        -:  658:
        -:  659:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  660:{
        -:  661:  int i;
        -:  662:  int j;
        -:  663:  int k;
        -:  664:  int x;
        -:  665:  int index;
    13003:  666:  int currentPlayer = whoseTurn(state);
    13003:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
    13003:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
    13003:  671:  int drawntreasure=0;
        -:  672:  int cardDrawn;
    13003:  673:  int z = 0;// this is the counter for the temp hand
    13003:  674:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  675:    nextPlayer = 0;
    #####:  676:  }
        -:  677:  //uses switch to select card and perform actions
    13003:  678:  switch( card ) 
        -:  679:    {
        -:  680:		  
        -:  681:   case adventurer:
     4000:  682:	return adventurerEffect(state, currentPlayer);
        -:  683:			
        -:  684:    case council_room:
     3001:  685:		return council_room_effect(state, currentPlayer, handPos);
        -:  686:			
        -:  687:    case feast:
     5001:  688:		return feastEffect(state, currentPlayer, choice1);
        -:  689:			
        -:  690:    case gardens:
    #####:  691:      return gardenEffect();
        -:  692:			
        -:  693:    case mine:
    #####:  694:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  695:
    #####:  696:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  697:	{
    #####:  698:	  return -1;
        -:  699:	}
        -:  700:		
    #####:  701:      if (choice2 > treasure_map || choice2 < curse)
        -:  702:	{
    #####:  703:	  return -1;
        -:  704:	}
        -:  705:
    #####:  706:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  707:	{
    #####:  708:	  return -1;
        -:  709:	}
        -:  710:
    #####:  711:      gainCard(choice2, state, 2, currentPlayer);
        -:  712:
        -:  713:      //discard card from hand
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:
        -:  716:      //discard trashed card
    #####:  717:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  718:	{
    #####:  719:	  if (state->hand[currentPlayer][i] == j)
        -:  720:	    {
    #####:  721:	      discardCard(i, currentPlayer, state, 0);			
    #####:  722:	      break;
        -:  723:	    }
    #####:  724:	}
        -:  725:			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case remodel:
    #####:  729:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  730:
    #####:  731:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  732:	{
    #####:  733:	  return -1;
        -:  734:	}
        -:  735:
    #####:  736:      gainCard(choice2, state, 0, currentPlayer);
        -:  737:
        -:  738:      //discard card from hand
    #####:  739:      discardCard(handPos, currentPlayer, state, 0);
        -:  740:
        -:  741:      //discard trashed card
    #####:  742:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  743:	{
    #####:  744:	  if (state->hand[currentPlayer][i] == j)
        -:  745:	    {
    #####:  746:	      discardCard(i, currentPlayer, state, 0);			
    #####:  747:	      break;
        -:  748:	    }
    #####:  749:	}
        -:  750:
        -:  751:
    #####:  752:      return 0;
        -:  753:		
        -:  754:    case smithy:
        -:  755:      //+3 Cards
     1001:  756:      return smithyEffect(state, currentPlayer, handPos);
        -:  757:      
        -:  758:		
        -:  759:    case village:
        -:  760:      //+1 Card
    #####:  761:      drawCard(currentPlayer, state);
        -:  762:			
        -:  763:      //+2 Actions
    #####:  764:      state->numActions = state->numActions + 2;
        -:  765:			
        -:  766:      //discard played card from hand
    #####:  767:      discardCard(handPos, currentPlayer, state, 0);
    #####:  768:      return 0;
        -:  769:		
        -:  770:    case baron:
    #####:  771:      state->numBuys++;//Increase buys by 1!
    #####:  772:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  773:	int p = 0;//Iterator for hand!
    #####:  774:	int card_not_discarded = 1;//Flag for discard set!
    #####:  775:	while(card_not_discarded){
    #####:  776:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  777:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  778:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  779:	    state->discardCount[currentPlayer]++;
    #####:  780:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  781:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  782:	    }
    #####:  783:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  784:	    state->handCount[currentPlayer]--;
    #####:  785:	    card_not_discarded = 0;//Exit the loop
    #####:  786:	  }
    #####:  787:	  else if (p > state->handCount[currentPlayer]){
        -:  788:	    if(DEBUG) {
        -:  789:	      printf("No estate cards in your hand, invalid choice\n");
        -:  790:	      printf("Must gain an estate if there are any\n");
        -:  791:	    }
    #####:  792:	    if (supplyCount(estate, state) > 0){
    #####:  793:	      gainCard(estate, state, 0, currentPlayer);
    #####:  794:	      state->supplyCount[estate]--;//Decrement estates
    #####:  795:	      if (supplyCount(estate, state) == 0){
    #####:  796:		isGameOver(state);
    #####:  797:	      }
    #####:  798:	    }
    #####:  799:	    card_not_discarded = 0;//Exit the loop
    #####:  800:	  }
        -:  801:			    
        -:  802:	  else{
    #####:  803:	    p++;//Next card
        -:  804:	  }
        -:  805:	}
    #####:  806:      }
        -:  807:			    
        -:  808:      else{
    #####:  809:	if (supplyCount(estate, state) > 0){
    #####:  810:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  811:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  812:	  if (supplyCount(estate, state) == 0){
    #####:  813:	    isGameOver(state);
    #####:  814:	  }
    #####:  815:	}
        -:  816:      }
        -:  817:	    
        -:  818:      
    #####:  819:      return 0;
        -:  820:		
        -:  821:    case great_hall:
        -:  822:      //+1 Card
    #####:  823:      drawCard(currentPlayer, state);
        -:  824:			
        -:  825:      //+1 Actions
    #####:  826:      state->numActions++;
        -:  827:			
        -:  828:      //discard card from hand
    #####:  829:      discardCard(handPos, currentPlayer, state, 0);
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case minion:
        -:  833:      //+1 action
    #####:  834:      state->numActions++;
        -:  835:			
        -:  836:      //discard card from hand
    #####:  837:      discardCard(handPos, currentPlayer, state, 0);
        -:  838:			
    #####:  839:      if (choice1)		//+2 coins
        -:  840:	{
    #####:  841:	  state->coins = state->coins + 2;
    #####:  842:	}
        -:  843:			
    #####:  844:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  845:	{
        -:  846:	  //discard hand
    #####:  847:	  while(numHandCards(state) > 0)
        -:  848:	    {
    #####:  849:	      discardCard(handPos, currentPlayer, state, 0);
        -:  850:	    }
        -:  851:				
        -:  852:	  //draw 4
    #####:  853:	  for (i = 0; i < 4; i++)
        -:  854:	    {
    #####:  855:	      drawCard(currentPlayer, state);
    #####:  856:	    }
        -:  857:				
        -:  858:	  //other players discard hand and redraw if hand size > 4
    #####:  859:	  for (i = 0; i < state->numPlayers; i++)
        -:  860:	    {
    #####:  861:	      if (i != currentPlayer)
        -:  862:		{
    #####:  863:		  if ( state->handCount[i] > 4 )
        -:  864:		    {
        -:  865:		      //discard hand
    #####:  866:		      while( state->handCount[i] > 0 )
        -:  867:			{
    #####:  868:			  discardCard(handPos, i, state, 0);
        -:  869:			}
        -:  870:							
        -:  871:		      //draw 4
    #####:  872:		      for (j = 0; j < 4; j++)
        -:  873:			{
    #####:  874:			  drawCard(i, state);
    #####:  875:			}
    #####:  876:		    }
    #####:  877:		}
    #####:  878:	    }
        -:  879:				
    #####:  880:	}
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case steward:
    #####:  884:      if (choice1 == 1)
        -:  885:	{
        -:  886:	  //+2 cards
    #####:  887:	  drawCard(currentPlayer, state);
    #####:  888:	  drawCard(currentPlayer, state);
    #####:  889:	}
    #####:  890:      else if (choice1 == 2)
        -:  891:	{
        -:  892:	  //+2 coins
    #####:  893:	  state->coins = state->coins + 2;
    #####:  894:	}
        -:  895:      else
        -:  896:	{
        -:  897:	  //trash 2 cards in hand
    #####:  898:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  899:	  discardCard(choice3, currentPlayer, state, 1);
        -:  900:	}
        -:  901:			
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case tribute:
    #####:  907:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  908:	if (state->deckCount[nextPlayer] > 0){
    #####:  909:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  910:	  state->deckCount[nextPlayer]--;
    #####:  911:	}
    #####:  912:	else if (state->discardCount[nextPlayer] > 0){
    #####:  913:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  914:	  state->discardCount[nextPlayer]--;
    #####:  915:	}
        -:  916:	else{
        -:  917:	  //No Card to Reveal
        -:  918:	  if (DEBUG){
        -:  919:	    printf("No cards to reveal\n");
        -:  920:	  }
        -:  921:	}
    #####:  922:      }
        -:  923:	    
        -:  924:      else{
    #####:  925:	if (state->deckCount[nextPlayer] == 0){
    #####:  926:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  927:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  928:	    state->deckCount[nextPlayer]++;
    #####:  929:	    state->discard[nextPlayer][i] = -1;
    #####:  930:	    state->discardCount[nextPlayer]--;
    #####:  931:	  }
        -:  932:			    
    #####:  933:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  934:	} 
    #####:  935:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  937:	state->deckCount[nextPlayer]--;
    #####:  938:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:	state->deckCount[nextPlayer]--;
        -:  941:      }    
        -:  942:		       
    #####:  943:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  944:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  945:	state->playedCardCount++;
    #####:  946:	tributeRevealedCards[1] = -1;
    #####:  947:      }
        -:  948:
    #####:  949:      for (i = 0; i <= 2; i ++){
    #####:  950:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  951:	  state->coins += 2;
    #####:  952:	}
        -:  953:		    
    #####:  954:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
        -:  958:	else{//Action Card
    #####:  959:	  state->numActions = state->numActions + 2;
        -:  960:	}
    #####:  961:      }
        -:  962:	    
    #####:  963:      return 0;
        -:  964:		
        -:  965:    case ambassador:
    #####:  966:      j = 0;		//used to check if player has enough cards to discard
        -:  967:
    #####:  968:      if (choice2 > 2 || choice2 < 0)
        -:  969:	{
    #####:  970:	  return -1;				
        -:  971:	}
        -:  972:
    #####:  973:      if (choice1 == handPos)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  979:	{
    #####:  980:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  981:	    {
    #####:  982:	      j++;
    #####:  983:	    }
    #####:  984:	}
    #####:  985:      if (j < choice2)
        -:  986:	{
    #####:  987:	  return -1;				
        -:  988:	}
        -:  989:
        -:  990:      if (DEBUG) 
        -:  991:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  992:
        -:  993:      //increase supply count for choosen card by amount being discarded
    #####:  994:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  995:			
        -:  996:      //each other player gains a copy of revealed card
    #####:  997:      for (i = 0; i < state->numPlayers; i++)
        -:  998:	{
    #####:  999:	  if (i != currentPlayer)
        -: 1000:	    {
    #####: 1001:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1002:	    }
    #####: 1003:	}
        -: 1004:
        -: 1005:      //discard played card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1007:
        -: 1008:      //trash copies of cards returned to supply
    #####: 1009:      for (j = 0; j < choice2; j++)
        -: 1010:	{
    #####: 1011:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1012:	    {
    #####: 1013:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1014:		{
    #####: 1015:		  discardCard(i, currentPlayer, state, 1);
    #####: 1016:		  break;
        -: 1017:		}
    #####: 1018:	    }
    #####: 1019:	}			
        -: 1020:
    #####: 1021:      return 0;
        -: 1022:		
        -: 1023:    case cutpurse:
        -: 1024:
    #####: 1025:      updateCoins(currentPlayer, state, 2);
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
        -: 1029:	    {
    #####: 1030:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1031:		{
    #####: 1032:		  if (state->hand[i][j] == copper)
        -: 1033:		    {
    #####: 1034:		      discardCard(j, i, state, 0);
    #####: 1035:		      break;
        -: 1036:		    }
    #####: 1037:		  if (j == state->handCount[i])
        -: 1038:		    {
    #####: 1039:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1040:			{
        -: 1041:			  if (DEBUG)
        -: 1042:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1043:			}	
    #####: 1044:		      break;
        -: 1045:		    }		
    #####: 1046:		}
        -: 1047:					
    #####: 1048:	    }
        -: 1049:				
    #####: 1050:	}				
        -: 1051:
        -: 1052:      //discard played card from hand
    #####: 1053:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:
        -: 1057:		
        -: 1058:    case embargo: 
        -: 1059:      //+2 Coins
    #####: 1060:      state->coins = state->coins + 2;
        -: 1061:			
        -: 1062:      //see if selected pile is in play
    #####: 1063:      if ( state->supplyCount[choice1] == -1 )
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:			
        -: 1068:      //add embargo token to selected supply pile
    #####: 1069:      state->embargoTokens[choice1]++;
        -: 1070:			
        -: 1071:      //trash card
    #####: 1072:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case outpost:
        -: 1076:      //set outpost flag
    #####: 1077:      state->outpostPlayed++;
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case salvager:
        -: 1084:      //+1 buy
    #####: 1085:      state->numBuys++;
        -: 1086:			
    #####: 1087:      if (choice1)
        -: 1088:	{
        -: 1089:	  //gain coins equal to trashed card
    #####: 1090:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1091:	  //trash card
    #####: 1092:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1093:	}
        -: 1094:			
        -: 1095:      //discard card
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1097:      return 0;
        -: 1098:		
        -: 1099:    case sea_hag:
    #####: 1100:      for (i = 0; i < state->numPlayers; i++){
    #####: 1101:	if (i != currentPlayer){
    #####: 1102:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1103:	  state->discardCount[i]++;
    #####: 1104:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1105:	}
    #####: 1106:      }
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case treasure_map:
        -: 1110:      //search hand for another treasure_map
    #####: 1111:      index = -1;
    #####: 1112:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1113:	{
    #####: 1114:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1115:	    {
    #####: 1116:	      index = i;
    #####: 1117:	      break;
        -: 1118:	    }
    #####: 1119:	}
    #####: 1120:      if (index > -1)
        -: 1121:	{
        -: 1122:	  //trash both treasure cards
    #####: 1123:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1124:	  discardCard(index, currentPlayer, state, 1);
        -: 1125:
        -: 1126:	  //gain 4 Gold cards
    #####: 1127:	  for (i = 0; i < 4; i++)
        -: 1128:	    {
    #####: 1129:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1130:	    }
        -: 1131:				
        -: 1132:	  //return success
    #####: 1133:	  return 1;
        -: 1134:	}
        -: 1135:			
        -: 1136:      //no second treasure_map found in hand
    #####: 1137:      return -1;
        -: 1138:    }
        -: 1139:	
    #####: 1140:  return -1;
    13003: 1141:}
        -: 1142:
        -: 1143:int gardenEffect() {
    #####: 1144:printf("Your father was a hamster and your mother smelt of elderberries.");
    #####: 1145:return -1;
        -: 1146:}
        -: 1147:
        -: 1148:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1149:  int i;
        -: 1150:
     1001: 1151:  int tributeRevealedCards[2] = {-1, -1};
        -: 1152:  int temphand[MAX_HAND];// moved above the if statement
        -: 1153:
     1001: 1154:  int z = 0;// this is the counter for the temp hand
     4004: 1155:for (i = 0; i < 1; i++)
        -: 1156:	{
     1001: 1157:	  drawCard(currentPlayer, state);
     1001: 1158:	}
        -: 1159:			
        -: 1160:      //discard card from hand
     1001: 1161:      discardCard(handPos, currentPlayer, state, 0);
     1001: 1162:      return 0;
        -: 1163:}
        -: 1164:
        -: 1165:int council_room_effect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1166:      int i;
        -: 1167:      //+4 Cards
    30010: 1168:      for (i = 0; i < 4; i++)
        -: 1169:	{
    12004: 1170:	  drawCard(currentPlayer, state);
    12004: 1171:	}
        -: 1172:			
        -: 1173:      //+1 Buy
     3001: 1174:      state->numBuys++;
        -: 1175:			
        -: 1176:      //Each other player draws a card
    18006: 1177:      for (i = 0; i < state->numPlayers; i++)
        -: 1178:	{
     6002: 1179:	  if ( i != currentPlayer )
        -: 1180:	    {
     3001: 1181:	      drawCard(i, state);
     3001: 1182:	    }
     6002: 1183:	}
        -: 1184:			
        -: 1185:      //put played card in played card pile
        -: 1186:      //discardCard(handPos, currentPlayer, state, 0);
        -: 1187:			
     3001: 1188:      return 0;
        -: 1189:}
        -: 1190:
        -: 1191:int feastEffect(struct gameState *state, int currentPlayer, int choice1) {
        -: 1192:	int i;
        -: 1193:	int x;
        -: 1194:	int temphand[MAX_HAND];
        -: 1195:	
        -: 1196:	      //gain card with cost up to 5
        -: 1197:      //Backup hand
    70014: 1198:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    30006: 1199:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    30006: 1200:	state->hand[currentPlayer][i] = -1;//Set to nothing
    30006: 1201:      }
        -: 1202:      //Backup hand
        -: 1203:
        -: 1204:      //Update Coins for Buy
     5001: 1205:      updateCoins(currentPlayer, state, 5);
     5001: 1206:      x = 1;//Condition to loop on
    18002: 1207:      while( x == 1) {//Buy one card
     5001: 1208:	if (supplyCount(choice1, state) <= 0){
        -: 1209:	  if (DEBUG)
        -: 1210:	    printf("None of that card left, sorry!\n");
        -: 1211:
        -: 1212:	  if (DEBUG){
        -: 1213:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1214:	  }
        1: 1215:        return -1;
        -: 1216:	}
     5000: 1217:	else if (state->coins < getCost(choice1)){
     1000: 1218:	  printf("That card is too expensive!\n");
     1000: 1219:        return -1;
        -: 1220:
        -: 1221:	  if (DEBUG){
        -: 1222:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1223:	  }
        -: 1224:	}
        -: 1225:	else{
        -: 1226:
        -: 1227:	  if (DEBUG){
        -: 1228:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1229:	  }
        -: 1230:
     4000: 1231:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
     4000: 1232:	  x = 0;//No more buying cards
        -: 1233:
        -: 1234:	  if (DEBUG){
        -: 1235:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1236:	  }
        -: 1237:
        -: 1238:	}
        -: 1239:      }     
        -: 1240:
        -: 1241:      //Reset Hand
    56000: 1242:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    24000: 1243:	state->hand[currentPlayer][i] = temphand[i];
    24000: 1244:	temphand[i] = -1;
    24000: 1245:      }
        -: 1246:      //Reset Hand
        -: 1247:      			
     4000: 1248:      return 0;
        -: 1249:	
     5001: 1250:}
        -: 1251:
        -: 1252:int adventurerEffect(struct gameState *state, int currentPlayer) {
        -: 1253:	int temphand[MAX_HAND];// moved above the if statement
     4000: 1254:	int drawntreasure=0;
        -: 1255:	int cardDrawn;
     4000: 1256:	int z = 0;// this is the counter for the temp hand
        -: 1257:    
    32000: 1258:      while(drawntreasure<2){
    12000: 1259:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1260:	  shuffle(currentPlayer, state);
    #####: 1261:	}
    12000: 1262:	drawCard(currentPlayer, state);
    12000: 1263:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    20000: 1264:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     8000: 1265:	  drawntreasure++;
        -: 1266:	else{
     4000: 1267:	  temphand[z]=cardDrawn;
     4000: 1268:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4000: 1269:	  z++;
        -: 1270:	}
        -: 1271:      }
    16000: 1272:      while(z-1>=0){
     4000: 1273:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4000: 1274:	z=z-1;
        -: 1275:      }
     4000: 1276:      return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
     1001: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
     1001: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1001: 1287:      state->playedCardCount++;
     1001: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
     1001: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
     1001: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
     1001: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
     1001: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
     1001: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
     1001: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
     1001: 1314:  return 0;
        -: 1315:}
        -: 1316:
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
     4000: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
     4000: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
     4000: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
    #####: 1341:    }
        -: 1342:  else
        -: 1343:    {
     4000: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     4000: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
     4000: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
     4000: 1351:  return 0;
     4000: 1352:}
        -: 1353:
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
     5006: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
    60072: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
    25030: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
       19: 1366:	  state->coins += 1;
       19: 1367:	}
    25011: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
    #####: 1371:	}
    25011: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
    #####: 1375:	}	
    25030: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
     5006: 1379:  state->coins += bonus;
        -: 1380:
     5006: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c

->->->    - TESTING FUNCTION: fullDeckCount() -    <-<-<-


----  - TEST 1:  Return Value -  ----

Return Value: 0, Expected: 0 


----  - TEST 2: Hand Count  -  ----

Hand Count: 5, Expected: 5 


----  - TEST 3: Deck Count  -  ----

Deck Count: 5, Expected: 5 


----  - TEST 4: Discard Count  -  ----

Deck Count: 0, Expected: 0 

->->  - TEST SUCCESSFULLY COMPLETED -  <-<-
File 'unittest2.c'
Lines executed:77.59% of 58
unittest2.c:creating 'unittest2.c.gcov'

File 'dominion.c'
Lines executed:32.20% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Robert Clifton on 4/18/17.
        -:    3://unittest2  unit test for the fullDeckCount function.
        -:    4://
        -:    5://to make and test: make unittestresults.out
        -:    6://
        -:    7://gcc dominion.c rngs.c unittest2.c -o unittest2
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:int main() {
        -:   18:
        1:   19:    int pass = 1;
        -:   20:    int i;
        1:   21:    int x = 1000;
        -:   22:    int retVal;
        -:   23:
        -:   24:
        1:   25:    char testFunction[] = "fullDeckCount()";
        -:   26:    struct gameState G, copyG;
        1:   27:    int randSeed = 2;
        1:   28:    int numbPlayers = 2;
        1:   29:    int player = 0;
        1:   30:    int card = 0;
        -:   31:
        1:   32:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   33:                 sea_hag, tribute, smithy};
        -:   34:
        1:   35:    initializeGame(numbPlayers, k, randSeed, &G);
        -:   36:
        -:   37:
        1:   38:    printf("\n->->->    - TESTING FUNCTION: %s -    <-<-<-\n\n", testFunction);
        -:   39:
        -:   40:    //basic test of return value
        1:   41:    printf("\n----  - TEST 1:  Return Value -  ----\n\n");
        -:   42:
        1:   43:    memcpy(&copyG, &G, sizeof(struct gameState));
        -:   44:
        -:   45:
     2002:   46:    for (i = 0; i < x; i++) {
     1000:   47:        retVal = fullDeckCount(player, card, &copyG);
     1000:   48:        if (retVal != 0) {
    #####:   49:            printf("Test 1 Fail\n");
    #####:   50:            pass = 0;
    #####:   51:        }
     1000:   52:    }
        1:   53:    printf("Return Value: %d, Expected: %d \n\n", retVal, 0);
        -:   54:
        -:   55:    //test and compare hand count in copied struct
        1:   56:    printf("\n----  - TEST 2: Hand Count  -  ----\n\n");
        1:   57:    memcpy(&copyG, &G, sizeof(struct gameState));
        1:   58:    card = 4;
        -:   59:
     2002:   60:    for (i = 0; i < x; i++) {
     1000:   61:        fullDeckCount(player, card, &copyG);
     1000:   62:        if (copyG.handCount[player] != G.handCount[player]) {
    #####:   63:            printf("test 2 hand count fail, Got: %d, Expected: %d\n", copyG.handCount[player], G.handCount[player]);
    #####:   64:            pass = 0;
    #####:   65:        };
     1000:   66:    }
        -:   67:
        1:   68:    printf("Hand Count: %d, Expected: %d \n\n", copyG.handCount[player], G.handCount[player]);
        -:   69:
        -:   70:    //test and compare deck count in copied struct
        1:   71:    printf("\n----  - TEST 3: Deck Count  -  ----\n\n");
        1:   72:    memcpy(&copyG, &G, sizeof(struct gameState));
        1:   73:    card = 3;
        -:   74:
     2002:   75:    for (i = 0; i < x; i++) {
     1000:   76:        fullDeckCount(player, card, &copyG);
     1000:   77:        if (copyG.deckCount[player] != G.deckCount[player]) {
    #####:   78:            printf("test 2 hand count fail, Got: %d, Expected: %d\n", copyG.deckCount[player], G.deckCount[player]);
    #####:   79:            pass = 0;
    #####:   80:        };
     1000:   81:    }
        -:   82:
        1:   83:    printf("Deck Count: %d, Expected: %d \n\n", copyG.deckCount[player], G.deckCount[player]);
        -:   84:
        -:   85:    //test and compare deck count in copied struct
        1:   86:    printf("\n----  - TEST 4: Discard Count  -  ----\n\n");
        1:   87:    memcpy(&copyG, &G, sizeof(struct gameState));
        1:   88:    card = 5;
        -:   89:
     2002:   90:    for (i = 0; i < x; i++) {
     1000:   91:        fullDeckCount(player, card, &copyG);
     1000:   92:        if (copyG.discardCount[player] != G.discardCount[player]) {
    #####:   93:            printf("test 2 hand count fail, Got: %d, Expected: %d\n", copyG.discardCount[player], G.discardCount[player]);
    #####:   94:            pass = 0;
    #####:   95:        };
     1000:   96:    }
        -:   97:
        1:   98:    printf("Deck Count: %d, Expected: %d \n\n", copyG.discardCount[player], G.discardCount[player]);
        -:   99:
        -:  100:    //Final bool check to see if testing passed or failed,  prints result to standard out
        1:  101:    if (pass) {
        1:  102:        printf("->->  - TEST SUCCESSFULLY COMPLETED -  <-<-\n");
        1:  103:    } else{
    #####:  104:        printf("->->  - TEST FAILED -  <-<-\n");
        -:  105:    }
        -:  106:
        1:  107:    return 0;
        -:  108:};
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://test message
        -:    9:
        -:   10:int smithyEffect(struct gameState *state, int currentPlayer, int handPos);
        -:   11:
        -:   12:int council_room_effect(struct gameState *state, int currentPlayer, int handPos);
        -:   13:
        -:   14:int adventurerEffect(struct gameState *state, int currentPlayer);
        -:   15:
        -:   16:int feastEffect(struct gameState *state, int currentPlayer, int choice1);
        -:   17:
        -:   18:int gardenEffect();
        -:   19:
        -:   20:
        -:   21:int compare(const void* a, const void* b) {
      168:   22:  if (*(int*)a > *(int*)b)
    #####:   23:    return 1;
      168:   24:  if (*(int*)a < *(int*)b)
       60:   25:    return -1;
      108:   26:  return 0;
      168:   27:}
        -:   28:
        -:   29:struct gameState* newGame() {
    #####:   30:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   31:  return g;
        -:   32:}
        -:   33:
        -:   34:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   35:		  int k8, int k9, int k10) {
    #####:   36:  int* k = malloc(10 * sizeof(int));
    #####:   37:  k[0] = k1;
    #####:   38:  k[1] = k2;
    #####:   39:  k[2] = k3;
    #####:   40:  k[3] = k4;
    #####:   41:  k[4] = k5;
    #####:   42:  k[5] = k6;
    #####:   43:  k[6] = k7;
    #####:   44:  k[7] = k8;
    #####:   45:  k[8] = k9;
    #####:   46:  k[9] = k10;
    #####:   47:  return k;
        -:   48:}
        -:   49:
        -:   50:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   51:		   struct gameState *state) {
        -:   52:
        -:   53:  int i;
        -:   54:  int j;
        -:   55:  int it;			
        -:   56:  //set up random number generator
        6:   57:  SelectStream(1);
        6:   58:  PutSeed((long)randomSeed);
        -:   59:  
        -:   60:  //check number of players
       12:   61:  if (numPlayers > MAX_PLAYERS || numPlayers < 0)
        -:   62:    {
    #####:   63:      return -1;
        -:   64:    }
        -:   65:
        -:   66:  //set number of players
        6:   67:  state->numPlayers = numPlayers;
        -:   68:
        -:   69:  //check selected kingdom cards are different
      132:   70:  for (i = 0; i < 10; i++)
        -:   71:    {
     1320:   72:      for (j = 0; j < 10; j++)
        -:   73:        {
     1140:   74:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   75:	    {
    #####:   76:	      return -1;
        -:   77:	    }
      600:   78:        }
       60:   79:    }
        -:   80:
        -:   81:
        -:   82:  //initialize supply
        -:   83:  ///////////////////////////////
        -:   84:
        -:   85:  //set number of Curse cards
        6:   86:  if (numPlayers == 2)
        -:   87:    {
        6:   88:      state->supplyCount[curse] = 10;
        6:   89:    }
    #####:   90:  else if (numPlayers == 3)
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 20;
    #####:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[curse] = 30;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Victory cards
        6:  100:  if (numPlayers == 2)
        -:  101:    {
        6:  102:      state->supplyCount[estate] = 8;
        6:  103:      state->supplyCount[duchy] = 8;
        6:  104:      state->supplyCount[province] = 8;
        6:  105:    }
        -:  106:  else
        -:  107:    {
    #####:  108:      state->supplyCount[estate] = 12;
    #####:  109:      state->supplyCount[duchy] = 12;
    #####:  110:      state->supplyCount[province] = 12;
        -:  111:    }
        -:  112:
        -:  113:  //set number of Treasure cards
        6:  114:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  115:  state->supplyCount[silver] = 40;
        6:  116:  state->supplyCount[gold] = 30;
        -:  117:
        -:  118:  //set number of Kingdom cards
      252:  119:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  120:    {
     1980:  121:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  122:	{
      930:  123:	  if (kingdomCards[j] == i)
        -:  124:	    {
        -:  125:	      //check if card is a 'Victory' Kingdom card
      120:  126:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  127:		{
        6:  128:		  if (numPlayers == 2){ 
        6:  129:		    state->supplyCount[i] = 8; 
        6:  130:		  }
    #####:  131:		  else{ state->supplyCount[i] = 12; }
        6:  132:		}
        -:  133:	      else
        -:  134:		{
       54:  135:		  state->supplyCount[i] = 10;
        -:  136:		}
       60:  137:	      break;
        -:  138:	    }
        -:  139:	  else    //card is not in the set choosen for the game
        -:  140:	    {
      870:  141:	      state->supplyCount[i] = -1;
        -:  142:	    }
      870:  143:	}
        -:  144:
      120:  145:    }
        -:  146:
        -:  147:  ////////////////////////
        -:  148:  //supply intilization complete
        -:  149:
        -:  150:  //set player decks
       36:  151:  for (i = 0; i < numPlayers; i++)
        -:  152:    {
       12:  153:      state->deckCount[i] = 0;
       96:  154:      for (j = 0; j < 3; j++)
        -:  155:	{
       36:  156:	  state->deck[i][j] = estate;
       36:  157:	  state->deckCount[i]++;
       36:  158:	}
      192:  159:      for (j = 3; j < 10; j++)
        -:  160:	{
       84:  161:	  state->deck[i][j] = copper;
       84:  162:	  state->deckCount[i]++;		
       84:  163:	}
       12:  164:    }
        -:  165:
        -:  166:  //shuffle player decks
       36:  167:  for (i = 0; i < numPlayers; i++)
        -:  168:    {
       12:  169:      if ( shuffle(i, state) < 0 )
        -:  170:	{
    #####:  171:	  return -1;
        -:  172:	}
       12:  173:    }
        -:  174:
        -:  175:  //draw player hands
       36:  176:  for (i = 0; i < numPlayers; i++)
        -:  177:    {  
        -:  178:      //initialize hand size to zero
       12:  179:      state->handCount[i] = 0;
       12:  180:      state->discardCount[i] = 0;
        -:  181:      //draw 5 cards
        -:  182:      // for (j = 0; j < 5; j++)
        -:  183:      //	{
        -:  184:      //	  drawCard(i, state);
        -:  185:      //	}
       12:  186:    }
        -:  187:  
        -:  188:  //set embargo tokens to 0 for all supply piles
      336:  189:  for (i = 0; i <= treasure_map; i++)
        -:  190:    {
      162:  191:      state->embargoTokens[i] = 0;
      162:  192:    }
        -:  193:
        -:  194:  //initialize first player's turn
        6:  195:  state->outpostPlayed = 0;
        6:  196:  state->phase = 0;
        6:  197:  state->numActions = 1;
        6:  198:  state->numBuys = 1;
        6:  199:  state->playedCardCount = 0;
        6:  200:  state->whoseTurn = 0;
        6:  201:  state->handCount[state->whoseTurn] = 0;
        -:  202:  //int it; move to top
        -:  203:
        -:  204:  //Moved draw cards to here, only drawing at the start of a turn
       72:  205:  for (it = 0; it < 5; it++){
       30:  206:    drawCard(state->whoseTurn, state);
       30:  207:  }
        -:  208:
        6:  209:  updateCoins(state->whoseTurn, state, 0);
        -:  210:
        6:  211:  return 0;
        6:  212:}
        -:  213:
        -:  214:int shuffle(int player, struct gameState *state) {
        -:  215: 
        -:  216:
        -:  217:  int newDeck[MAX_DECK];
       12:  218:  int newDeckPos = 0;
        -:  219:  int card;
        -:  220:  int i;
        -:  221:
       12:  222:  if (state->deckCount[player] < 1)
    #####:  223:    return -1;
       12:  224:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  225:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  226:
      264:  227:  while (state->deckCount[player] > 0) {
      120:  228:    card = floor(Random() * state->deckCount[player]);
      120:  229:    newDeck[newDeckPos] = state->deck[player][card];
      120:  230:    newDeckPos++;
      874:  231:    for (i = card; i < state->deckCount[player]-1; i++) {
      317:  232:      state->deck[player][i] = state->deck[player][i+1];
      317:  233:    }
      120:  234:    state->deckCount[player]--;
        -:  235:  }
      264:  236:  for (i = 0; i < newDeckPos; i++) {
      120:  237:    state->deck[player][i] = newDeck[i];
      120:  238:    state->deckCount[player]++;
      120:  239:  }
        -:  240:
       12:  241:  return 0;
       12:  242:}
        -:  243:
        -:  244:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  245:{	
        -:  246:  int card;
    #####:  247:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  248:
        -:  249:  //check if it is the right phase
    #####:  250:  if (state->phase != 0)
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //check if player has enough actions
    #####:  256:  if ( state->numActions < 1 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //get card played
    #####:  262:  card = handCard(handPos, state);
        -:  263:	
        -:  264:  //check if selected card is an action
    #####:  265:  if ( card < adventurer || card > treasure_map )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //play card
    #####:  271:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  272:    {
    #####:  273:      return -1;
        -:  274:    }
        -:  275:	
        -:  276:  //reduce number of actions
    #####:  277:  state->numActions--;
        -:  278:
        -:  279:  //update coins (Treasure cards may be added with card draws)
    #####:  280:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  281:	
    #####:  282:  return 0;
    #####:  283:}
        -:  284:
        -:  285:int buyCard(int supplyPos, struct gameState *state) {
        -:  286:  int who;
        -:  287:  if (DEBUG){
        -:  288:    printf("Entering buyCard...\n");
        -:  289:  }
        -:  290:
        -:  291:  // I don't know what to do about the phase thing.
        -:  292:
    #####:  293:  who = state->whoseTurn;
        -:  294:
    #####:  295:  if (state->numBuys < 1){
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (supplyCount(supplyPos, state) <1){
        -:  300:    if (DEBUG)
        -:  301:      printf("There are not any of that type of card left\n");
    #####:  302:    return -1;
    #####:  303:  } else if (state->coins < getCost(supplyPos)){
        -:  304:    if (DEBUG)
        -:  305:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  306:    return -1;
        -:  307:  } else {
    #####:  308:    state->phase=1;
        -:  309:    //state->supplyCount[supplyPos]--;
    #####:  310:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  311:
    #####:  312:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  313:    state->numBuys--;
        -:  314:    if (DEBUG)
        -:  315:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  316:  }
        -:  317:
        -:  318:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  319:  //state->discardCount[who]++;
        -:  320:
    #####:  321:  return 0;
    #####:  322:}
        -:  323:
        -:  324:int numHandCards(struct gameState *state) {
    14000:  325:  return state->handCount[ whoseTurn(state) ];
        -:  326:}
        -:  327:
        -:  328:int handCard(int handPos, struct gameState *state) {
    22000:  329:  int currentPlayer = whoseTurn(state);
    22000:  330:  return state->hand[currentPlayer][handPos];
        -:  331:}
        -:  332:
        -:  333:int supplyCount(int card, struct gameState *state) {
     9001:  334:  return state->supplyCount[card];
        -:  335:}
        -:  336:
        -:  337:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  338:  int i;
     4000:  339:  int count = 0;
        -:  340:
    48000:  341:  for (i = 0; i < state->deckCount[player]; i++)
        -:  342:    {
    23000:  343:      if (state->deck[player][i] == card) count++;
    20000:  344:    }
        -:  345:
    48000:  346:  for (i = 0; i < state->handCount[player]; i++)
        -:  347:    {
    24000:  348:      if (state->hand[player][i] == card) count++;
    20000:  349:    }
        -:  350:
     8000:  351:  for (i = 0; i < state->discardCount[player]; i++)
        -:  352:    {
    #####:  353:      if (state->discard[player][i] == card) count++;
    #####:  354:    }
        -:  355:
     4000:  356:  return count;
        -:  357:}
        -:  358:
        -:  359:int whoseTurn(struct gameState *state) {
    49014:  360:  return state->whoseTurn;
        -:  361:}
        -:  362:
        -:  363:int endTurn(struct gameState *state) {
        -:  364:  int k;
        -:  365:  int i;
    #####:  366:  int currentPlayer = whoseTurn(state);
        -:  367:  
        -:  368:  //Discard hand
    #####:  369:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  370:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  371:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  372:  }
    #####:  373:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  374:    
        -:  375:  //Code for determining the player
    #####:  376:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  377:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  378:  }
        -:  379:  else{
    #####:  380:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  381:  }
        -:  382:
    #####:  383:  state->outpostPlayed = 0;
    #####:  384:  state->phase = 0;
    #####:  385:  state->numActions = 1;
    #####:  386:  state->coins = 0;
    #####:  387:  state->numBuys = 1;
    #####:  388:  state->playedCardCount = 0;
    #####:  389:  state->handCount[state->whoseTurn] = 0;
        -:  390:
        -:  391:  //int k; move to top
        -:  392:  //Next player draws hand
    #####:  393:  for (k = 0; k < 5; k++){
    #####:  394:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  395:  }
        -:  396:
        -:  397:  //Update money
    #####:  398:  updateCoins(state->whoseTurn, state , 0);
        -:  399:
    #####:  400:  return 0;
        -:  401:}
        -:  402:
        -:  403:int isGameOver(struct gameState *state) {
        -:  404:  int i;
        -:  405:  int j;
        -:  406:	
        -:  407:  //if stack of Province cards is empty, the game ends
    #####:  408:  if (state->supplyCount[province] == 0)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
        -:  413:  //if three supply pile are at 0, the game ends
    #####:  414:  j = 0;
    #####:  415:  for (i = 0; i < 25; i++)
        -:  416:    {
    #####:  417:      if (state->supplyCount[i] == 0)
        -:  418:	{
    #####:  419:	  j++;
    #####:  420:	}
    #####:  421:    }
    #####:  422:  if ( j >= 3)
        -:  423:    {
    #####:  424:      return 1;
        -:  425:    }
        -:  426:
    #####:  427:  return 0;
    #####:  428:}
        -:  429:
        -:  430:int scoreFor (int player, struct gameState *state) {
        -:  431:
        -:  432:  int i;
    #####:  433:  int score = 0;
        -:  434:  //score from hand
    #####:  435:  for (i = 0; i < state->handCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  443:    }
        -:  444:
        -:  445:  //score from discard
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  454:    }
        -:  455:
        -:  456:  //score from deck
    #####:  457:  for (i = 0; i < state->discardCount[player]; i++)
        -:  458:    {
    #####:  459:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  460:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  461:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  462:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  463:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  465:    }
        -:  466:
    #####:  467:  return score;
        -:  468:}
        -:  469:
        -:  470:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  471:  int i;	
        -:  472:  int j;
        -:  473:  int highScore;
        -:  474:  int currentPlayer;
        -:  475:
        -:  476:  //get score for each player
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:    {
        -:  479:      //set unused player scores to -9999
    #####:  480:      if (i >= state->numPlayers)
        -:  481:	{
    #####:  482:	  players[i] = -9999;
    #####:  483:	}
        -:  484:      else
        -:  485:	{
    #####:  486:	  players[i] = scoreFor (i, state);
        -:  487:	}
    #####:  488:    }
        -:  489:
        -:  490:  //find highest score
    #####:  491:  j = 0;
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if (players[i] > players[j])
        -:  495:	{
    #####:  496:	  j = i;
    #####:  497:	}
    #####:  498:    }
    #####:  499:  highScore = players[j];
        -:  500:
        -:  501:  //add 1 to players who had less turns
    #####:  502:  currentPlayer = whoseTurn(state);
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if ( players[i] == highScore && i > currentPlayer )
        -:  506:	{
    #####:  507:	  players[i]++;
    #####:  508:	}
    #####:  509:    }
        -:  510:
        -:  511:  //find new highest score
    #####:  512:  j = 0;
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:      if ( players[i] > players[j] )
        -:  516:	{
    #####:  517:	  j = i;
    #####:  518:	}
    #####:  519:    }
    #####:  520:  highScore = players[j];
        -:  521:
        -:  522:  //set winners in array to 1 and rest to 0
    #####:  523:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  524:    {
    #####:  525:      if ( players[i] == highScore )
        -:  526:	{
    #####:  527:	  players[i] = 1;
    #####:  528:	}
        -:  529:      else
        -:  530:	{
    #####:  531:	  players[i] = 0;
        -:  532:	}
    #####:  533:    }
        -:  534:
    #####:  535:  return 0;
        -:  536:}
        -:  537:
        -:  538:int drawCard(int player, struct gameState *state)
        -:  539:{	int count;
        -:  540:  int deckCounter;
    28036:  541:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  542:    
        -:  543:    //Step 1 Shuffle the discard pile back into a deck
        -:  544:    int i;
        -:  545:    //Move discard to deck
    #####:  546:    for (i = 0; i < state->discardCount[player];i++){
    #####:  547:      state->deck[player][i] = state->discard[player][i];
    #####:  548:      state->discard[player][i] = -1;
    #####:  549:    }
        -:  550:
    #####:  551:    state->deckCount[player] = state->discardCount[player];
    #####:  552:    state->discardCount[player] = 0;//Reset discard
        -:  553:
        -:  554:    //Shufffle the deck
    #####:  555:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  556:   
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  559:    }
        -:  560:    
    #####:  561:    state->discardCount[player] = 0;
        -:  562:
        -:  563:    //Step 2 Draw Card
    #####:  564:    count = state->handCount[player];//Get current player's hand count
        -:  565:    
        -:  566:    if (DEBUG){//Debug statements
        -:  567:      printf("Current hand count: %d\n", count);
        -:  568:    }
        -:  569:    
    #####:  570:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  571:
    #####:  572:    if (deckCounter == 0)
    #####:  573:      return -1;
        -:  574:
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
    #####:  578:  }
        -:  579:
        -:  580:  else{
    28036:  581:    int count = state->handCount[player];//Get current hand count for player
        -:  582:    int deckCounter;
        -:  583:    if (DEBUG){//Debug statements
        -:  584:      printf("Current hand count: %d\n", count);
        -:  585:    }
        -:  586:
    28036:  587:    deckCounter = state->deckCount[player];//Create holder for the deck count
    28036:  588:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    28036:  589:    state->deckCount[player]--;
    28036:  590:    state->handCount[player]++;//Increment hand count
        -:  591:  }
        -:  592:
    28036:  593:  return 0;
    28036:  594:}
        -:  595:
        -:  596:int getCost(int cardNumber)
        -:  597:{
     5000:  598:  switch( cardNumber ) 
        -:  599:    {
        -:  600:    case curse:
     1000:  601:      return 0;
        -:  602:    case estate:
    #####:  603:      return 2;
        -:  604:    case duchy:
    #####:  605:      return 5;
        -:  606:    case province:
    #####:  607:      return 8;
        -:  608:    case copper:
    #####:  609:      return 0;
        -:  610:    case silver:
     3000:  611:      return 3;
        -:  612:    case gold:
     1000:  613:      return 6;
        -:  614:    case adventurer:
    #####:  615:      return 6;
        -:  616:    case council_room:
    #####:  617:      return 5;
        -:  618:    case feast:
    #####:  619:      return 4;
        -:  620:    case gardens:
    #####:  621:      return 4;
        -:  622:    case mine:
    #####:  623:      return 5;
        -:  624:    case remodel:
    #####:  625:      return 4;
        -:  626:    case smithy:
    #####:  627:      return 4;
        -:  628:    case village:
    #####:  629:      return 3;
        -:  630:    case baron:
    #####:  631:      return 4;
        -:  632:    case great_hall:
    #####:  633:      return 3;
        -:  634:    case minion:
    #####:  635:      return 5;
        -:  636:    case steward:
    #####:  637:      return 3;
        -:  638:    case tribute:
    #####:  639:      return 5;
        -:  640:    case ambassador:
    #####:  641:      return 3;
        -:  642:    case cutpurse:
    #####:  643:      return 4;
        -:  644:    case embargo: 
    #####:  645:      return 2;
        -:  646:    case outpost:
    #####:  647:      return 5;
        -:  648:    case salvager:
    #####:  649:      return 4;
        -:  650:    case sea_hag:
    #####:  651:      return 4;
        -:  652:    case treasure_map:
    #####:  653:      return 4;
        -:  654:    }
        -:  655:	
    #####:  656:  return -1;
     5000:  657:}
        -:  658:
        -:  659:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  660:{
        -:  661:  int i;
        -:  662:  int j;
        -:  663:  int k;
        -:  664:  int x;
        -:  665:  int index;
    13003:  666:  int currentPlayer = whoseTurn(state);
    13003:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
    13003:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
    13003:  671:  int drawntreasure=0;
        -:  672:  int cardDrawn;
    13003:  673:  int z = 0;// this is the counter for the temp hand
    13003:  674:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  675:    nextPlayer = 0;
    #####:  676:  }
        -:  677:  //uses switch to select card and perform actions
    13003:  678:  switch( card ) 
        -:  679:    {
        -:  680:		  
        -:  681:   case adventurer:
     4000:  682:	return adventurerEffect(state, currentPlayer);
        -:  683:			
        -:  684:    case council_room:
     3001:  685:		return council_room_effect(state, currentPlayer, handPos);
        -:  686:			
        -:  687:    case feast:
     5001:  688:		return feastEffect(state, currentPlayer, choice1);
        -:  689:			
        -:  690:    case gardens:
    #####:  691:      return gardenEffect();
        -:  692:			
        -:  693:    case mine:
    #####:  694:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  695:
    #####:  696:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  697:	{
    #####:  698:	  return -1;
        -:  699:	}
        -:  700:		
    #####:  701:      if (choice2 > treasure_map || choice2 < curse)
        -:  702:	{
    #####:  703:	  return -1;
        -:  704:	}
        -:  705:
    #####:  706:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  707:	{
    #####:  708:	  return -1;
        -:  709:	}
        -:  710:
    #####:  711:      gainCard(choice2, state, 2, currentPlayer);
        -:  712:
        -:  713:      //discard card from hand
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:
        -:  716:      //discard trashed card
    #####:  717:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  718:	{
    #####:  719:	  if (state->hand[currentPlayer][i] == j)
        -:  720:	    {
    #####:  721:	      discardCard(i, currentPlayer, state, 0);			
    #####:  722:	      break;
        -:  723:	    }
    #####:  724:	}
        -:  725:			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case remodel:
    #####:  729:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  730:
    #####:  731:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  732:	{
    #####:  733:	  return -1;
        -:  734:	}
        -:  735:
    #####:  736:      gainCard(choice2, state, 0, currentPlayer);
        -:  737:
        -:  738:      //discard card from hand
    #####:  739:      discardCard(handPos, currentPlayer, state, 0);
        -:  740:
        -:  741:      //discard trashed card
    #####:  742:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  743:	{
    #####:  744:	  if (state->hand[currentPlayer][i] == j)
        -:  745:	    {
    #####:  746:	      discardCard(i, currentPlayer, state, 0);			
    #####:  747:	      break;
        -:  748:	    }
    #####:  749:	}
        -:  750:
        -:  751:
    #####:  752:      return 0;
        -:  753:		
        -:  754:    case smithy:
        -:  755:      //+3 Cards
     1001:  756:      return smithyEffect(state, currentPlayer, handPos);
        -:  757:      
        -:  758:		
        -:  759:    case village:
        -:  760:      //+1 Card
    #####:  761:      drawCard(currentPlayer, state);
        -:  762:			
        -:  763:      //+2 Actions
    #####:  764:      state->numActions = state->numActions + 2;
        -:  765:			
        -:  766:      //discard played card from hand
    #####:  767:      discardCard(handPos, currentPlayer, state, 0);
    #####:  768:      return 0;
        -:  769:		
        -:  770:    case baron:
    #####:  771:      state->numBuys++;//Increase buys by 1!
    #####:  772:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  773:	int p = 0;//Iterator for hand!
    #####:  774:	int card_not_discarded = 1;//Flag for discard set!
    #####:  775:	while(card_not_discarded){
    #####:  776:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  777:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  778:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  779:	    state->discardCount[currentPlayer]++;
    #####:  780:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  781:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  782:	    }
    #####:  783:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  784:	    state->handCount[currentPlayer]--;
    #####:  785:	    card_not_discarded = 0;//Exit the loop
    #####:  786:	  }
    #####:  787:	  else if (p > state->handCount[currentPlayer]){
        -:  788:	    if(DEBUG) {
        -:  789:	      printf("No estate cards in your hand, invalid choice\n");
        -:  790:	      printf("Must gain an estate if there are any\n");
        -:  791:	    }
    #####:  792:	    if (supplyCount(estate, state) > 0){
    #####:  793:	      gainCard(estate, state, 0, currentPlayer);
    #####:  794:	      state->supplyCount[estate]--;//Decrement estates
    #####:  795:	      if (supplyCount(estate, state) == 0){
    #####:  796:		isGameOver(state);
    #####:  797:	      }
    #####:  798:	    }
    #####:  799:	    card_not_discarded = 0;//Exit the loop
    #####:  800:	  }
        -:  801:			    
        -:  802:	  else{
    #####:  803:	    p++;//Next card
        -:  804:	  }
        -:  805:	}
    #####:  806:      }
        -:  807:			    
        -:  808:      else{
    #####:  809:	if (supplyCount(estate, state) > 0){
    #####:  810:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  811:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  812:	  if (supplyCount(estate, state) == 0){
    #####:  813:	    isGameOver(state);
    #####:  814:	  }
    #####:  815:	}
        -:  816:      }
        -:  817:	    
        -:  818:      
    #####:  819:      return 0;
        -:  820:		
        -:  821:    case great_hall:
        -:  822:      //+1 Card
    #####:  823:      drawCard(currentPlayer, state);
        -:  824:			
        -:  825:      //+1 Actions
    #####:  826:      state->numActions++;
        -:  827:			
        -:  828:      //discard card from hand
    #####:  829:      discardCard(handPos, currentPlayer, state, 0);
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case minion:
        -:  833:      //+1 action
    #####:  834:      state->numActions++;
        -:  835:			
        -:  836:      //discard card from hand
    #####:  837:      discardCard(handPos, currentPlayer, state, 0);
        -:  838:			
    #####:  839:      if (choice1)		//+2 coins
        -:  840:	{
    #####:  841:	  state->coins = state->coins + 2;
    #####:  842:	}
        -:  843:			
    #####:  844:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  845:	{
        -:  846:	  //discard hand
    #####:  847:	  while(numHandCards(state) > 0)
        -:  848:	    {
    #####:  849:	      discardCard(handPos, currentPlayer, state, 0);
        -:  850:	    }
        -:  851:				
        -:  852:	  //draw 4
    #####:  853:	  for (i = 0; i < 4; i++)
        -:  854:	    {
    #####:  855:	      drawCard(currentPlayer, state);
    #####:  856:	    }
        -:  857:				
        -:  858:	  //other players discard hand and redraw if hand size > 4
    #####:  859:	  for (i = 0; i < state->numPlayers; i++)
        -:  860:	    {
    #####:  861:	      if (i != currentPlayer)
        -:  862:		{
    #####:  863:		  if ( state->handCount[i] > 4 )
        -:  864:		    {
        -:  865:		      //discard hand
    #####:  866:		      while( state->handCount[i] > 0 )
        -:  867:			{
    #####:  868:			  discardCard(handPos, i, state, 0);
        -:  869:			}
        -:  870:							
        -:  871:		      //draw 4
    #####:  872:		      for (j = 0; j < 4; j++)
        -:  873:			{
    #####:  874:			  drawCard(i, state);
    #####:  875:			}
    #####:  876:		    }
    #####:  877:		}
    #####:  878:	    }
        -:  879:				
    #####:  880:	}
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case steward:
    #####:  884:      if (choice1 == 1)
        -:  885:	{
        -:  886:	  //+2 cards
    #####:  887:	  drawCard(currentPlayer, state);
    #####:  888:	  drawCard(currentPlayer, state);
    #####:  889:	}
    #####:  890:      else if (choice1 == 2)
        -:  891:	{
        -:  892:	  //+2 coins
    #####:  893:	  state->coins = state->coins + 2;
    #####:  894:	}
        -:  895:      else
        -:  896:	{
        -:  897:	  //trash 2 cards in hand
    #####:  898:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  899:	  discardCard(choice3, currentPlayer, state, 1);
        -:  900:	}
        -:  901:			
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case tribute:
    #####:  907:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  908:	if (state->deckCount[nextPlayer] > 0){
    #####:  909:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  910:	  state->deckCount[nextPlayer]--;
    #####:  911:	}
    #####:  912:	else if (state->discardCount[nextPlayer] > 0){
    #####:  913:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  914:	  state->discardCount[nextPlayer]--;
    #####:  915:	}
        -:  916:	else{
        -:  917:	  //No Card to Reveal
        -:  918:	  if (DEBUG){
        -:  919:	    printf("No cards to reveal\n");
        -:  920:	  }
        -:  921:	}
    #####:  922:      }
        -:  923:	    
        -:  924:      else{
    #####:  925:	if (state->deckCount[nextPlayer] == 0){
    #####:  926:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  927:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  928:	    state->deckCount[nextPlayer]++;
    #####:  929:	    state->discard[nextPlayer][i] = -1;
    #####:  930:	    state->discardCount[nextPlayer]--;
    #####:  931:	  }
        -:  932:			    
    #####:  933:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  934:	} 
    #####:  935:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  937:	state->deckCount[nextPlayer]--;
    #####:  938:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:	state->deckCount[nextPlayer]--;
        -:  941:      }    
        -:  942:		       
    #####:  943:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  944:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  945:	state->playedCardCount++;
    #####:  946:	tributeRevealedCards[1] = -1;
    #####:  947:      }
        -:  948:
    #####:  949:      for (i = 0; i <= 2; i ++){
    #####:  950:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  951:	  state->coins += 2;
    #####:  952:	}
        -:  953:		    
    #####:  954:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
        -:  958:	else{//Action Card
    #####:  959:	  state->numActions = state->numActions + 2;
        -:  960:	}
    #####:  961:      }
        -:  962:	    
    #####:  963:      return 0;
        -:  964:		
        -:  965:    case ambassador:
    #####:  966:      j = 0;		//used to check if player has enough cards to discard
        -:  967:
    #####:  968:      if (choice2 > 2 || choice2 < 0)
        -:  969:	{
    #####:  970:	  return -1;				
        -:  971:	}
        -:  972:
    #####:  973:      if (choice1 == handPos)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  979:	{
    #####:  980:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  981:	    {
    #####:  982:	      j++;
    #####:  983:	    }
    #####:  984:	}
    #####:  985:      if (j < choice2)
        -:  986:	{
    #####:  987:	  return -1;				
        -:  988:	}
        -:  989:
        -:  990:      if (DEBUG) 
        -:  991:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  992:
        -:  993:      //increase supply count for choosen card by amount being discarded
    #####:  994:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  995:			
        -:  996:      //each other player gains a copy of revealed card
    #####:  997:      for (i = 0; i < state->numPlayers; i++)
        -:  998:	{
    #####:  999:	  if (i != currentPlayer)
        -: 1000:	    {
    #####: 1001:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1002:	    }
    #####: 1003:	}
        -: 1004:
        -: 1005:      //discard played card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1007:
        -: 1008:      //trash copies of cards returned to supply
    #####: 1009:      for (j = 0; j < choice2; j++)
        -: 1010:	{
    #####: 1011:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1012:	    {
    #####: 1013:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1014:		{
    #####: 1015:		  discardCard(i, currentPlayer, state, 1);
    #####: 1016:		  break;
        -: 1017:		}
    #####: 1018:	    }
    #####: 1019:	}			
        -: 1020:
    #####: 1021:      return 0;
        -: 1022:		
        -: 1023:    case cutpurse:
        -: 1024:
    #####: 1025:      updateCoins(currentPlayer, state, 2);
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
        -: 1029:	    {
    #####: 1030:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1031:		{
    #####: 1032:		  if (state->hand[i][j] == copper)
        -: 1033:		    {
    #####: 1034:		      discardCard(j, i, state, 0);
    #####: 1035:		      break;
        -: 1036:		    }
    #####: 1037:		  if (j == state->handCount[i])
        -: 1038:		    {
    #####: 1039:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1040:			{
        -: 1041:			  if (DEBUG)
        -: 1042:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1043:			}	
    #####: 1044:		      break;
        -: 1045:		    }		
    #####: 1046:		}
        -: 1047:					
    #####: 1048:	    }
        -: 1049:				
    #####: 1050:	}				
        -: 1051:
        -: 1052:      //discard played card from hand
    #####: 1053:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:
        -: 1057:		
        -: 1058:    case embargo: 
        -: 1059:      //+2 Coins
    #####: 1060:      state->coins = state->coins + 2;
        -: 1061:			
        -: 1062:      //see if selected pile is in play
    #####: 1063:      if ( state->supplyCount[choice1] == -1 )
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:			
        -: 1068:      //add embargo token to selected supply pile
    #####: 1069:      state->embargoTokens[choice1]++;
        -: 1070:			
        -: 1071:      //trash card
    #####: 1072:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case outpost:
        -: 1076:      //set outpost flag
    #####: 1077:      state->outpostPlayed++;
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case salvager:
        -: 1084:      //+1 buy
    #####: 1085:      state->numBuys++;
        -: 1086:			
    #####: 1087:      if (choice1)
        -: 1088:	{
        -: 1089:	  //gain coins equal to trashed card
    #####: 1090:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1091:	  //trash card
    #####: 1092:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1093:	}
        -: 1094:			
        -: 1095:      //discard card
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1097:      return 0;
        -: 1098:		
        -: 1099:    case sea_hag:
    #####: 1100:      for (i = 0; i < state->numPlayers; i++){
    #####: 1101:	if (i != currentPlayer){
    #####: 1102:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1103:	  state->discardCount[i]++;
    #####: 1104:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1105:	}
    #####: 1106:      }
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case treasure_map:
        -: 1110:      //search hand for another treasure_map
    #####: 1111:      index = -1;
    #####: 1112:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1113:	{
    #####: 1114:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1115:	    {
    #####: 1116:	      index = i;
    #####: 1117:	      break;
        -: 1118:	    }
    #####: 1119:	}
    #####: 1120:      if (index > -1)
        -: 1121:	{
        -: 1122:	  //trash both treasure cards
    #####: 1123:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1124:	  discardCard(index, currentPlayer, state, 1);
        -: 1125:
        -: 1126:	  //gain 4 Gold cards
    #####: 1127:	  for (i = 0; i < 4; i++)
        -: 1128:	    {
    #####: 1129:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1130:	    }
        -: 1131:				
        -: 1132:	  //return success
    #####: 1133:	  return 1;
        -: 1134:	}
        -: 1135:			
        -: 1136:      //no second treasure_map found in hand
    #####: 1137:      return -1;
        -: 1138:    }
        -: 1139:	
    #####: 1140:  return -1;
    13003: 1141:}
        -: 1142:
        -: 1143:int gardenEffect() {
    #####: 1144:printf("Your father was a hamster and your mother smelt of elderberries.");
    #####: 1145:return -1;
        -: 1146:}
        -: 1147:
        -: 1148:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1149:  int i;
        -: 1150:
     1001: 1151:  int tributeRevealedCards[2] = {-1, -1};
        -: 1152:  int temphand[MAX_HAND];// moved above the if statement
        -: 1153:
     1001: 1154:  int z = 0;// this is the counter for the temp hand
     4004: 1155:for (i = 0; i < 1; i++)
        -: 1156:	{
     1001: 1157:	  drawCard(currentPlayer, state);
     1001: 1158:	}
        -: 1159:			
        -: 1160:      //discard card from hand
     1001: 1161:      discardCard(handPos, currentPlayer, state, 0);
     1001: 1162:      return 0;
        -: 1163:}
        -: 1164:
        -: 1165:int council_room_effect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1166:      int i;
        -: 1167:      //+4 Cards
    30010: 1168:      for (i = 0; i < 4; i++)
        -: 1169:	{
    12004: 1170:	  drawCard(currentPlayer, state);
    12004: 1171:	}
        -: 1172:			
        -: 1173:      //+1 Buy
     3001: 1174:      state->numBuys++;
        -: 1175:			
        -: 1176:      //Each other player draws a card
    18006: 1177:      for (i = 0; i < state->numPlayers; i++)
        -: 1178:	{
     6002: 1179:	  if ( i != currentPlayer )
        -: 1180:	    {
     3001: 1181:	      drawCard(i, state);
     3001: 1182:	    }
     6002: 1183:	}
        -: 1184:			
        -: 1185:      //put played card in played card pile
        -: 1186:      //discardCard(handPos, currentPlayer, state, 0);
        -: 1187:			
     3001: 1188:      return 0;
        -: 1189:}
        -: 1190:
        -: 1191:int feastEffect(struct gameState *state, int currentPlayer, int choice1) {
        -: 1192:	int i;
        -: 1193:	int x;
        -: 1194:	int temphand[MAX_HAND];
        -: 1195:	
        -: 1196:	      //gain card with cost up to 5
        -: 1197:      //Backup hand
    70014: 1198:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    30006: 1199:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    30006: 1200:	state->hand[currentPlayer][i] = -1;//Set to nothing
    30006: 1201:      }
        -: 1202:      //Backup hand
        -: 1203:
        -: 1204:      //Update Coins for Buy
     5001: 1205:      updateCoins(currentPlayer, state, 5);
     5001: 1206:      x = 1;//Condition to loop on
    18002: 1207:      while( x == 1) {//Buy one card
     5001: 1208:	if (supplyCount(choice1, state) <= 0){
        -: 1209:	  if (DEBUG)
        -: 1210:	    printf("None of that card left, sorry!\n");
        -: 1211:
        -: 1212:	  if (DEBUG){
        -: 1213:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1214:	  }
        1: 1215:        return -1;
        -: 1216:	}
     5000: 1217:	else if (state->coins < getCost(choice1)){
     1000: 1218:	  printf("That card is too expensive!\n");
     1000: 1219:        return -1;
        -: 1220:
        -: 1221:	  if (DEBUG){
        -: 1222:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1223:	  }
        -: 1224:	}
        -: 1225:	else{
        -: 1226:
        -: 1227:	  if (DEBUG){
        -: 1228:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1229:	  }
        -: 1230:
     4000: 1231:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
     4000: 1232:	  x = 0;//No more buying cards
        -: 1233:
        -: 1234:	  if (DEBUG){
        -: 1235:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1236:	  }
        -: 1237:
        -: 1238:	}
        -: 1239:      }     
        -: 1240:
        -: 1241:      //Reset Hand
    56000: 1242:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    24000: 1243:	state->hand[currentPlayer][i] = temphand[i];
    24000: 1244:	temphand[i] = -1;
    24000: 1245:      }
        -: 1246:      //Reset Hand
        -: 1247:      			
     4000: 1248:      return 0;
        -: 1249:	
     5001: 1250:}
        -: 1251:
        -: 1252:int adventurerEffect(struct gameState *state, int currentPlayer) {
        -: 1253:	int temphand[MAX_HAND];// moved above the if statement
     4000: 1254:	int drawntreasure=0;
        -: 1255:	int cardDrawn;
     4000: 1256:	int z = 0;// this is the counter for the temp hand
        -: 1257:    
    32000: 1258:      while(drawntreasure<2){
    12000: 1259:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1260:	  shuffle(currentPlayer, state);
    #####: 1261:	}
    12000: 1262:	drawCard(currentPlayer, state);
    12000: 1263:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    20000: 1264:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     8000: 1265:	  drawntreasure++;
        -: 1266:	else{
     4000: 1267:	  temphand[z]=cardDrawn;
     4000: 1268:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4000: 1269:	  z++;
        -: 1270:	}
        -: 1271:      }
    16000: 1272:      while(z-1>=0){
     4000: 1273:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4000: 1274:	z=z-1;
        -: 1275:      }
     4000: 1276:      return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
     1001: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
     1001: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1001: 1287:      state->playedCardCount++;
     1001: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
     1001: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
     1001: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
     1001: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
     1001: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
     1001: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
     1001: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
     1001: 1314:  return 0;
        -: 1315:}
        -: 1316:
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
     4000: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
     4000: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
     4000: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
    #####: 1341:    }
        -: 1342:  else
        -: 1343:    {
     4000: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     4000: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
     4000: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
     4000: 1351:  return 0;
     4000: 1352:}
        -: 1353:
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
     5007: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
    60084: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
    25035: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
       23: 1366:	  state->coins += 1;
       23: 1367:	}
    25012: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
    #####: 1371:	}
    25012: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
    #####: 1375:	}	
    25035: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
     5007: 1379:  state->coins += bonus;
        -: 1380:
     5007: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c

->->->    - TESTING CARD: updateCoins() -    <-<-<-


----  - TEST 1: Return Value -  ----

Return Value: 0, Expected: 0 


----  - TEST 2: Hand Count  -  ----

Hand Count: 5, Expected: 5 


----  - TEST 3:Copper Coin Count -  ----

Coins: 5, Expected: 5 


----  - TEST 4:Silver Coin Count -  ----

Coins: 10, Expected: 10 


----  - TEST 5:Gold Coin Count -  ----

Coins: 15, Expected: 15 


----  - TEST 6:Mixed Coin Count -  ----

Coins: 9, Expected: 9 


----  - TEST 7: Bonus -  ----

Coins: 1, Expected: 1 

->->  - TEST SUCCESSFULLY COMPLETED -  <-<-
File 'unittest3.c'
Lines executed:80.53% of 113
unittest3.c:creating 'unittest3.c.gcov'

File 'dominion.c'
Lines executed:32.82% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Robert Clifton on 4/18/17.
        -:    3://unittest3  unit test for the updateCoins function.
        -:    4://
        -:    5://to make and test: make unittestresults.out
        -:    6://
        -:    7://gcc dominion.c rngs.c unittest3.c -o unittest3
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:int main() {
        -:   18:
        1:   19:    char testFunction[] = "updateCoins()";
        -:   20:    struct gameState G, copyG;
        1:   21:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   22:                 sea_hag, tribute, smithy};
        -:   23:
        1:   24:    int pass = 1;
        -:   25:    int i, retVal;
        1:   26:    int x = 1000;
        1:   27:    int randSeed = 2;
        1:   28:    int numbPlayers = 2;
        1:   29:    int bonus = 0;
        1:   30:    int player = 0;
        -:   31:
        -:   32:    //initialize game state
        1:   33:    initializeGame(numbPlayers, k, randSeed, &G);
        -:   34:
        1:   35:    printf("\n->->->    - TESTING CARD: %s -    <-<-<-\n\n", testFunction);
        -:   36:
        -:   37:    //basic test of return value
        1:   38:    printf("\n----  - TEST 1: Return Value -  ----\n\n");
        1:   39:    memcpy(&copyG, &G, sizeof(struct gameState));
        -:   40:
     2002:   41:    for (i = 0; i < x; i++) {
     1000:   42:        retVal = updateCoins(player, &copyG, bonus);
     1000:   43:        if (retVal != 0) {
    #####:   44:            printf("test 1 fail Return != 0\n");
    #####:   45:            pass = 0;
    #####:   46:        };
     1000:   47:    }
        -:   48:
        1:   49:    printf("Return Value: %d, Expected: %d \n\n", retVal, 0);
        -:   50:
        -:   51:    //test and compare hand count in copied struct
        1:   52:    printf("\n----  - TEST 2: Hand Count  -  ----\n\n");
        1:   53:    memcpy(&copyG, &G, sizeof(struct gameState));
        -:   54:
     2002:   55:    for (i = 0; i < x; i++) {
     1000:   56:        updateCoins(player, &copyG, bonus);
     1000:   57:        if (copyG.handCount[player] != G.handCount[player]) {
    #####:   58:            printf("test 2 hand count fail, Got: %d, Expected: %d\n", copyG.handCount[player], G.handCount[player]);
    #####:   59:            pass = 0;
    #####:   60:        };
     1000:   61:    }
        -:   62:
        1:   63:    printf("Hand Count: %d, Expected: %d \n\n", copyG.handCount[player], G.handCount[player]);
        -:   64:
        -:   65:    //test count with copper coin cards
        1:   66:    printf("\n----  - TEST 3:Copper Coin Count -  ----\n\n");
        1:   67:    memcpy(&copyG, &G, sizeof(struct gameState));
        1:   68:    int z = copyG.handCount[player];
        -:   69:    int j;
        1:   70:    int coinValue = 1;
        1:   71:    int expectedCoinCount = z *coinValue;
        -:   72:
        -:   73:
        -:   74:
     2002:   75:    for (i = 0; i < x; i++) {
        -:   76:        //fill hand with copper coins
    12000:   77:        for (j = 0; j < z; j++) {
     5000:   78:            copyG.hand[player][j] = copper;
     5000:   79:        }
     1000:   80:        updateCoins(player, &copyG, bonus);
     1000:   81:        if (copyG.coins != expectedCoinCount) {
    #####:   82:            printf("test 3 coin count fail, Got: %d, Expected: %d\n", copyG.coins, expectedCoinCount);
    #####:   83:            pass = 0;
    #####:   84:        }
     1000:   85:    }
        1:   86:    printf("Coins: %d, Expected: %d \n\n", copyG.coins, expectedCoinCount);
        -:   87:
        -:   88:    //test count with silver coin cards
        1:   89:    printf("\n----  - TEST 4:Silver Coin Count -  ----\n\n");
        1:   90:    memcpy(&copyG, &G, sizeof(struct gameState));
        1:   91:    z = copyG.handCount[player];
        1:   92:    coinValue = 2;
        1:   93:    expectedCoinCount = z *coinValue;
        -:   94:
        -:   95:
        -:   96:
     2002:   97:    for (i = 0; i < x; i++) {
        -:   98:        //fill hand with silver coins
    12000:   99:        for (j = 0; j < z; j++) {
     5000:  100:            copyG.hand[player][j] = silver;
     5000:  101:        }
     1000:  102:        updateCoins(player, &copyG, bonus);
     1000:  103:        if (copyG.coins != expectedCoinCount) {
    #####:  104:            printf("test 4 coin count fail, Got: %d, Expected: %d\n", copyG.coins, expectedCoinCount);
    #####:  105:            pass = 0;
    #####:  106:        }
     1000:  107:    }
        1:  108:    printf("Coins: %d, Expected: %d \n\n", copyG.coins, expectedCoinCount);
        -:  109:
        -:  110:    //test count with gold coin cards
        1:  111:    printf("\n----  - TEST 5:Gold Coin Count -  ----\n\n");
        1:  112:    memcpy(&copyG, &G, sizeof(struct gameState));
        1:  113:    z = copyG.handCount[player];
        1:  114:    coinValue = 3;
        1:  115:    expectedCoinCount = z *coinValue;
        -:  116:
        -:  117:
        -:  118:
     2002:  119:    for (i = 0; i < x; i++) {
        -:  120:        //fill hand with gold coins
    12000:  121:        for (j = 0; j < z; j++) {
     5000:  122:            copyG.hand[player][j] = gold;
     5000:  123:        }
     1000:  124:        updateCoins(player, &copyG, bonus);
     1000:  125:        if (copyG.coins != expectedCoinCount) {
    #####:  126:            printf("test 5 coin count fail, Got: %d, Expected: %d\n", copyG.coins, expectedCoinCount);
    #####:  127:            pass = 0;
    #####:  128:        }
     1000:  129:    }
        1:  130:    printf("Coins: %d, Expected: %d \n\n", copyG.coins, expectedCoinCount);
        -:  131:
        -:  132:    //test count with mixed cards
        1:  133:    printf("\n----  - TEST 6:Mixed Coin Count -  ----\n\n");
        1:  134:    memcpy(&copyG, &G, sizeof(struct gameState));
        1:  135:    copyG.handCount[player] = 5;
        1:  136:    expectedCoinCount = 9;
        -:  137:
        -:  138:
        -:  139:
     2002:  140:    for (i = 0; i < x; i++) {
        -:  141:        //fill hand with coin cards
     1000:  142:        copyG.hand[player][0] = copper;
     1000:  143:        copyG.hand[player][1] = copper;
     1000:  144:        copyG.hand[player][2] = silver;
     1000:  145:        copyG.hand[player][3] = silver;
     1000:  146:        copyG.hand[player][4] = gold;
        -:  147:
     1000:  148:        updateCoins(player, &copyG, bonus);
     1000:  149:        if (copyG.coins != expectedCoinCount) {
    #####:  150:            printf("test 6 coin count fail, Got: %d, Expected: %d\n", copyG.coins, expectedCoinCount);
    #####:  151:            pass = 0;
    #####:  152:        }
     1000:  153:    }
        1:  154:    printf("Coins: %d, Expected: %d \n\n", copyG.coins, expectedCoinCount);
        -:  155:
        -:  156:    //test addition of bonus
        1:  157:    printf("\n----  - TEST 7: Bonus -  ----\n\n");
        1:  158:    memcpy(&copyG, &G, sizeof(struct gameState));
        1:  159:    copyG.handCount[player] = 0;
        1:  160:    bonus = 1;
        1:  161:    expectedCoinCount = 1;
        -:  162:
        -:  163:
     2002:  164:    for (i = 0; i < x; i++) {
        -:  165:        //fill hand with coins
        -:  166:
     1000:  167:        updateCoins(player, &copyG, bonus);
     1000:  168:        if (copyG.coins != expectedCoinCount) {
    #####:  169:            printf("test 7 coin count fail, Got: %d, Expected: %d\n", copyG.coins, expectedCoinCount);
    #####:  170:            pass = 0;
    #####:  171:        }
     1000:  172:    }
        1:  173:    printf("Coins: %d, Expected: %d \n\n", copyG.coins, expectedCoinCount);
        -:  174:
        -:  175:    //Final bool check to see if testing passed or failed,  prints result to standard out
        1:  176:    if (pass) {
        1:  177:        printf("->->  - TEST SUCCESSFULLY COMPLETED -  <-<-\n");
        1:  178:    } else{
    #####:  179:        printf("->->  - TEST FAILED -  <-<-\n");
        -:  180:    }
        1:  181:    return 0;
        -:  182:};
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://test message
        -:    9:
        -:   10:int smithyEffect(struct gameState *state, int currentPlayer, int handPos);
        -:   11:
        -:   12:int council_room_effect(struct gameState *state, int currentPlayer, int handPos);
        -:   13:
        -:   14:int adventurerEffect(struct gameState *state, int currentPlayer);
        -:   15:
        -:   16:int feastEffect(struct gameState *state, int currentPlayer, int choice1);
        -:   17:
        -:   18:int gardenEffect();
        -:   19:
        -:   20:
        -:   21:int compare(const void* a, const void* b) {
      196:   22:  if (*(int*)a > *(int*)b)
    #####:   23:    return 1;
      196:   24:  if (*(int*)a < *(int*)b)
       70:   25:    return -1;
      126:   26:  return 0;
      196:   27:}
        -:   28:
        -:   29:struct gameState* newGame() {
    #####:   30:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   31:  return g;
        -:   32:}
        -:   33:
        -:   34:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   35:		  int k8, int k9, int k10) {
    #####:   36:  int* k = malloc(10 * sizeof(int));
    #####:   37:  k[0] = k1;
    #####:   38:  k[1] = k2;
    #####:   39:  k[2] = k3;
    #####:   40:  k[3] = k4;
    #####:   41:  k[4] = k5;
    #####:   42:  k[5] = k6;
    #####:   43:  k[6] = k7;
    #####:   44:  k[7] = k8;
    #####:   45:  k[8] = k9;
    #####:   46:  k[9] = k10;
    #####:   47:  return k;
        -:   48:}
        -:   49:
        -:   50:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   51:		   struct gameState *state) {
        -:   52:
        -:   53:  int i;
        -:   54:  int j;
        -:   55:  int it;			
        -:   56:  //set up random number generator
        7:   57:  SelectStream(1);
        7:   58:  PutSeed((long)randomSeed);
        -:   59:  
        -:   60:  //check number of players
       14:   61:  if (numPlayers > MAX_PLAYERS || numPlayers < 0)
        -:   62:    {
    #####:   63:      return -1;
        -:   64:    }
        -:   65:
        -:   66:  //set number of players
        7:   67:  state->numPlayers = numPlayers;
        -:   68:
        -:   69:  //check selected kingdom cards are different
      154:   70:  for (i = 0; i < 10; i++)
        -:   71:    {
     1540:   72:      for (j = 0; j < 10; j++)
        -:   73:        {
     1330:   74:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   75:	    {
    #####:   76:	      return -1;
        -:   77:	    }
      700:   78:        }
       70:   79:    }
        -:   80:
        -:   81:
        -:   82:  //initialize supply
        -:   83:  ///////////////////////////////
        -:   84:
        -:   85:  //set number of Curse cards
        7:   86:  if (numPlayers == 2)
        -:   87:    {
        7:   88:      state->supplyCount[curse] = 10;
        7:   89:    }
    #####:   90:  else if (numPlayers == 3)
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 20;
    #####:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[curse] = 30;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Victory cards
        7:  100:  if (numPlayers == 2)
        -:  101:    {
        7:  102:      state->supplyCount[estate] = 8;
        7:  103:      state->supplyCount[duchy] = 8;
        7:  104:      state->supplyCount[province] = 8;
        7:  105:    }
        -:  106:  else
        -:  107:    {
    #####:  108:      state->supplyCount[estate] = 12;
    #####:  109:      state->supplyCount[duchy] = 12;
    #####:  110:      state->supplyCount[province] = 12;
        -:  111:    }
        -:  112:
        -:  113:  //set number of Treasure cards
        7:  114:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  115:  state->supplyCount[silver] = 40;
        7:  116:  state->supplyCount[gold] = 30;
        -:  117:
        -:  118:  //set number of Kingdom cards
      294:  119:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  120:    {
     2310:  121:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  122:	{
     1085:  123:	  if (kingdomCards[j] == i)
        -:  124:	    {
        -:  125:	      //check if card is a 'Victory' Kingdom card
      140:  126:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  127:		{
        7:  128:		  if (numPlayers == 2){ 
        7:  129:		    state->supplyCount[i] = 8; 
        7:  130:		  }
    #####:  131:		  else{ state->supplyCount[i] = 12; }
        7:  132:		}
        -:  133:	      else
        -:  134:		{
       63:  135:		  state->supplyCount[i] = 10;
        -:  136:		}
       70:  137:	      break;
        -:  138:	    }
        -:  139:	  else    //card is not in the set choosen for the game
        -:  140:	    {
     1015:  141:	      state->supplyCount[i] = -1;
        -:  142:	    }
     1015:  143:	}
        -:  144:
      140:  145:    }
        -:  146:
        -:  147:  ////////////////////////
        -:  148:  //supply intilization complete
        -:  149:
        -:  150:  //set player decks
       42:  151:  for (i = 0; i < numPlayers; i++)
        -:  152:    {
       14:  153:      state->deckCount[i] = 0;
      112:  154:      for (j = 0; j < 3; j++)
        -:  155:	{
       42:  156:	  state->deck[i][j] = estate;
       42:  157:	  state->deckCount[i]++;
       42:  158:	}
      224:  159:      for (j = 3; j < 10; j++)
        -:  160:	{
       98:  161:	  state->deck[i][j] = copper;
       98:  162:	  state->deckCount[i]++;		
       98:  163:	}
       14:  164:    }
        -:  165:
        -:  166:  //shuffle player decks
       42:  167:  for (i = 0; i < numPlayers; i++)
        -:  168:    {
       14:  169:      if ( shuffle(i, state) < 0 )
        -:  170:	{
    #####:  171:	  return -1;
        -:  172:	}
       14:  173:    }
        -:  174:
        -:  175:  //draw player hands
       42:  176:  for (i = 0; i < numPlayers; i++)
        -:  177:    {  
        -:  178:      //initialize hand size to zero
       14:  179:      state->handCount[i] = 0;
       14:  180:      state->discardCount[i] = 0;
        -:  181:      //draw 5 cards
        -:  182:      // for (j = 0; j < 5; j++)
        -:  183:      //	{
        -:  184:      //	  drawCard(i, state);
        -:  185:      //	}
       14:  186:    }
        -:  187:  
        -:  188:  //set embargo tokens to 0 for all supply piles
      392:  189:  for (i = 0; i <= treasure_map; i++)
        -:  190:    {
      189:  191:      state->embargoTokens[i] = 0;
      189:  192:    }
        -:  193:
        -:  194:  //initialize first player's turn
        7:  195:  state->outpostPlayed = 0;
        7:  196:  state->phase = 0;
        7:  197:  state->numActions = 1;
        7:  198:  state->numBuys = 1;
        7:  199:  state->playedCardCount = 0;
        7:  200:  state->whoseTurn = 0;
        7:  201:  state->handCount[state->whoseTurn] = 0;
        -:  202:  //int it; move to top
        -:  203:
        -:  204:  //Moved draw cards to here, only drawing at the start of a turn
       84:  205:  for (it = 0; it < 5; it++){
       35:  206:    drawCard(state->whoseTurn, state);
       35:  207:  }
        -:  208:
        7:  209:  updateCoins(state->whoseTurn, state, 0);
        -:  210:
        7:  211:  return 0;
        7:  212:}
        -:  213:
        -:  214:int shuffle(int player, struct gameState *state) {
        -:  215: 
        -:  216:
        -:  217:  int newDeck[MAX_DECK];
       14:  218:  int newDeckPos = 0;
        -:  219:  int card;
        -:  220:  int i;
        -:  221:
       14:  222:  if (state->deckCount[player] < 1)
    #####:  223:    return -1;
       14:  224:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  225:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  226:
      308:  227:  while (state->deckCount[player] > 0) {
      140:  228:    card = floor(Random() * state->deckCount[player]);
      140:  229:    newDeck[newDeckPos] = state->deck[player][card];
      140:  230:    newDeckPos++;
     1036:  231:    for (i = card; i < state->deckCount[player]-1; i++) {
      378:  232:      state->deck[player][i] = state->deck[player][i+1];
      378:  233:    }
      140:  234:    state->deckCount[player]--;
        -:  235:  }
      308:  236:  for (i = 0; i < newDeckPos; i++) {
      140:  237:    state->deck[player][i] = newDeck[i];
      140:  238:    state->deckCount[player]++;
      140:  239:  }
        -:  240:
       14:  241:  return 0;
       14:  242:}
        -:  243:
        -:  244:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  245:{	
        -:  246:  int card;
    #####:  247:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  248:
        -:  249:  //check if it is the right phase
    #####:  250:  if (state->phase != 0)
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //check if player has enough actions
    #####:  256:  if ( state->numActions < 1 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //get card played
    #####:  262:  card = handCard(handPos, state);
        -:  263:	
        -:  264:  //check if selected card is an action
    #####:  265:  if ( card < adventurer || card > treasure_map )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //play card
    #####:  271:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  272:    {
    #####:  273:      return -1;
        -:  274:    }
        -:  275:	
        -:  276:  //reduce number of actions
    #####:  277:  state->numActions--;
        -:  278:
        -:  279:  //update coins (Treasure cards may be added with card draws)
    #####:  280:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  281:	
    #####:  282:  return 0;
    #####:  283:}
        -:  284:
        -:  285:int buyCard(int supplyPos, struct gameState *state) {
        -:  286:  int who;
        -:  287:  if (DEBUG){
        -:  288:    printf("Entering buyCard...\n");
        -:  289:  }
        -:  290:
        -:  291:  // I don't know what to do about the phase thing.
        -:  292:
    #####:  293:  who = state->whoseTurn;
        -:  294:
    #####:  295:  if (state->numBuys < 1){
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (supplyCount(supplyPos, state) <1){
        -:  300:    if (DEBUG)
        -:  301:      printf("There are not any of that type of card left\n");
    #####:  302:    return -1;
    #####:  303:  } else if (state->coins < getCost(supplyPos)){
        -:  304:    if (DEBUG)
        -:  305:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  306:    return -1;
        -:  307:  } else {
    #####:  308:    state->phase=1;
        -:  309:    //state->supplyCount[supplyPos]--;
    #####:  310:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  311:
    #####:  312:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  313:    state->numBuys--;
        -:  314:    if (DEBUG)
        -:  315:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  316:  }
        -:  317:
        -:  318:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  319:  //state->discardCount[who]++;
        -:  320:
    #####:  321:  return 0;
    #####:  322:}
        -:  323:
        -:  324:int numHandCards(struct gameState *state) {
    14000:  325:  return state->handCount[ whoseTurn(state) ];
        -:  326:}
        -:  327:
        -:  328:int handCard(int handPos, struct gameState *state) {
    22000:  329:  int currentPlayer = whoseTurn(state);
    22000:  330:  return state->hand[currentPlayer][handPos];
        -:  331:}
        -:  332:
        -:  333:int supplyCount(int card, struct gameState *state) {
     9001:  334:  return state->supplyCount[card];
        -:  335:}
        -:  336:
        -:  337:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  338:  int i;
     4000:  339:  int count = 0;
        -:  340:
    48000:  341:  for (i = 0; i < state->deckCount[player]; i++)
        -:  342:    {
    23000:  343:      if (state->deck[player][i] == card) count++;
    20000:  344:    }
        -:  345:
    48000:  346:  for (i = 0; i < state->handCount[player]; i++)
        -:  347:    {
    24000:  348:      if (state->hand[player][i] == card) count++;
    20000:  349:    }
        -:  350:
     8000:  351:  for (i = 0; i < state->discardCount[player]; i++)
        -:  352:    {
    #####:  353:      if (state->discard[player][i] == card) count++;
    #####:  354:    }
        -:  355:
     4000:  356:  return count;
        -:  357:}
        -:  358:
        -:  359:int whoseTurn(struct gameState *state) {
    49014:  360:  return state->whoseTurn;
        -:  361:}
        -:  362:
        -:  363:int endTurn(struct gameState *state) {
        -:  364:  int k;
        -:  365:  int i;
    #####:  366:  int currentPlayer = whoseTurn(state);
        -:  367:  
        -:  368:  //Discard hand
    #####:  369:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  370:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  371:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  372:  }
    #####:  373:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  374:    
        -:  375:  //Code for determining the player
    #####:  376:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  377:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  378:  }
        -:  379:  else{
    #####:  380:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  381:  }
        -:  382:
    #####:  383:  state->outpostPlayed = 0;
    #####:  384:  state->phase = 0;
    #####:  385:  state->numActions = 1;
    #####:  386:  state->coins = 0;
    #####:  387:  state->numBuys = 1;
    #####:  388:  state->playedCardCount = 0;
    #####:  389:  state->handCount[state->whoseTurn] = 0;
        -:  390:
        -:  391:  //int k; move to top
        -:  392:  //Next player draws hand
    #####:  393:  for (k = 0; k < 5; k++){
    #####:  394:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  395:  }
        -:  396:
        -:  397:  //Update money
    #####:  398:  updateCoins(state->whoseTurn, state , 0);
        -:  399:
    #####:  400:  return 0;
        -:  401:}
        -:  402:
        -:  403:int isGameOver(struct gameState *state) {
        -:  404:  int i;
        -:  405:  int j;
        -:  406:	
        -:  407:  //if stack of Province cards is empty, the game ends
    #####:  408:  if (state->supplyCount[province] == 0)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
        -:  413:  //if three supply pile are at 0, the game ends
    #####:  414:  j = 0;
    #####:  415:  for (i = 0; i < 25; i++)
        -:  416:    {
    #####:  417:      if (state->supplyCount[i] == 0)
        -:  418:	{
    #####:  419:	  j++;
    #####:  420:	}
    #####:  421:    }
    #####:  422:  if ( j >= 3)
        -:  423:    {
    #####:  424:      return 1;
        -:  425:    }
        -:  426:
    #####:  427:  return 0;
    #####:  428:}
        -:  429:
        -:  430:int scoreFor (int player, struct gameState *state) {
        -:  431:
        -:  432:  int i;
    #####:  433:  int score = 0;
        -:  434:  //score from hand
    #####:  435:  for (i = 0; i < state->handCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  443:    }
        -:  444:
        -:  445:  //score from discard
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  454:    }
        -:  455:
        -:  456:  //score from deck
    #####:  457:  for (i = 0; i < state->discardCount[player]; i++)
        -:  458:    {
    #####:  459:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  460:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  461:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  462:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  463:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  465:    }
        -:  466:
    #####:  467:  return score;
        -:  468:}
        -:  469:
        -:  470:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  471:  int i;	
        -:  472:  int j;
        -:  473:  int highScore;
        -:  474:  int currentPlayer;
        -:  475:
        -:  476:  //get score for each player
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:    {
        -:  479:      //set unused player scores to -9999
    #####:  480:      if (i >= state->numPlayers)
        -:  481:	{
    #####:  482:	  players[i] = -9999;
    #####:  483:	}
        -:  484:      else
        -:  485:	{
    #####:  486:	  players[i] = scoreFor (i, state);
        -:  487:	}
    #####:  488:    }
        -:  489:
        -:  490:  //find highest score
    #####:  491:  j = 0;
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if (players[i] > players[j])
        -:  495:	{
    #####:  496:	  j = i;
    #####:  497:	}
    #####:  498:    }
    #####:  499:  highScore = players[j];
        -:  500:
        -:  501:  //add 1 to players who had less turns
    #####:  502:  currentPlayer = whoseTurn(state);
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if ( players[i] == highScore && i > currentPlayer )
        -:  506:	{
    #####:  507:	  players[i]++;
    #####:  508:	}
    #####:  509:    }
        -:  510:
        -:  511:  //find new highest score
    #####:  512:  j = 0;
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:      if ( players[i] > players[j] )
        -:  516:	{
    #####:  517:	  j = i;
    #####:  518:	}
    #####:  519:    }
    #####:  520:  highScore = players[j];
        -:  521:
        -:  522:  //set winners in array to 1 and rest to 0
    #####:  523:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  524:    {
    #####:  525:      if ( players[i] == highScore )
        -:  526:	{
    #####:  527:	  players[i] = 1;
    #####:  528:	}
        -:  529:      else
        -:  530:	{
    #####:  531:	  players[i] = 0;
        -:  532:	}
    #####:  533:    }
        -:  534:
    #####:  535:  return 0;
        -:  536:}
        -:  537:
        -:  538:int drawCard(int player, struct gameState *state)
        -:  539:{	int count;
        -:  540:  int deckCounter;
    28041:  541:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  542:    
        -:  543:    //Step 1 Shuffle the discard pile back into a deck
        -:  544:    int i;
        -:  545:    //Move discard to deck
    #####:  546:    for (i = 0; i < state->discardCount[player];i++){
    #####:  547:      state->deck[player][i] = state->discard[player][i];
    #####:  548:      state->discard[player][i] = -1;
    #####:  549:    }
        -:  550:
    #####:  551:    state->deckCount[player] = state->discardCount[player];
    #####:  552:    state->discardCount[player] = 0;//Reset discard
        -:  553:
        -:  554:    //Shufffle the deck
    #####:  555:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  556:   
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  559:    }
        -:  560:    
    #####:  561:    state->discardCount[player] = 0;
        -:  562:
        -:  563:    //Step 2 Draw Card
    #####:  564:    count = state->handCount[player];//Get current player's hand count
        -:  565:    
        -:  566:    if (DEBUG){//Debug statements
        -:  567:      printf("Current hand count: %d\n", count);
        -:  568:    }
        -:  569:    
    #####:  570:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  571:
    #####:  572:    if (deckCounter == 0)
    #####:  573:      return -1;
        -:  574:
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
    #####:  578:  }
        -:  579:
        -:  580:  else{
    28041:  581:    int count = state->handCount[player];//Get current hand count for player
        -:  582:    int deckCounter;
        -:  583:    if (DEBUG){//Debug statements
        -:  584:      printf("Current hand count: %d\n", count);
        -:  585:    }
        -:  586:
    28041:  587:    deckCounter = state->deckCount[player];//Create holder for the deck count
    28041:  588:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    28041:  589:    state->deckCount[player]--;
    28041:  590:    state->handCount[player]++;//Increment hand count
        -:  591:  }
        -:  592:
    28041:  593:  return 0;
    28041:  594:}
        -:  595:
        -:  596:int getCost(int cardNumber)
        -:  597:{
     5000:  598:  switch( cardNumber ) 
        -:  599:    {
        -:  600:    case curse:
     1000:  601:      return 0;
        -:  602:    case estate:
    #####:  603:      return 2;
        -:  604:    case duchy:
    #####:  605:      return 5;
        -:  606:    case province:
    #####:  607:      return 8;
        -:  608:    case copper:
    #####:  609:      return 0;
        -:  610:    case silver:
     3000:  611:      return 3;
        -:  612:    case gold:
     1000:  613:      return 6;
        -:  614:    case adventurer:
    #####:  615:      return 6;
        -:  616:    case council_room:
    #####:  617:      return 5;
        -:  618:    case feast:
    #####:  619:      return 4;
        -:  620:    case gardens:
    #####:  621:      return 4;
        -:  622:    case mine:
    #####:  623:      return 5;
        -:  624:    case remodel:
    #####:  625:      return 4;
        -:  626:    case smithy:
    #####:  627:      return 4;
        -:  628:    case village:
    #####:  629:      return 3;
        -:  630:    case baron:
    #####:  631:      return 4;
        -:  632:    case great_hall:
    #####:  633:      return 3;
        -:  634:    case minion:
    #####:  635:      return 5;
        -:  636:    case steward:
    #####:  637:      return 3;
        -:  638:    case tribute:
    #####:  639:      return 5;
        -:  640:    case ambassador:
    #####:  641:      return 3;
        -:  642:    case cutpurse:
    #####:  643:      return 4;
        -:  644:    case embargo: 
    #####:  645:      return 2;
        -:  646:    case outpost:
    #####:  647:      return 5;
        -:  648:    case salvager:
    #####:  649:      return 4;
        -:  650:    case sea_hag:
    #####:  651:      return 4;
        -:  652:    case treasure_map:
    #####:  653:      return 4;
        -:  654:    }
        -:  655:	
    #####:  656:  return -1;
     5000:  657:}
        -:  658:
        -:  659:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  660:{
        -:  661:  int i;
        -:  662:  int j;
        -:  663:  int k;
        -:  664:  int x;
        -:  665:  int index;
    13003:  666:  int currentPlayer = whoseTurn(state);
    13003:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
    13003:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
    13003:  671:  int drawntreasure=0;
        -:  672:  int cardDrawn;
    13003:  673:  int z = 0;// this is the counter for the temp hand
    13003:  674:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  675:    nextPlayer = 0;
    #####:  676:  }
        -:  677:  //uses switch to select card and perform actions
    13003:  678:  switch( card ) 
        -:  679:    {
        -:  680:		  
        -:  681:   case adventurer:
     4000:  682:	return adventurerEffect(state, currentPlayer);
        -:  683:			
        -:  684:    case council_room:
     3001:  685:		return council_room_effect(state, currentPlayer, handPos);
        -:  686:			
        -:  687:    case feast:
     5001:  688:		return feastEffect(state, currentPlayer, choice1);
        -:  689:			
        -:  690:    case gardens:
    #####:  691:      return gardenEffect();
        -:  692:			
        -:  693:    case mine:
    #####:  694:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  695:
    #####:  696:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  697:	{
    #####:  698:	  return -1;
        -:  699:	}
        -:  700:		
    #####:  701:      if (choice2 > treasure_map || choice2 < curse)
        -:  702:	{
    #####:  703:	  return -1;
        -:  704:	}
        -:  705:
    #####:  706:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  707:	{
    #####:  708:	  return -1;
        -:  709:	}
        -:  710:
    #####:  711:      gainCard(choice2, state, 2, currentPlayer);
        -:  712:
        -:  713:      //discard card from hand
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:
        -:  716:      //discard trashed card
    #####:  717:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  718:	{
    #####:  719:	  if (state->hand[currentPlayer][i] == j)
        -:  720:	    {
    #####:  721:	      discardCard(i, currentPlayer, state, 0);			
    #####:  722:	      break;
        -:  723:	    }
    #####:  724:	}
        -:  725:			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case remodel:
    #####:  729:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  730:
    #####:  731:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  732:	{
    #####:  733:	  return -1;
        -:  734:	}
        -:  735:
    #####:  736:      gainCard(choice2, state, 0, currentPlayer);
        -:  737:
        -:  738:      //discard card from hand
    #####:  739:      discardCard(handPos, currentPlayer, state, 0);
        -:  740:
        -:  741:      //discard trashed card
    #####:  742:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  743:	{
    #####:  744:	  if (state->hand[currentPlayer][i] == j)
        -:  745:	    {
    #####:  746:	      discardCard(i, currentPlayer, state, 0);			
    #####:  747:	      break;
        -:  748:	    }
    #####:  749:	}
        -:  750:
        -:  751:
    #####:  752:      return 0;
        -:  753:		
        -:  754:    case smithy:
        -:  755:      //+3 Cards
     1001:  756:      return smithyEffect(state, currentPlayer, handPos);
        -:  757:      
        -:  758:		
        -:  759:    case village:
        -:  760:      //+1 Card
    #####:  761:      drawCard(currentPlayer, state);
        -:  762:			
        -:  763:      //+2 Actions
    #####:  764:      state->numActions = state->numActions + 2;
        -:  765:			
        -:  766:      //discard played card from hand
    #####:  767:      discardCard(handPos, currentPlayer, state, 0);
    #####:  768:      return 0;
        -:  769:		
        -:  770:    case baron:
    #####:  771:      state->numBuys++;//Increase buys by 1!
    #####:  772:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  773:	int p = 0;//Iterator for hand!
    #####:  774:	int card_not_discarded = 1;//Flag for discard set!
    #####:  775:	while(card_not_discarded){
    #####:  776:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  777:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  778:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  779:	    state->discardCount[currentPlayer]++;
    #####:  780:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  781:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  782:	    }
    #####:  783:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  784:	    state->handCount[currentPlayer]--;
    #####:  785:	    card_not_discarded = 0;//Exit the loop
    #####:  786:	  }
    #####:  787:	  else if (p > state->handCount[currentPlayer]){
        -:  788:	    if(DEBUG) {
        -:  789:	      printf("No estate cards in your hand, invalid choice\n");
        -:  790:	      printf("Must gain an estate if there are any\n");
        -:  791:	    }
    #####:  792:	    if (supplyCount(estate, state) > 0){
    #####:  793:	      gainCard(estate, state, 0, currentPlayer);
    #####:  794:	      state->supplyCount[estate]--;//Decrement estates
    #####:  795:	      if (supplyCount(estate, state) == 0){
    #####:  796:		isGameOver(state);
    #####:  797:	      }
    #####:  798:	    }
    #####:  799:	    card_not_discarded = 0;//Exit the loop
    #####:  800:	  }
        -:  801:			    
        -:  802:	  else{
    #####:  803:	    p++;//Next card
        -:  804:	  }
        -:  805:	}
    #####:  806:      }
        -:  807:			    
        -:  808:      else{
    #####:  809:	if (supplyCount(estate, state) > 0){
    #####:  810:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  811:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  812:	  if (supplyCount(estate, state) == 0){
    #####:  813:	    isGameOver(state);
    #####:  814:	  }
    #####:  815:	}
        -:  816:      }
        -:  817:	    
        -:  818:      
    #####:  819:      return 0;
        -:  820:		
        -:  821:    case great_hall:
        -:  822:      //+1 Card
    #####:  823:      drawCard(currentPlayer, state);
        -:  824:			
        -:  825:      //+1 Actions
    #####:  826:      state->numActions++;
        -:  827:			
        -:  828:      //discard card from hand
    #####:  829:      discardCard(handPos, currentPlayer, state, 0);
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case minion:
        -:  833:      //+1 action
    #####:  834:      state->numActions++;
        -:  835:			
        -:  836:      //discard card from hand
    #####:  837:      discardCard(handPos, currentPlayer, state, 0);
        -:  838:			
    #####:  839:      if (choice1)		//+2 coins
        -:  840:	{
    #####:  841:	  state->coins = state->coins + 2;
    #####:  842:	}
        -:  843:			
    #####:  844:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  845:	{
        -:  846:	  //discard hand
    #####:  847:	  while(numHandCards(state) > 0)
        -:  848:	    {
    #####:  849:	      discardCard(handPos, currentPlayer, state, 0);
        -:  850:	    }
        -:  851:				
        -:  852:	  //draw 4
    #####:  853:	  for (i = 0; i < 4; i++)
        -:  854:	    {
    #####:  855:	      drawCard(currentPlayer, state);
    #####:  856:	    }
        -:  857:				
        -:  858:	  //other players discard hand and redraw if hand size > 4
    #####:  859:	  for (i = 0; i < state->numPlayers; i++)
        -:  860:	    {
    #####:  861:	      if (i != currentPlayer)
        -:  862:		{
    #####:  863:		  if ( state->handCount[i] > 4 )
        -:  864:		    {
        -:  865:		      //discard hand
    #####:  866:		      while( state->handCount[i] > 0 )
        -:  867:			{
    #####:  868:			  discardCard(handPos, i, state, 0);
        -:  869:			}
        -:  870:							
        -:  871:		      //draw 4
    #####:  872:		      for (j = 0; j < 4; j++)
        -:  873:			{
    #####:  874:			  drawCard(i, state);
    #####:  875:			}
    #####:  876:		    }
    #####:  877:		}
    #####:  878:	    }
        -:  879:				
    #####:  880:	}
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case steward:
    #####:  884:      if (choice1 == 1)
        -:  885:	{
        -:  886:	  //+2 cards
    #####:  887:	  drawCard(currentPlayer, state);
    #####:  888:	  drawCard(currentPlayer, state);
    #####:  889:	}
    #####:  890:      else if (choice1 == 2)
        -:  891:	{
        -:  892:	  //+2 coins
    #####:  893:	  state->coins = state->coins + 2;
    #####:  894:	}
        -:  895:      else
        -:  896:	{
        -:  897:	  //trash 2 cards in hand
    #####:  898:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  899:	  discardCard(choice3, currentPlayer, state, 1);
        -:  900:	}
        -:  901:			
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case tribute:
    #####:  907:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  908:	if (state->deckCount[nextPlayer] > 0){
    #####:  909:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  910:	  state->deckCount[nextPlayer]--;
    #####:  911:	}
    #####:  912:	else if (state->discardCount[nextPlayer] > 0){
    #####:  913:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  914:	  state->discardCount[nextPlayer]--;
    #####:  915:	}
        -:  916:	else{
        -:  917:	  //No Card to Reveal
        -:  918:	  if (DEBUG){
        -:  919:	    printf("No cards to reveal\n");
        -:  920:	  }
        -:  921:	}
    #####:  922:      }
        -:  923:	    
        -:  924:      else{
    #####:  925:	if (state->deckCount[nextPlayer] == 0){
    #####:  926:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  927:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  928:	    state->deckCount[nextPlayer]++;
    #####:  929:	    state->discard[nextPlayer][i] = -1;
    #####:  930:	    state->discardCount[nextPlayer]--;
    #####:  931:	  }
        -:  932:			    
    #####:  933:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  934:	} 
    #####:  935:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  937:	state->deckCount[nextPlayer]--;
    #####:  938:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:	state->deckCount[nextPlayer]--;
        -:  941:      }    
        -:  942:		       
    #####:  943:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  944:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  945:	state->playedCardCount++;
    #####:  946:	tributeRevealedCards[1] = -1;
    #####:  947:      }
        -:  948:
    #####:  949:      for (i = 0; i <= 2; i ++){
    #####:  950:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  951:	  state->coins += 2;
    #####:  952:	}
        -:  953:		    
    #####:  954:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
        -:  958:	else{//Action Card
    #####:  959:	  state->numActions = state->numActions + 2;
        -:  960:	}
    #####:  961:      }
        -:  962:	    
    #####:  963:      return 0;
        -:  964:		
        -:  965:    case ambassador:
    #####:  966:      j = 0;		//used to check if player has enough cards to discard
        -:  967:
    #####:  968:      if (choice2 > 2 || choice2 < 0)
        -:  969:	{
    #####:  970:	  return -1;				
        -:  971:	}
        -:  972:
    #####:  973:      if (choice1 == handPos)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  979:	{
    #####:  980:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  981:	    {
    #####:  982:	      j++;
    #####:  983:	    }
    #####:  984:	}
    #####:  985:      if (j < choice2)
        -:  986:	{
    #####:  987:	  return -1;				
        -:  988:	}
        -:  989:
        -:  990:      if (DEBUG) 
        -:  991:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  992:
        -:  993:      //increase supply count for choosen card by amount being discarded
    #####:  994:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  995:			
        -:  996:      //each other player gains a copy of revealed card
    #####:  997:      for (i = 0; i < state->numPlayers; i++)
        -:  998:	{
    #####:  999:	  if (i != currentPlayer)
        -: 1000:	    {
    #####: 1001:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1002:	    }
    #####: 1003:	}
        -: 1004:
        -: 1005:      //discard played card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1007:
        -: 1008:      //trash copies of cards returned to supply
    #####: 1009:      for (j = 0; j < choice2; j++)
        -: 1010:	{
    #####: 1011:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1012:	    {
    #####: 1013:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1014:		{
    #####: 1015:		  discardCard(i, currentPlayer, state, 1);
    #####: 1016:		  break;
        -: 1017:		}
    #####: 1018:	    }
    #####: 1019:	}			
        -: 1020:
    #####: 1021:      return 0;
        -: 1022:		
        -: 1023:    case cutpurse:
        -: 1024:
    #####: 1025:      updateCoins(currentPlayer, state, 2);
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
        -: 1029:	    {
    #####: 1030:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1031:		{
    #####: 1032:		  if (state->hand[i][j] == copper)
        -: 1033:		    {
    #####: 1034:		      discardCard(j, i, state, 0);
    #####: 1035:		      break;
        -: 1036:		    }
    #####: 1037:		  if (j == state->handCount[i])
        -: 1038:		    {
    #####: 1039:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1040:			{
        -: 1041:			  if (DEBUG)
        -: 1042:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1043:			}	
    #####: 1044:		      break;
        -: 1045:		    }		
    #####: 1046:		}
        -: 1047:					
    #####: 1048:	    }
        -: 1049:				
    #####: 1050:	}				
        -: 1051:
        -: 1052:      //discard played card from hand
    #####: 1053:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:
        -: 1057:		
        -: 1058:    case embargo: 
        -: 1059:      //+2 Coins
    #####: 1060:      state->coins = state->coins + 2;
        -: 1061:			
        -: 1062:      //see if selected pile is in play
    #####: 1063:      if ( state->supplyCount[choice1] == -1 )
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:			
        -: 1068:      //add embargo token to selected supply pile
    #####: 1069:      state->embargoTokens[choice1]++;
        -: 1070:			
        -: 1071:      //trash card
    #####: 1072:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case outpost:
        -: 1076:      //set outpost flag
    #####: 1077:      state->outpostPlayed++;
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case salvager:
        -: 1084:      //+1 buy
    #####: 1085:      state->numBuys++;
        -: 1086:			
    #####: 1087:      if (choice1)
        -: 1088:	{
        -: 1089:	  //gain coins equal to trashed card
    #####: 1090:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1091:	  //trash card
    #####: 1092:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1093:	}
        -: 1094:			
        -: 1095:      //discard card
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1097:      return 0;
        -: 1098:		
        -: 1099:    case sea_hag:
    #####: 1100:      for (i = 0; i < state->numPlayers; i++){
    #####: 1101:	if (i != currentPlayer){
    #####: 1102:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1103:	  state->discardCount[i]++;
    #####: 1104:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1105:	}
    #####: 1106:      }
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case treasure_map:
        -: 1110:      //search hand for another treasure_map
    #####: 1111:      index = -1;
    #####: 1112:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1113:	{
    #####: 1114:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1115:	    {
    #####: 1116:	      index = i;
    #####: 1117:	      break;
        -: 1118:	    }
    #####: 1119:	}
    #####: 1120:      if (index > -1)
        -: 1121:	{
        -: 1122:	  //trash both treasure cards
    #####: 1123:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1124:	  discardCard(index, currentPlayer, state, 1);
        -: 1125:
        -: 1126:	  //gain 4 Gold cards
    #####: 1127:	  for (i = 0; i < 4; i++)
        -: 1128:	    {
    #####: 1129:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1130:	    }
        -: 1131:				
        -: 1132:	  //return success
    #####: 1133:	  return 1;
        -: 1134:	}
        -: 1135:			
        -: 1136:      //no second treasure_map found in hand
    #####: 1137:      return -1;
        -: 1138:    }
        -: 1139:	
    #####: 1140:  return -1;
    13003: 1141:}
        -: 1142:
        -: 1143:int gardenEffect() {
    #####: 1144:printf("Your father was a hamster and your mother smelt of elderberries.");
    #####: 1145:return -1;
        -: 1146:}
        -: 1147:
        -: 1148:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1149:  int i;
        -: 1150:
     1001: 1151:  int tributeRevealedCards[2] = {-1, -1};
        -: 1152:  int temphand[MAX_HAND];// moved above the if statement
        -: 1153:
     1001: 1154:  int z = 0;// this is the counter for the temp hand
     4004: 1155:for (i = 0; i < 1; i++)
        -: 1156:	{
     1001: 1157:	  drawCard(currentPlayer, state);
     1001: 1158:	}
        -: 1159:			
        -: 1160:      //discard card from hand
     1001: 1161:      discardCard(handPos, currentPlayer, state, 0);
     1001: 1162:      return 0;
        -: 1163:}
        -: 1164:
        -: 1165:int council_room_effect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1166:      int i;
        -: 1167:      //+4 Cards
    30010: 1168:      for (i = 0; i < 4; i++)
        -: 1169:	{
    12004: 1170:	  drawCard(currentPlayer, state);
    12004: 1171:	}
        -: 1172:			
        -: 1173:      //+1 Buy
     3001: 1174:      state->numBuys++;
        -: 1175:			
        -: 1176:      //Each other player draws a card
    18006: 1177:      for (i = 0; i < state->numPlayers; i++)
        -: 1178:	{
     6002: 1179:	  if ( i != currentPlayer )
        -: 1180:	    {
     3001: 1181:	      drawCard(i, state);
     3001: 1182:	    }
     6002: 1183:	}
        -: 1184:			
        -: 1185:      //put played card in played card pile
        -: 1186:      //discardCard(handPos, currentPlayer, state, 0);
        -: 1187:			
     3001: 1188:      return 0;
        -: 1189:}
        -: 1190:
        -: 1191:int feastEffect(struct gameState *state, int currentPlayer, int choice1) {
        -: 1192:	int i;
        -: 1193:	int x;
        -: 1194:	int temphand[MAX_HAND];
        -: 1195:	
        -: 1196:	      //gain card with cost up to 5
        -: 1197:      //Backup hand
    70014: 1198:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    30006: 1199:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    30006: 1200:	state->hand[currentPlayer][i] = -1;//Set to nothing
    30006: 1201:      }
        -: 1202:      //Backup hand
        -: 1203:
        -: 1204:      //Update Coins for Buy
     5001: 1205:      updateCoins(currentPlayer, state, 5);
     5001: 1206:      x = 1;//Condition to loop on
    18002: 1207:      while( x == 1) {//Buy one card
     5001: 1208:	if (supplyCount(choice1, state) <= 0){
        -: 1209:	  if (DEBUG)
        -: 1210:	    printf("None of that card left, sorry!\n");
        -: 1211:
        -: 1212:	  if (DEBUG){
        -: 1213:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1214:	  }
        1: 1215:        return -1;
        -: 1216:	}
     5000: 1217:	else if (state->coins < getCost(choice1)){
     1000: 1218:	  printf("That card is too expensive!\n");
     1000: 1219:        return -1;
        -: 1220:
        -: 1221:	  if (DEBUG){
        -: 1222:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1223:	  }
        -: 1224:	}
        -: 1225:	else{
        -: 1226:
        -: 1227:	  if (DEBUG){
        -: 1228:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1229:	  }
        -: 1230:
     4000: 1231:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
     4000: 1232:	  x = 0;//No more buying cards
        -: 1233:
        -: 1234:	  if (DEBUG){
        -: 1235:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1236:	  }
        -: 1237:
        -: 1238:	}
        -: 1239:      }     
        -: 1240:
        -: 1241:      //Reset Hand
    56000: 1242:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    24000: 1243:	state->hand[currentPlayer][i] = temphand[i];
    24000: 1244:	temphand[i] = -1;
    24000: 1245:      }
        -: 1246:      //Reset Hand
        -: 1247:      			
     4000: 1248:      return 0;
        -: 1249:	
     5001: 1250:}
        -: 1251:
        -: 1252:int adventurerEffect(struct gameState *state, int currentPlayer) {
        -: 1253:	int temphand[MAX_HAND];// moved above the if statement
     4000: 1254:	int drawntreasure=0;
        -: 1255:	int cardDrawn;
     4000: 1256:	int z = 0;// this is the counter for the temp hand
        -: 1257:    
    32000: 1258:      while(drawntreasure<2){
    12000: 1259:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1260:	  shuffle(currentPlayer, state);
    #####: 1261:	}
    12000: 1262:	drawCard(currentPlayer, state);
    12000: 1263:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    20000: 1264:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     8000: 1265:	  drawntreasure++;
        -: 1266:	else{
     4000: 1267:	  temphand[z]=cardDrawn;
     4000: 1268:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4000: 1269:	  z++;
        -: 1270:	}
        -: 1271:      }
    16000: 1272:      while(z-1>=0){
     4000: 1273:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4000: 1274:	z=z-1;
        -: 1275:      }
     4000: 1276:      return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
     1001: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
     1001: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1001: 1287:      state->playedCardCount++;
     1001: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
     1001: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
     1001: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
     1001: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
     1001: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
     1001: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
     1001: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
     1001: 1314:  return 0;
        -: 1315:}
        -: 1316:
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
     4000: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
     4000: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
     4000: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
    #####: 1341:    }
        -: 1342:  else
        -: 1343:    {
     4000: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     4000: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
     4000: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
     4000: 1351:  return 0;
     4000: 1352:}
        -: 1353:
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
    12008: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
   134096: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
    55040: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
    15027: 1366:	  state->coins += 1;
    15027: 1367:	}
    40013: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
     7000: 1370:	  state->coins += 2;
     7000: 1371:	}
    33013: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
     6000: 1374:	  state->coins += 3;
     6000: 1375:	}	
    55040: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
    12008: 1379:  state->coins += bonus;
        -: 1380:
    12008: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c

->->->    - TESTING CARD: isGameOver() -    <-<-<-


----  - TEST 1: Return Value = 0 -  ----


----  - TEST 2: Two Supply Piles = 0 -  ----


----  - TEST 3: Province Count = 0 -  ----


----  - TEST 4 > Three Supply Piles = 0 -  ----

->->  - TEST SUCCESSFULLY COMPLETED -  <-<-
File 'unittest4.c'
Lines executed:76.79% of 56
unittest4.c:creating 'unittest4.c.gcov'

File 'dominion.c'
Lines executed:34.67% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Robert Clifton on 4/18/17.
        -:    3://unittest4  unit test for the isGameOver function.
        -:    4://
        -:    5://to make and test: make unittestresults.out
        -:    6://
        -:    7://gcc dominion.c rngs.c unittest4.c -o unittest4
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:int main() {
        1:   18:    int pass = 1;
        1:   19:    char testFunction[] = "isGameOver()";
        -:   20:    struct gameState G, copyG;
        1:   21:    int x = 1000;
        -:   22:    int i;
        -:   23:    int retVal;
        -:   24:
        1:   25:    int randSeed = 2;
        1:   26:    int numbPlayers = 2;
        -:   27:
        1:   28:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   29:                 sea_hag, tribute, smithy};
        -:   30:
        1:   31:    initializeGame(numbPlayers, k, randSeed, &G);
        -:   32:
        1:   33:    printf("\n->->->    - TESTING CARD: %s -    <-<-<-\n\n", testFunction);
        -:   34:
        -:   35:    //basic test of return value
        1:   36:    printf("\n----  - TEST 1: Return Value = 0 -  ----\n\n");
        1:   37:    memcpy(&copyG, &G, sizeof(struct gameState));
        -:   38:
     2002:   39:    for (i = 0; i < x; i++) {
     1000:   40:        retVal = isGameOver(&copyG);
     1000:   41:        if (retVal != 0) {
    #####:   42:            printf("test 1 fail Return != 0");
    #####:   43:            pass = 0;
    #####:   44:        };
     1000:   45:    }
        -:   46:
        -:   47:    //test when two supply piles are at 0
        1:   48:    printf("\n----  - TEST 2: Two Supply Piles = 0 -  ----\n\n");
        1:   49:    memcpy(&copyG, &G, sizeof(struct gameState));
        -:   50:
        -:   51:    //set supply count of two piles to  0;
        1:   52:    copyG.supplyCount[1] = 0;
        1:   53:    copyG.supplyCount[2] = 0;
        -:   54:
     2002:   55:    for (i = 0; i < x; i++) {
     1000:   56:        retVal = isGameOver(&copyG);
     1000:   57:        if (retVal != 0) {
    #####:   58:            printf("test 2 fail Return != 0");
    #####:   59:            pass = 0;
    #####:   60:        };
     1000:   61:    }
        -:   62:
        -:   63:    //test when province pile count is at 0
        1:   64:    printf("\n----  - TEST 3: Province Count = 0 -  ----\n\n");
        1:   65:    memcpy(&copyG, &G, sizeof(struct gameState));
        1:   66:    copyG.supplyCount[province] = 0;
        -:   67:
     2002:   68:    for (i = 0; i < x; i++) {
     1000:   69:        retVal = isGameOver(&copyG);
     1000:   70:        if (retVal != 1) {
    #####:   71:            printf("test 3 fail Return != 1");
    #####:   72:            pass = 0;
    #####:   73:        };
     1000:   74:    }
        -:   75:
        -:   76:    //test when > three supply piles are at 0
        1:   77:    printf("\n----  - TEST 4 > Three Supply Piles = 0 -  ----\n\n");
        1:   78:    memcpy(&copyG, &G, sizeof(struct gameState));
        1:   79:    copyG.supplyCount[duchy] = 0;
        1:   80:    copyG.supplyCount[estate] = 0;
        1:   81:    copyG.supplyCount[copper] = 0;
        1:   82:    copyG.supplyCount[gold] = 0;
        -:   83:
     2002:   84:    for (i = 0; i < x; i++) {
     1000:   85:        retVal = isGameOver(&copyG);
     1000:   86:        if (retVal != 1) {
    #####:   87:            printf("test 4 fail Return != 1");
    #####:   88:            pass = 0;
    #####:   89:        };
     1000:   90:    }
        -:   91:
        -:   92:    //Final bool check to see if testing passed or failed,  prints result to standard out
        1:   93:    if (pass) {
        1:   94:        printf("->->  - TEST SUCCESSFULLY COMPLETED -  <-<-\n");
        1:   95:    } else{
    #####:   96:        printf("->->  - TEST FAILED -  <-<-\n");
        -:   97:    }
        1:   98:    return 0;
        -:   99:};
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://test message
        -:    9:
        -:   10:int smithyEffect(struct gameState *state, int currentPlayer, int handPos);
        -:   11:
        -:   12:int council_room_effect(struct gameState *state, int currentPlayer, int handPos);
        -:   13:
        -:   14:int adventurerEffect(struct gameState *state, int currentPlayer);
        -:   15:
        -:   16:int feastEffect(struct gameState *state, int currentPlayer, int choice1);
        -:   17:
        -:   18:int gardenEffect();
        -:   19:
        -:   20:
        -:   21:int compare(const void* a, const void* b) {
      224:   22:  if (*(int*)a > *(int*)b)
    #####:   23:    return 1;
      224:   24:  if (*(int*)a < *(int*)b)
       80:   25:    return -1;
      144:   26:  return 0;
      224:   27:}
        -:   28:
        -:   29:struct gameState* newGame() {
    #####:   30:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   31:  return g;
        -:   32:}
        -:   33:
        -:   34:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   35:		  int k8, int k9, int k10) {
    #####:   36:  int* k = malloc(10 * sizeof(int));
    #####:   37:  k[0] = k1;
    #####:   38:  k[1] = k2;
    #####:   39:  k[2] = k3;
    #####:   40:  k[3] = k4;
    #####:   41:  k[4] = k5;
    #####:   42:  k[5] = k6;
    #####:   43:  k[6] = k7;
    #####:   44:  k[7] = k8;
    #####:   45:  k[8] = k9;
    #####:   46:  k[9] = k10;
    #####:   47:  return k;
        -:   48:}
        -:   49:
        -:   50:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   51:		   struct gameState *state) {
        -:   52:
        -:   53:  int i;
        -:   54:  int j;
        -:   55:  int it;			
        -:   56:  //set up random number generator
        8:   57:  SelectStream(1);
        8:   58:  PutSeed((long)randomSeed);
        -:   59:  
        -:   60:  //check number of players
       16:   61:  if (numPlayers > MAX_PLAYERS || numPlayers < 0)
        -:   62:    {
    #####:   63:      return -1;
        -:   64:    }
        -:   65:
        -:   66:  //set number of players
        8:   67:  state->numPlayers = numPlayers;
        -:   68:
        -:   69:  //check selected kingdom cards are different
      176:   70:  for (i = 0; i < 10; i++)
        -:   71:    {
     1760:   72:      for (j = 0; j < 10; j++)
        -:   73:        {
     1520:   74:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   75:	    {
    #####:   76:	      return -1;
        -:   77:	    }
      800:   78:        }
       80:   79:    }
        -:   80:
        -:   81:
        -:   82:  //initialize supply
        -:   83:  ///////////////////////////////
        -:   84:
        -:   85:  //set number of Curse cards
        8:   86:  if (numPlayers == 2)
        -:   87:    {
        8:   88:      state->supplyCount[curse] = 10;
        8:   89:    }
    #####:   90:  else if (numPlayers == 3)
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 20;
    #####:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[curse] = 30;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Victory cards
        8:  100:  if (numPlayers == 2)
        -:  101:    {
        8:  102:      state->supplyCount[estate] = 8;
        8:  103:      state->supplyCount[duchy] = 8;
        8:  104:      state->supplyCount[province] = 8;
        8:  105:    }
        -:  106:  else
        -:  107:    {
    #####:  108:      state->supplyCount[estate] = 12;
    #####:  109:      state->supplyCount[duchy] = 12;
    #####:  110:      state->supplyCount[province] = 12;
        -:  111:    }
        -:  112:
        -:  113:  //set number of Treasure cards
        8:  114:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  115:  state->supplyCount[silver] = 40;
        8:  116:  state->supplyCount[gold] = 30;
        -:  117:
        -:  118:  //set number of Kingdom cards
      336:  119:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  120:    {
     2640:  121:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  122:	{
     1240:  123:	  if (kingdomCards[j] == i)
        -:  124:	    {
        -:  125:	      //check if card is a 'Victory' Kingdom card
      160:  126:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  127:		{
        8:  128:		  if (numPlayers == 2){ 
        8:  129:		    state->supplyCount[i] = 8; 
        8:  130:		  }
    #####:  131:		  else{ state->supplyCount[i] = 12; }
        8:  132:		}
        -:  133:	      else
        -:  134:		{
       72:  135:		  state->supplyCount[i] = 10;
        -:  136:		}
       80:  137:	      break;
        -:  138:	    }
        -:  139:	  else    //card is not in the set choosen for the game
        -:  140:	    {
     1160:  141:	      state->supplyCount[i] = -1;
        -:  142:	    }
     1160:  143:	}
        -:  144:
      160:  145:    }
        -:  146:
        -:  147:  ////////////////////////
        -:  148:  //supply intilization complete
        -:  149:
        -:  150:  //set player decks
       48:  151:  for (i = 0; i < numPlayers; i++)
        -:  152:    {
       16:  153:      state->deckCount[i] = 0;
      128:  154:      for (j = 0; j < 3; j++)
        -:  155:	{
       48:  156:	  state->deck[i][j] = estate;
       48:  157:	  state->deckCount[i]++;
       48:  158:	}
      256:  159:      for (j = 3; j < 10; j++)
        -:  160:	{
      112:  161:	  state->deck[i][j] = copper;
      112:  162:	  state->deckCount[i]++;		
      112:  163:	}
       16:  164:    }
        -:  165:
        -:  166:  //shuffle player decks
       48:  167:  for (i = 0; i < numPlayers; i++)
        -:  168:    {
       16:  169:      if ( shuffle(i, state) < 0 )
        -:  170:	{
    #####:  171:	  return -1;
        -:  172:	}
       16:  173:    }
        -:  174:
        -:  175:  //draw player hands
       48:  176:  for (i = 0; i < numPlayers; i++)
        -:  177:    {  
        -:  178:      //initialize hand size to zero
       16:  179:      state->handCount[i] = 0;
       16:  180:      state->discardCount[i] = 0;
        -:  181:      //draw 5 cards
        -:  182:      // for (j = 0; j < 5; j++)
        -:  183:      //	{
        -:  184:      //	  drawCard(i, state);
        -:  185:      //	}
       16:  186:    }
        -:  187:  
        -:  188:  //set embargo tokens to 0 for all supply piles
      448:  189:  for (i = 0; i <= treasure_map; i++)
        -:  190:    {
      216:  191:      state->embargoTokens[i] = 0;
      216:  192:    }
        -:  193:
        -:  194:  //initialize first player's turn
        8:  195:  state->outpostPlayed = 0;
        8:  196:  state->phase = 0;
        8:  197:  state->numActions = 1;
        8:  198:  state->numBuys = 1;
        8:  199:  state->playedCardCount = 0;
        8:  200:  state->whoseTurn = 0;
        8:  201:  state->handCount[state->whoseTurn] = 0;
        -:  202:  //int it; move to top
        -:  203:
        -:  204:  //Moved draw cards to here, only drawing at the start of a turn
       96:  205:  for (it = 0; it < 5; it++){
       40:  206:    drawCard(state->whoseTurn, state);
       40:  207:  }
        -:  208:
        8:  209:  updateCoins(state->whoseTurn, state, 0);
        -:  210:
        8:  211:  return 0;
        8:  212:}
        -:  213:
        -:  214:int shuffle(int player, struct gameState *state) {
        -:  215: 
        -:  216:
        -:  217:  int newDeck[MAX_DECK];
       16:  218:  int newDeckPos = 0;
        -:  219:  int card;
        -:  220:  int i;
        -:  221:
       16:  222:  if (state->deckCount[player] < 1)
    #####:  223:    return -1;
       16:  224:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  225:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  226:
      352:  227:  while (state->deckCount[player] > 0) {
      160:  228:    card = floor(Random() * state->deckCount[player]);
      160:  229:    newDeck[newDeckPos] = state->deck[player][card];
      160:  230:    newDeckPos++;
     1198:  231:    for (i = card; i < state->deckCount[player]-1; i++) {
      439:  232:      state->deck[player][i] = state->deck[player][i+1];
      439:  233:    }
      160:  234:    state->deckCount[player]--;
        -:  235:  }
      352:  236:  for (i = 0; i < newDeckPos; i++) {
      160:  237:    state->deck[player][i] = newDeck[i];
      160:  238:    state->deckCount[player]++;
      160:  239:  }
        -:  240:
       16:  241:  return 0;
       16:  242:}
        -:  243:
        -:  244:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  245:{	
        -:  246:  int card;
    #####:  247:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  248:
        -:  249:  //check if it is the right phase
    #####:  250:  if (state->phase != 0)
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //check if player has enough actions
    #####:  256:  if ( state->numActions < 1 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //get card played
    #####:  262:  card = handCard(handPos, state);
        -:  263:	
        -:  264:  //check if selected card is an action
    #####:  265:  if ( card < adventurer || card > treasure_map )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //play card
    #####:  271:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  272:    {
    #####:  273:      return -1;
        -:  274:    }
        -:  275:	
        -:  276:  //reduce number of actions
    #####:  277:  state->numActions--;
        -:  278:
        -:  279:  //update coins (Treasure cards may be added with card draws)
    #####:  280:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  281:	
    #####:  282:  return 0;
    #####:  283:}
        -:  284:
        -:  285:int buyCard(int supplyPos, struct gameState *state) {
        -:  286:  int who;
        -:  287:  if (DEBUG){
        -:  288:    printf("Entering buyCard...\n");
        -:  289:  }
        -:  290:
        -:  291:  // I don't know what to do about the phase thing.
        -:  292:
    #####:  293:  who = state->whoseTurn;
        -:  294:
    #####:  295:  if (state->numBuys < 1){
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (supplyCount(supplyPos, state) <1){
        -:  300:    if (DEBUG)
        -:  301:      printf("There are not any of that type of card left\n");
    #####:  302:    return -1;
    #####:  303:  } else if (state->coins < getCost(supplyPos)){
        -:  304:    if (DEBUG)
        -:  305:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  306:    return -1;
        -:  307:  } else {
    #####:  308:    state->phase=1;
        -:  309:    //state->supplyCount[supplyPos]--;
    #####:  310:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  311:
    #####:  312:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  313:    state->numBuys--;
        -:  314:    if (DEBUG)
        -:  315:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  316:  }
        -:  317:
        -:  318:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  319:  //state->discardCount[who]++;
        -:  320:
    #####:  321:  return 0;
    #####:  322:}
        -:  323:
        -:  324:int numHandCards(struct gameState *state) {
    14000:  325:  return state->handCount[ whoseTurn(state) ];
        -:  326:}
        -:  327:
        -:  328:int handCard(int handPos, struct gameState *state) {
    22000:  329:  int currentPlayer = whoseTurn(state);
    22000:  330:  return state->hand[currentPlayer][handPos];
        -:  331:}
        -:  332:
        -:  333:int supplyCount(int card, struct gameState *state) {
     9001:  334:  return state->supplyCount[card];
        -:  335:}
        -:  336:
        -:  337:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  338:  int i;
     4000:  339:  int count = 0;
        -:  340:
    48000:  341:  for (i = 0; i < state->deckCount[player]; i++)
        -:  342:    {
    23000:  343:      if (state->deck[player][i] == card) count++;
    20000:  344:    }
        -:  345:
    48000:  346:  for (i = 0; i < state->handCount[player]; i++)
        -:  347:    {
    24000:  348:      if (state->hand[player][i] == card) count++;
    20000:  349:    }
        -:  350:
     8000:  351:  for (i = 0; i < state->discardCount[player]; i++)
        -:  352:    {
    #####:  353:      if (state->discard[player][i] == card) count++;
    #####:  354:    }
        -:  355:
     4000:  356:  return count;
        -:  357:}
        -:  358:
        -:  359:int whoseTurn(struct gameState *state) {
    49014:  360:  return state->whoseTurn;
        -:  361:}
        -:  362:
        -:  363:int endTurn(struct gameState *state) {
        -:  364:  int k;
        -:  365:  int i;
    #####:  366:  int currentPlayer = whoseTurn(state);
        -:  367:  
        -:  368:  //Discard hand
    #####:  369:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  370:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  371:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  372:  }
    #####:  373:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  374:    
        -:  375:  //Code for determining the player
    #####:  376:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  377:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  378:  }
        -:  379:  else{
    #####:  380:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  381:  }
        -:  382:
    #####:  383:  state->outpostPlayed = 0;
    #####:  384:  state->phase = 0;
    #####:  385:  state->numActions = 1;
    #####:  386:  state->coins = 0;
    #####:  387:  state->numBuys = 1;
    #####:  388:  state->playedCardCount = 0;
    #####:  389:  state->handCount[state->whoseTurn] = 0;
        -:  390:
        -:  391:  //int k; move to top
        -:  392:  //Next player draws hand
    #####:  393:  for (k = 0; k < 5; k++){
    #####:  394:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  395:  }
        -:  396:
        -:  397:  //Update money
    #####:  398:  updateCoins(state->whoseTurn, state , 0);
        -:  399:
    #####:  400:  return 0;
        -:  401:}
        -:  402:
        -:  403:int isGameOver(struct gameState *state) {
        -:  404:  int i;
        -:  405:  int j;
        -:  406:	
        -:  407:  //if stack of Province cards is empty, the game ends
     4000:  408:  if (state->supplyCount[province] == 0)
        -:  409:    {
     1000:  410:      return 1;
        -:  411:    }
        -:  412:
        -:  413:  //if three supply pile are at 0, the game ends
     3000:  414:  j = 0;
   156000:  415:  for (i = 0; i < 25; i++)
        -:  416:    {
    75000:  417:      if (state->supplyCount[i] == 0)
        -:  418:	{
     6000:  419:	  j++;
     6000:  420:	}
    75000:  421:    }
     3000:  422:  if ( j >= 3)
        -:  423:    {
     1000:  424:      return 1;
        -:  425:    }
        -:  426:
     2000:  427:  return 0;
     4000:  428:}
        -:  429:
        -:  430:int scoreFor (int player, struct gameState *state) {
        -:  431:
        -:  432:  int i;
    #####:  433:  int score = 0;
        -:  434:  //score from hand
    #####:  435:  for (i = 0; i < state->handCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  443:    }
        -:  444:
        -:  445:  //score from discard
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  454:    }
        -:  455:
        -:  456:  //score from deck
    #####:  457:  for (i = 0; i < state->discardCount[player]; i++)
        -:  458:    {
    #####:  459:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  460:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  461:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  462:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  463:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  465:    }
        -:  466:
    #####:  467:  return score;
        -:  468:}
        -:  469:
        -:  470:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  471:  int i;	
        -:  472:  int j;
        -:  473:  int highScore;
        -:  474:  int currentPlayer;
        -:  475:
        -:  476:  //get score for each player
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:    {
        -:  479:      //set unused player scores to -9999
    #####:  480:      if (i >= state->numPlayers)
        -:  481:	{
    #####:  482:	  players[i] = -9999;
    #####:  483:	}
        -:  484:      else
        -:  485:	{
    #####:  486:	  players[i] = scoreFor (i, state);
        -:  487:	}
    #####:  488:    }
        -:  489:
        -:  490:  //find highest score
    #####:  491:  j = 0;
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if (players[i] > players[j])
        -:  495:	{
    #####:  496:	  j = i;
    #####:  497:	}
    #####:  498:    }
    #####:  499:  highScore = players[j];
        -:  500:
        -:  501:  //add 1 to players who had less turns
    #####:  502:  currentPlayer = whoseTurn(state);
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if ( players[i] == highScore && i > currentPlayer )
        -:  506:	{
    #####:  507:	  players[i]++;
    #####:  508:	}
    #####:  509:    }
        -:  510:
        -:  511:  //find new highest score
    #####:  512:  j = 0;
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:      if ( players[i] > players[j] )
        -:  516:	{
    #####:  517:	  j = i;
    #####:  518:	}
    #####:  519:    }
    #####:  520:  highScore = players[j];
        -:  521:
        -:  522:  //set winners in array to 1 and rest to 0
    #####:  523:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  524:    {
    #####:  525:      if ( players[i] == highScore )
        -:  526:	{
    #####:  527:	  players[i] = 1;
    #####:  528:	}
        -:  529:      else
        -:  530:	{
    #####:  531:	  players[i] = 0;
        -:  532:	}
    #####:  533:    }
        -:  534:
    #####:  535:  return 0;
        -:  536:}
        -:  537:
        -:  538:int drawCard(int player, struct gameState *state)
        -:  539:{	int count;
        -:  540:  int deckCounter;
    28046:  541:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  542:    
        -:  543:    //Step 1 Shuffle the discard pile back into a deck
        -:  544:    int i;
        -:  545:    //Move discard to deck
    #####:  546:    for (i = 0; i < state->discardCount[player];i++){
    #####:  547:      state->deck[player][i] = state->discard[player][i];
    #####:  548:      state->discard[player][i] = -1;
    #####:  549:    }
        -:  550:
    #####:  551:    state->deckCount[player] = state->discardCount[player];
    #####:  552:    state->discardCount[player] = 0;//Reset discard
        -:  553:
        -:  554:    //Shufffle the deck
    #####:  555:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  556:   
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  559:    }
        -:  560:    
    #####:  561:    state->discardCount[player] = 0;
        -:  562:
        -:  563:    //Step 2 Draw Card
    #####:  564:    count = state->handCount[player];//Get current player's hand count
        -:  565:    
        -:  566:    if (DEBUG){//Debug statements
        -:  567:      printf("Current hand count: %d\n", count);
        -:  568:    }
        -:  569:    
    #####:  570:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  571:
    #####:  572:    if (deckCounter == 0)
    #####:  573:      return -1;
        -:  574:
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
    #####:  578:  }
        -:  579:
        -:  580:  else{
    28046:  581:    int count = state->handCount[player];//Get current hand count for player
        -:  582:    int deckCounter;
        -:  583:    if (DEBUG){//Debug statements
        -:  584:      printf("Current hand count: %d\n", count);
        -:  585:    }
        -:  586:
    28046:  587:    deckCounter = state->deckCount[player];//Create holder for the deck count
    28046:  588:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    28046:  589:    state->deckCount[player]--;
    28046:  590:    state->handCount[player]++;//Increment hand count
        -:  591:  }
        -:  592:
    28046:  593:  return 0;
    28046:  594:}
        -:  595:
        -:  596:int getCost(int cardNumber)
        -:  597:{
     5000:  598:  switch( cardNumber ) 
        -:  599:    {
        -:  600:    case curse:
     1000:  601:      return 0;
        -:  602:    case estate:
    #####:  603:      return 2;
        -:  604:    case duchy:
    #####:  605:      return 5;
        -:  606:    case province:
    #####:  607:      return 8;
        -:  608:    case copper:
    #####:  609:      return 0;
        -:  610:    case silver:
     3000:  611:      return 3;
        -:  612:    case gold:
     1000:  613:      return 6;
        -:  614:    case adventurer:
    #####:  615:      return 6;
        -:  616:    case council_room:
    #####:  617:      return 5;
        -:  618:    case feast:
    #####:  619:      return 4;
        -:  620:    case gardens:
    #####:  621:      return 4;
        -:  622:    case mine:
    #####:  623:      return 5;
        -:  624:    case remodel:
    #####:  625:      return 4;
        -:  626:    case smithy:
    #####:  627:      return 4;
        -:  628:    case village:
    #####:  629:      return 3;
        -:  630:    case baron:
    #####:  631:      return 4;
        -:  632:    case great_hall:
    #####:  633:      return 3;
        -:  634:    case minion:
    #####:  635:      return 5;
        -:  636:    case steward:
    #####:  637:      return 3;
        -:  638:    case tribute:
    #####:  639:      return 5;
        -:  640:    case ambassador:
    #####:  641:      return 3;
        -:  642:    case cutpurse:
    #####:  643:      return 4;
        -:  644:    case embargo: 
    #####:  645:      return 2;
        -:  646:    case outpost:
    #####:  647:      return 5;
        -:  648:    case salvager:
    #####:  649:      return 4;
        -:  650:    case sea_hag:
    #####:  651:      return 4;
        -:  652:    case treasure_map:
    #####:  653:      return 4;
        -:  654:    }
        -:  655:	
    #####:  656:  return -1;
     5000:  657:}
        -:  658:
        -:  659:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  660:{
        -:  661:  int i;
        -:  662:  int j;
        -:  663:  int k;
        -:  664:  int x;
        -:  665:  int index;
    13003:  666:  int currentPlayer = whoseTurn(state);
    13003:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
    13003:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
    13003:  671:  int drawntreasure=0;
        -:  672:  int cardDrawn;
    13003:  673:  int z = 0;// this is the counter for the temp hand
    13003:  674:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  675:    nextPlayer = 0;
    #####:  676:  }
        -:  677:  //uses switch to select card and perform actions
    13003:  678:  switch( card ) 
        -:  679:    {
        -:  680:		  
        -:  681:   case adventurer:
     4000:  682:	return adventurerEffect(state, currentPlayer);
        -:  683:			
        -:  684:    case council_room:
     3001:  685:		return council_room_effect(state, currentPlayer, handPos);
        -:  686:			
        -:  687:    case feast:
     5001:  688:		return feastEffect(state, currentPlayer, choice1);
        -:  689:			
        -:  690:    case gardens:
    #####:  691:      return gardenEffect();
        -:  692:			
        -:  693:    case mine:
    #####:  694:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  695:
    #####:  696:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  697:	{
    #####:  698:	  return -1;
        -:  699:	}
        -:  700:		
    #####:  701:      if (choice2 > treasure_map || choice2 < curse)
        -:  702:	{
    #####:  703:	  return -1;
        -:  704:	}
        -:  705:
    #####:  706:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  707:	{
    #####:  708:	  return -1;
        -:  709:	}
        -:  710:
    #####:  711:      gainCard(choice2, state, 2, currentPlayer);
        -:  712:
        -:  713:      //discard card from hand
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:
        -:  716:      //discard trashed card
    #####:  717:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  718:	{
    #####:  719:	  if (state->hand[currentPlayer][i] == j)
        -:  720:	    {
    #####:  721:	      discardCard(i, currentPlayer, state, 0);			
    #####:  722:	      break;
        -:  723:	    }
    #####:  724:	}
        -:  725:			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case remodel:
    #####:  729:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  730:
    #####:  731:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  732:	{
    #####:  733:	  return -1;
        -:  734:	}
        -:  735:
    #####:  736:      gainCard(choice2, state, 0, currentPlayer);
        -:  737:
        -:  738:      //discard card from hand
    #####:  739:      discardCard(handPos, currentPlayer, state, 0);
        -:  740:
        -:  741:      //discard trashed card
    #####:  742:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  743:	{
    #####:  744:	  if (state->hand[currentPlayer][i] == j)
        -:  745:	    {
    #####:  746:	      discardCard(i, currentPlayer, state, 0);			
    #####:  747:	      break;
        -:  748:	    }
    #####:  749:	}
        -:  750:
        -:  751:
    #####:  752:      return 0;
        -:  753:		
        -:  754:    case smithy:
        -:  755:      //+3 Cards
     1001:  756:      return smithyEffect(state, currentPlayer, handPos);
        -:  757:      
        -:  758:		
        -:  759:    case village:
        -:  760:      //+1 Card
    #####:  761:      drawCard(currentPlayer, state);
        -:  762:			
        -:  763:      //+2 Actions
    #####:  764:      state->numActions = state->numActions + 2;
        -:  765:			
        -:  766:      //discard played card from hand
    #####:  767:      discardCard(handPos, currentPlayer, state, 0);
    #####:  768:      return 0;
        -:  769:		
        -:  770:    case baron:
    #####:  771:      state->numBuys++;//Increase buys by 1!
    #####:  772:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  773:	int p = 0;//Iterator for hand!
    #####:  774:	int card_not_discarded = 1;//Flag for discard set!
    #####:  775:	while(card_not_discarded){
    #####:  776:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  777:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  778:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  779:	    state->discardCount[currentPlayer]++;
    #####:  780:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  781:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  782:	    }
    #####:  783:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  784:	    state->handCount[currentPlayer]--;
    #####:  785:	    card_not_discarded = 0;//Exit the loop
    #####:  786:	  }
    #####:  787:	  else if (p > state->handCount[currentPlayer]){
        -:  788:	    if(DEBUG) {
        -:  789:	      printf("No estate cards in your hand, invalid choice\n");
        -:  790:	      printf("Must gain an estate if there are any\n");
        -:  791:	    }
    #####:  792:	    if (supplyCount(estate, state) > 0){
    #####:  793:	      gainCard(estate, state, 0, currentPlayer);
    #####:  794:	      state->supplyCount[estate]--;//Decrement estates
    #####:  795:	      if (supplyCount(estate, state) == 0){
    #####:  796:		isGameOver(state);
    #####:  797:	      }
    #####:  798:	    }
    #####:  799:	    card_not_discarded = 0;//Exit the loop
    #####:  800:	  }
        -:  801:			    
        -:  802:	  else{
    #####:  803:	    p++;//Next card
        -:  804:	  }
        -:  805:	}
    #####:  806:      }
        -:  807:			    
        -:  808:      else{
    #####:  809:	if (supplyCount(estate, state) > 0){
    #####:  810:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  811:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  812:	  if (supplyCount(estate, state) == 0){
    #####:  813:	    isGameOver(state);
    #####:  814:	  }
    #####:  815:	}
        -:  816:      }
        -:  817:	    
        -:  818:      
    #####:  819:      return 0;
        -:  820:		
        -:  821:    case great_hall:
        -:  822:      //+1 Card
    #####:  823:      drawCard(currentPlayer, state);
        -:  824:			
        -:  825:      //+1 Actions
    #####:  826:      state->numActions++;
        -:  827:			
        -:  828:      //discard card from hand
    #####:  829:      discardCard(handPos, currentPlayer, state, 0);
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case minion:
        -:  833:      //+1 action
    #####:  834:      state->numActions++;
        -:  835:			
        -:  836:      //discard card from hand
    #####:  837:      discardCard(handPos, currentPlayer, state, 0);
        -:  838:			
    #####:  839:      if (choice1)		//+2 coins
        -:  840:	{
    #####:  841:	  state->coins = state->coins + 2;
    #####:  842:	}
        -:  843:			
    #####:  844:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  845:	{
        -:  846:	  //discard hand
    #####:  847:	  while(numHandCards(state) > 0)
        -:  848:	    {
    #####:  849:	      discardCard(handPos, currentPlayer, state, 0);
        -:  850:	    }
        -:  851:				
        -:  852:	  //draw 4
    #####:  853:	  for (i = 0; i < 4; i++)
        -:  854:	    {
    #####:  855:	      drawCard(currentPlayer, state);
    #####:  856:	    }
        -:  857:				
        -:  858:	  //other players discard hand and redraw if hand size > 4
    #####:  859:	  for (i = 0; i < state->numPlayers; i++)
        -:  860:	    {
    #####:  861:	      if (i != currentPlayer)
        -:  862:		{
    #####:  863:		  if ( state->handCount[i] > 4 )
        -:  864:		    {
        -:  865:		      //discard hand
    #####:  866:		      while( state->handCount[i] > 0 )
        -:  867:			{
    #####:  868:			  discardCard(handPos, i, state, 0);
        -:  869:			}
        -:  870:							
        -:  871:		      //draw 4
    #####:  872:		      for (j = 0; j < 4; j++)
        -:  873:			{
    #####:  874:			  drawCard(i, state);
    #####:  875:			}
    #####:  876:		    }
    #####:  877:		}
    #####:  878:	    }
        -:  879:				
    #####:  880:	}
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case steward:
    #####:  884:      if (choice1 == 1)
        -:  885:	{
        -:  886:	  //+2 cards
    #####:  887:	  drawCard(currentPlayer, state);
    #####:  888:	  drawCard(currentPlayer, state);
    #####:  889:	}
    #####:  890:      else if (choice1 == 2)
        -:  891:	{
        -:  892:	  //+2 coins
    #####:  893:	  state->coins = state->coins + 2;
    #####:  894:	}
        -:  895:      else
        -:  896:	{
        -:  897:	  //trash 2 cards in hand
    #####:  898:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  899:	  discardCard(choice3, currentPlayer, state, 1);
        -:  900:	}
        -:  901:			
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case tribute:
    #####:  907:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  908:	if (state->deckCount[nextPlayer] > 0){
    #####:  909:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  910:	  state->deckCount[nextPlayer]--;
    #####:  911:	}
    #####:  912:	else if (state->discardCount[nextPlayer] > 0){
    #####:  913:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  914:	  state->discardCount[nextPlayer]--;
    #####:  915:	}
        -:  916:	else{
        -:  917:	  //No Card to Reveal
        -:  918:	  if (DEBUG){
        -:  919:	    printf("No cards to reveal\n");
        -:  920:	  }
        -:  921:	}
    #####:  922:      }
        -:  923:	    
        -:  924:      else{
    #####:  925:	if (state->deckCount[nextPlayer] == 0){
    #####:  926:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  927:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  928:	    state->deckCount[nextPlayer]++;
    #####:  929:	    state->discard[nextPlayer][i] = -1;
    #####:  930:	    state->discardCount[nextPlayer]--;
    #####:  931:	  }
        -:  932:			    
    #####:  933:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  934:	} 
    #####:  935:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  937:	state->deckCount[nextPlayer]--;
    #####:  938:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:	state->deckCount[nextPlayer]--;
        -:  941:      }    
        -:  942:		       
    #####:  943:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  944:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  945:	state->playedCardCount++;
    #####:  946:	tributeRevealedCards[1] = -1;
    #####:  947:      }
        -:  948:
    #####:  949:      for (i = 0; i <= 2; i ++){
    #####:  950:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  951:	  state->coins += 2;
    #####:  952:	}
        -:  953:		    
    #####:  954:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
        -:  958:	else{//Action Card
    #####:  959:	  state->numActions = state->numActions + 2;
        -:  960:	}
    #####:  961:      }
        -:  962:	    
    #####:  963:      return 0;
        -:  964:		
        -:  965:    case ambassador:
    #####:  966:      j = 0;		//used to check if player has enough cards to discard
        -:  967:
    #####:  968:      if (choice2 > 2 || choice2 < 0)
        -:  969:	{
    #####:  970:	  return -1;				
        -:  971:	}
        -:  972:
    #####:  973:      if (choice1 == handPos)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  979:	{
    #####:  980:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  981:	    {
    #####:  982:	      j++;
    #####:  983:	    }
    #####:  984:	}
    #####:  985:      if (j < choice2)
        -:  986:	{
    #####:  987:	  return -1;				
        -:  988:	}
        -:  989:
        -:  990:      if (DEBUG) 
        -:  991:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  992:
        -:  993:      //increase supply count for choosen card by amount being discarded
    #####:  994:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  995:			
        -:  996:      //each other player gains a copy of revealed card
    #####:  997:      for (i = 0; i < state->numPlayers; i++)
        -:  998:	{
    #####:  999:	  if (i != currentPlayer)
        -: 1000:	    {
    #####: 1001:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1002:	    }
    #####: 1003:	}
        -: 1004:
        -: 1005:      //discard played card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1007:
        -: 1008:      //trash copies of cards returned to supply
    #####: 1009:      for (j = 0; j < choice2; j++)
        -: 1010:	{
    #####: 1011:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1012:	    {
    #####: 1013:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1014:		{
    #####: 1015:		  discardCard(i, currentPlayer, state, 1);
    #####: 1016:		  break;
        -: 1017:		}
    #####: 1018:	    }
    #####: 1019:	}			
        -: 1020:
    #####: 1021:      return 0;
        -: 1022:		
        -: 1023:    case cutpurse:
        -: 1024:
    #####: 1025:      updateCoins(currentPlayer, state, 2);
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
        -: 1029:	    {
    #####: 1030:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1031:		{
    #####: 1032:		  if (state->hand[i][j] == copper)
        -: 1033:		    {
    #####: 1034:		      discardCard(j, i, state, 0);
    #####: 1035:		      break;
        -: 1036:		    }
    #####: 1037:		  if (j == state->handCount[i])
        -: 1038:		    {
    #####: 1039:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1040:			{
        -: 1041:			  if (DEBUG)
        -: 1042:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1043:			}	
    #####: 1044:		      break;
        -: 1045:		    }		
    #####: 1046:		}
        -: 1047:					
    #####: 1048:	    }
        -: 1049:				
    #####: 1050:	}				
        -: 1051:
        -: 1052:      //discard played card from hand
    #####: 1053:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:
        -: 1057:		
        -: 1058:    case embargo: 
        -: 1059:      //+2 Coins
    #####: 1060:      state->coins = state->coins + 2;
        -: 1061:			
        -: 1062:      //see if selected pile is in play
    #####: 1063:      if ( state->supplyCount[choice1] == -1 )
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:			
        -: 1068:      //add embargo token to selected supply pile
    #####: 1069:      state->embargoTokens[choice1]++;
        -: 1070:			
        -: 1071:      //trash card
    #####: 1072:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case outpost:
        -: 1076:      //set outpost flag
    #####: 1077:      state->outpostPlayed++;
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case salvager:
        -: 1084:      //+1 buy
    #####: 1085:      state->numBuys++;
        -: 1086:			
    #####: 1087:      if (choice1)
        -: 1088:	{
        -: 1089:	  //gain coins equal to trashed card
    #####: 1090:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1091:	  //trash card
    #####: 1092:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1093:	}
        -: 1094:			
        -: 1095:      //discard card
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1097:      return 0;
        -: 1098:		
        -: 1099:    case sea_hag:
    #####: 1100:      for (i = 0; i < state->numPlayers; i++){
    #####: 1101:	if (i != currentPlayer){
    #####: 1102:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1103:	  state->discardCount[i]++;
    #####: 1104:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1105:	}
    #####: 1106:      }
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case treasure_map:
        -: 1110:      //search hand for another treasure_map
    #####: 1111:      index = -1;
    #####: 1112:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1113:	{
    #####: 1114:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1115:	    {
    #####: 1116:	      index = i;
    #####: 1117:	      break;
        -: 1118:	    }
    #####: 1119:	}
    #####: 1120:      if (index > -1)
        -: 1121:	{
        -: 1122:	  //trash both treasure cards
    #####: 1123:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1124:	  discardCard(index, currentPlayer, state, 1);
        -: 1125:
        -: 1126:	  //gain 4 Gold cards
    #####: 1127:	  for (i = 0; i < 4; i++)
        -: 1128:	    {
    #####: 1129:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1130:	    }
        -: 1131:				
        -: 1132:	  //return success
    #####: 1133:	  return 1;
        -: 1134:	}
        -: 1135:			
        -: 1136:      //no second treasure_map found in hand
    #####: 1137:      return -1;
        -: 1138:    }
        -: 1139:	
    #####: 1140:  return -1;
    13003: 1141:}
        -: 1142:
        -: 1143:int gardenEffect() {
    #####: 1144:printf("Your father was a hamster and your mother smelt of elderberries.");
    #####: 1145:return -1;
        -: 1146:}
        -: 1147:
        -: 1148:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1149:  int i;
        -: 1150:
     1001: 1151:  int tributeRevealedCards[2] = {-1, -1};
        -: 1152:  int temphand[MAX_HAND];// moved above the if statement
        -: 1153:
     1001: 1154:  int z = 0;// this is the counter for the temp hand
     4004: 1155:for (i = 0; i < 1; i++)
        -: 1156:	{
     1001: 1157:	  drawCard(currentPlayer, state);
     1001: 1158:	}
        -: 1159:			
        -: 1160:      //discard card from hand
     1001: 1161:      discardCard(handPos, currentPlayer, state, 0);
     1001: 1162:      return 0;
        -: 1163:}
        -: 1164:
        -: 1165:int council_room_effect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1166:      int i;
        -: 1167:      //+4 Cards
    30010: 1168:      for (i = 0; i < 4; i++)
        -: 1169:	{
    12004: 1170:	  drawCard(currentPlayer, state);
    12004: 1171:	}
        -: 1172:			
        -: 1173:      //+1 Buy
     3001: 1174:      state->numBuys++;
        -: 1175:			
        -: 1176:      //Each other player draws a card
    18006: 1177:      for (i = 0; i < state->numPlayers; i++)
        -: 1178:	{
     6002: 1179:	  if ( i != currentPlayer )
        -: 1180:	    {
     3001: 1181:	      drawCard(i, state);
     3001: 1182:	    }
     6002: 1183:	}
        -: 1184:			
        -: 1185:      //put played card in played card pile
        -: 1186:      //discardCard(handPos, currentPlayer, state, 0);
        -: 1187:			
     3001: 1188:      return 0;
        -: 1189:}
        -: 1190:
        -: 1191:int feastEffect(struct gameState *state, int currentPlayer, int choice1) {
        -: 1192:	int i;
        -: 1193:	int x;
        -: 1194:	int temphand[MAX_HAND];
        -: 1195:	
        -: 1196:	      //gain card with cost up to 5
        -: 1197:      //Backup hand
    70014: 1198:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    30006: 1199:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    30006: 1200:	state->hand[currentPlayer][i] = -1;//Set to nothing
    30006: 1201:      }
        -: 1202:      //Backup hand
        -: 1203:
        -: 1204:      //Update Coins for Buy
     5001: 1205:      updateCoins(currentPlayer, state, 5);
     5001: 1206:      x = 1;//Condition to loop on
    18002: 1207:      while( x == 1) {//Buy one card
     5001: 1208:	if (supplyCount(choice1, state) <= 0){
        -: 1209:	  if (DEBUG)
        -: 1210:	    printf("None of that card left, sorry!\n");
        -: 1211:
        -: 1212:	  if (DEBUG){
        -: 1213:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1214:	  }
        1: 1215:        return -1;
        -: 1216:	}
     5000: 1217:	else if (state->coins < getCost(choice1)){
     1000: 1218:	  printf("That card is too expensive!\n");
     1000: 1219:        return -1;
        -: 1220:
        -: 1221:	  if (DEBUG){
        -: 1222:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1223:	  }
        -: 1224:	}
        -: 1225:	else{
        -: 1226:
        -: 1227:	  if (DEBUG){
        -: 1228:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1229:	  }
        -: 1230:
     4000: 1231:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
     4000: 1232:	  x = 0;//No more buying cards
        -: 1233:
        -: 1234:	  if (DEBUG){
        -: 1235:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1236:	  }
        -: 1237:
        -: 1238:	}
        -: 1239:      }     
        -: 1240:
        -: 1241:      //Reset Hand
    56000: 1242:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    24000: 1243:	state->hand[currentPlayer][i] = temphand[i];
    24000: 1244:	temphand[i] = -1;
    24000: 1245:      }
        -: 1246:      //Reset Hand
        -: 1247:      			
     4000: 1248:      return 0;
        -: 1249:	
     5001: 1250:}
        -: 1251:
        -: 1252:int adventurerEffect(struct gameState *state, int currentPlayer) {
        -: 1253:	int temphand[MAX_HAND];// moved above the if statement
     4000: 1254:	int drawntreasure=0;
        -: 1255:	int cardDrawn;
     4000: 1256:	int z = 0;// this is the counter for the temp hand
        -: 1257:    
    32000: 1258:      while(drawntreasure<2){
    12000: 1259:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1260:	  shuffle(currentPlayer, state);
    #####: 1261:	}
    12000: 1262:	drawCard(currentPlayer, state);
    12000: 1263:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    20000: 1264:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     8000: 1265:	  drawntreasure++;
        -: 1266:	else{
     4000: 1267:	  temphand[z]=cardDrawn;
     4000: 1268:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4000: 1269:	  z++;
        -: 1270:	}
        -: 1271:      }
    16000: 1272:      while(z-1>=0){
     4000: 1273:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4000: 1274:	z=z-1;
        -: 1275:      }
     4000: 1276:      return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
     1001: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
     1001: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1001: 1287:      state->playedCardCount++;
     1001: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
     1001: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
     1001: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
    #####: 1298:    }
     1001: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
    #####: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
     1001: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
     1001: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
     1001: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
     1001: 1314:  return 0;
        -: 1315:}
        -: 1316:
        -: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
     4000: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
     4000: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
    #####: 1336:    }
     4000: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
    #####: 1341:    }
        -: 1342:  else
        -: 1343:    {
     4000: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     4000: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
     4000: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
     4000: 1351:  return 0;
     4000: 1352:}
        -: 1353:
        -: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
    12009: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
   134108: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
    55045: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
    15031: 1366:	  state->coins += 1;
    15031: 1367:	}
    40014: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
     7000: 1370:	  state->coins += 2;
     7000: 1371:	}
    33014: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
     6000: 1374:	  state->coins += 3;
     6000: 1375:	}	
    55045: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
    12009: 1379:  state->coins += bonus;
        -: 1380:
    12009: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
