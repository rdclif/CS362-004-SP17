LET'S START WITH THEM UNIT TESTS FIRST
unittest1.c:

####################
Unit test 1 - buyCard()

--- Testing player 0
TEST 1: Testing successful buy
buyCard() passes -  function exited without error
buyCard() passes -  numBuys decremented after buy
buyCard() fails -  currency was not removed from hand
buyCard() fails -  no card added to hand
TEST 2: Testing unsuccessful buy (not enough coins)
buyCard() passes -  -1 return value
TEST 3: Testing unsuccessful buy (empty supply)
buyCard() passes -  -1 return value

--- Testing player 1
TEST 1: Testing successful buy
buyCard() passes -  function exited without error
buyCard() passes -  numBuys decremented after buy
buyCard() fails -  currency was not removed from hand
buyCard() fails -  no card added to hand
TEST 2: Testing unsuccessful buy (not enough coins)
buyCard() passes -  -1 return value
TEST 3: Testing unsuccessful buy (empty supply)
buyCard() passes -  -1 return value
File 'dominion.c'
Lines executed:20.22% of 648
dominion.c:creating 'dominion.c.gcov'

unittest2.c:

####################
Unit test 2 - getCost()
TEST 1: Get cost of curse: 
 getCost passes - cost of Curse is correct
TEST 2: Get cost of copper: 
getCost passes - cost of Copper is correct
TEST 3: Get cost of silver: 
getCost passes - cost of Silver is correct
File 'dominion.c'
Lines executed:20.68% of 648
dominion.c:creating 'dominion.c.gcov'

unittest3.c:

####################
Unit test 3 - scoreFor()

--- Testing player 0
TEST 1: Testing Estates: 5 in hand, 10 in discard, 15 in deck
scoreFor() fails -  returned score 25, expected 30
TEST 2: Testing Great Halls: 5 in hand, 10 in discard, 15 in deck
scoreFor() fails -  returned score 25, expected 180
TEST 3: Testing Gardens: 5 in hand, 10 in discard, 15 in deck
scoreFor() fails -  returned score 0, expected 90

--- Testing player 1
TEST 1: Testing Estates: 5 in hand, 10 in discard, 15 in deck
scoreFor() fails -  returned score 25, expected 30
TEST 2: Testing Great Halls: 5 in hand, 10 in discard, 15 in deck
scoreFor() fails -  returned score 25, expected 180
TEST 3: Testing Gardens: 5 in hand, 10 in discard, 15 in deck
scoreFor() fails -  returned score 0, expected 90
File 'dominion.c'
Lines executed:26.39% of 648
dominion.c:creating 'dominion.c.gcov'

unittest4.c:

###################
Unit test 4 - shuffle()

--- Testing player 0
TEST 1: Testing incomplete game
isGameOver() passes -  game will continue
TEST 2: Testing empty Province pile as that ends the game
isGameOver() passes -  game ended correctly
TEST 3: Testing three empty supply piles
isGameOver() passes -  game ended correctly

--- Testing player 1
TEST 1: Testing incomplete game
isGameOver() passes -  game will continue
TEST 2: Testing empty Province pile as that ends the game
isGameOver() passes -  game ended correctly
TEST 3: Testing three empty supply piles
isGameOver() passes -  game ended correctly
File 'dominion.c'
Lines executed:27.78% of 648
dominion.c:creating 'dominion.c.gcov'

CARD TEST RESULTS COMING RIGHT UP
cardtest1.c:
Working on it.File 'dominion.c'
Lines executed:27.78% of 648
dominion.c:creating 'dominion.c.gcov'

cardtest2.c:

####################
----------------- Testing Card: Smithy ----------------

Testing player 0
TEST 1: Testing successful return: 
playSmithy(): PASSED
TEST 2: Testing hand count
smithyEffect(): FAIL - the hand holds 1 cards, expected 3
TEST 3: Testing discard
smithyEffect(): PASS smithy card has been discarded

Testing player 1
TEST 1: Testing successful return: 
playSmithy(): PASSED
TEST 2: Testing hand count
smithyEffect(): FAIL - the hand holds 1 cards, expected 3
TEST 3: Testing discard
smithyEffect(): PASS smithy card has been discarded

 >>>>> SUCCESS: Testing complete Smithy <<<<<

File 'dominion.c'
Lines executed:30.56% of 648
dominion.c:creating 'dominion.c.gcov'

cardtest3.c:

####################
----------------- Testing Card: Village ----------------
TEST 1: player 1 receives +4 cards
hand count = 9, expected = 8

----------------- Test #1: Failed -----------------
TEST 2: player 1 gets +1 card
buy count = 2, expected = 2

----------------- Test #2: Passed -----------------
TEST 3: State change should occur for other players
player 2 hand count = 1, expected = 1

----------------- Test #3: Passed -----------------
player 2 deck count = 9, expected = 9

----------------- Test #3: Passed -----------------

 >>>>> SUCCESS: Testing complete Village <<<<<

File 'dominion.c'
Lines executed:33.64% of 648
dominion.c:creating 'dominion.c.gcov'

cardtest4.c:

####################
----------------- Testing Card: Council Room ----------------
TEST 1: player 1 receives +4 cards
hand count = 9, expected = 8

----------------- Test #1: Failed -----------------
TEST 2: player 1 gets +1 card
buy count = 2, expected = 2

----------------- Test #2: Passed -----------------
TEST 3: State change should occur for other players
player 2 hand count = 1, expected = 1

----------------- Test #3: Passed -----------------
player 2 deck count = 9, expected = 9

----------------- Test #3: Passed -----------------

 >>>>> SUCCESS: Testing complete Council Room <<<<<

File 'dominion.c'
Lines executed:33.64% of 648
dominion.c:creating 'dominion.c.gcov'

